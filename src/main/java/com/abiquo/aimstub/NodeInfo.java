/**
 * Copyright (C) 2008 - Abiquo Holdings S.L. All rights reserved.
 *
 * Please see /opt/abiquo/tomcat/webapps/legal/ on Abiquo server
 * or contact contact@abiquo.com for licensing information.
 */
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.abiquo.aimstub;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-2-8")
public class NodeInfo implements org.apache.thrift.TBase<NodeInfo, NodeInfo._Fields>,
    java.io.Serializable, Cloneable, Comparable<NodeInfo>
{
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("NodeInfo");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC =
        new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING,
            (short) 1);

    private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC =
        new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I64,
            (short) 2);

    private static final org.apache.thrift.protocol.TField CORES_FIELD_DESC =
        new org.apache.thrift.protocol.TField("cores", org.apache.thrift.protocol.TType.I32,
            (short) 3);

    private static final org.apache.thrift.protocol.TField SOCKETS_FIELD_DESC =
        new org.apache.thrift.protocol.TField("sockets", org.apache.thrift.protocol.TType.I32,
            (short) 4);

    private static final org.apache.thrift.protocol.TField MEMORY_FIELD_DESC =
        new org.apache.thrift.protocol.TField("memory", org.apache.thrift.protocol.TType.DOUBLE,
            (short) 5);

    private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
        new HashMap<Class< ? extends IScheme>, SchemeFactory>();
    static
    {
        schemes.put(StandardScheme.class, new NodeInfoStandardSchemeFactory());
        schemes.put(TupleScheme.class, new NodeInfoTupleSchemeFactory());
    }

    public String name; // required

    public long version; // required

    public int cores; // required

    public int sockets; // required

    public double memory; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum
    {
        NAME((short) 1, "name"), VERSION((short) 2, "version"), CORES((short) 3, "cores"),
        SOCKETS((short) 4, "sockets"), MEMORY((short) 5, "memory");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static
        {
            for (_Fields field : EnumSet.allOf(_Fields.class))
            {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId)
        {
            switch (fieldId)
            {
                case 1: // NAME
                    return NAME;
                case 2: // VERSION
                    return VERSION;
                case 3: // CORES
                    return CORES;
                case 4: // SOCKETS
                    return SOCKETS;
                case 5: // MEMORY
                    return MEMORY;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId)
        {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null)
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name)
        {
            return byName.get(name);
        }

        private final short _thriftId;

        private final String _fieldName;

        _Fields(short thriftId, String fieldName)
        {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId()
        {
            return _thriftId;
        }

        public String getFieldName()
        {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __VERSION_ISSET_ID = 0;

    private static final int __CORES_ISSET_ID = 1;

    private static final int __SOCKETS_ISSET_ID = 2;

    private static final int __MEMORY_ISSET_ID = 3;

    private byte __isset_bitfield = 0;

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static
    {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
            new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.NAME,
            new org.apache.thrift.meta_data.FieldMetaData("name",
                org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.VERSION,
            new org.apache.thrift.meta_data.FieldMetaData("version",
                org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.CORES,
            new org.apache.thrift.meta_data.FieldMetaData("cores",
                org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.SOCKETS,
            new org.apache.thrift.meta_data.FieldMetaData("sockets",
                org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.MEMORY,
            new org.apache.thrift.meta_data.FieldMetaData("memory",
                org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.DOUBLE)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NodeInfo.class, metaDataMap);
    }

    public NodeInfo()
    {
    }

    public NodeInfo(String name, long version, int cores, int sockets, double memory)
    {
        this();
        this.name = name;
        this.version = version;
        setVersionIsSet(true);
        this.cores = cores;
        setCoresIsSet(true);
        this.sockets = sockets;
        setSocketsIsSet(true);
        this.memory = memory;
        setMemoryIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public NodeInfo(NodeInfo other)
    {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetName())
        {
            this.name = other.name;
        }
        this.version = other.version;
        this.cores = other.cores;
        this.sockets = other.sockets;
        this.memory = other.memory;
    }

    public NodeInfo deepCopy()
    {
        return new NodeInfo(this);
    }

    @Override
    public void clear()
    {
        this.name = null;
        setVersionIsSet(false);
        this.version = 0;
        setCoresIsSet(false);
        this.cores = 0;
        setSocketsIsSet(false);
        this.sockets = 0;
        setMemoryIsSet(false);
        this.memory = 0.0;
    }

    public String getName()
    {
        return this.name;
    }

    public NodeInfo setName(String name)
    {
        this.name = name;
        return this;
    }

    public void unsetName()
    {
        this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName()
    {
        return this.name != null;
    }

    public void setNameIsSet(boolean value)
    {
        if (!value)
        {
            this.name = null;
        }
    }

    public long getVersion()
    {
        return this.version;
    }

    public NodeInfo setVersion(long version)
    {
        this.version = version;
        setVersionIsSet(true);
        return this;
    }

    public void unsetVersion()
    {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
    }

    /** Returns true if field version is set (has been assigned a value) and false otherwise */
    public boolean isSetVersion()
    {
        return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
    }

    public void setVersionIsSet(boolean value)
    {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
    }

    public int getCores()
    {
        return this.cores;
    }

    public NodeInfo setCores(int cores)
    {
        this.cores = cores;
        setCoresIsSet(true);
        return this;
    }

    public void unsetCores()
    {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CORES_ISSET_ID);
    }

    /** Returns true if field cores is set (has been assigned a value) and false otherwise */
    public boolean isSetCores()
    {
        return EncodingUtils.testBit(__isset_bitfield, __CORES_ISSET_ID);
    }

    public void setCoresIsSet(boolean value)
    {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CORES_ISSET_ID, value);
    }

    public int getSockets()
    {
        return this.sockets;
    }

    public NodeInfo setSockets(int sockets)
    {
        this.sockets = sockets;
        setSocketsIsSet(true);
        return this;
    }

    public void unsetSockets()
    {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SOCKETS_ISSET_ID);
    }

    /** Returns true if field sockets is set (has been assigned a value) and false otherwise */
    public boolean isSetSockets()
    {
        return EncodingUtils.testBit(__isset_bitfield, __SOCKETS_ISSET_ID);
    }

    public void setSocketsIsSet(boolean value)
    {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SOCKETS_ISSET_ID, value);
    }

    public double getMemory()
    {
        return this.memory;
    }

    public NodeInfo setMemory(double memory)
    {
        this.memory = memory;
        setMemoryIsSet(true);
        return this;
    }

    public void unsetMemory()
    {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMORY_ISSET_ID);
    }

    /** Returns true if field memory is set (has been assigned a value) and false otherwise */
    public boolean isSetMemory()
    {
        return EncodingUtils.testBit(__isset_bitfield, __MEMORY_ISSET_ID);
    }

    public void setMemoryIsSet(boolean value)
    {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMORY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value)
    {
        switch (field)
        {
            case NAME:
                if (value == null)
                {
                    unsetName();
                }
                else
                {
                    setName((String) value);
                }
                break;

            case VERSION:
                if (value == null)
                {
                    unsetVersion();
                }
                else
                {
                    setVersion((Long) value);
                }
                break;

            case CORES:
                if (value == null)
                {
                    unsetCores();
                }
                else
                {
                    setCores((Integer) value);
                }
                break;

            case SOCKETS:
                if (value == null)
                {
                    unsetSockets();
                }
                else
                {
                    setSockets((Integer) value);
                }
                break;

            case MEMORY:
                if (value == null)
                {
                    unsetMemory();
                }
                else
                {
                    setMemory((Double) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field)
    {
        switch (field)
        {
            case NAME:
                return getName();

            case VERSION:
                return Long.valueOf(getVersion());

            case CORES:
                return Integer.valueOf(getCores());

            case SOCKETS:
                return Integer.valueOf(getSockets());

            case MEMORY:
                return Double.valueOf(getMemory());

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field)
    {
        if (field == null)
        {
            throw new IllegalArgumentException();
        }

        switch (field)
        {
            case NAME:
                return isSetName();
            case VERSION:
                return isSetVersion();
            case CORES:
                return isSetCores();
            case SOCKETS:
                return isSetSockets();
            case MEMORY:
                return isSetMemory();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that)
    {
        if (that == null)
            return false;
        if (that instanceof NodeInfo)
            return this.equals((NodeInfo) that);
        return false;
    }

    public boolean equals(NodeInfo that)
    {
        if (that == null)
            return false;

        boolean this_present_name = true && this.isSetName();
        boolean that_present_name = true && that.isSetName();
        if (this_present_name || that_present_name)
        {
            if (!(this_present_name && that_present_name))
                return false;
            if (!this.name.equals(that.name))
                return false;
        }

        boolean this_present_version = true;
        boolean that_present_version = true;
        if (this_present_version || that_present_version)
        {
            if (!(this_present_version && that_present_version))
                return false;
            if (this.version != that.version)
                return false;
        }

        boolean this_present_cores = true;
        boolean that_present_cores = true;
        if (this_present_cores || that_present_cores)
        {
            if (!(this_present_cores && that_present_cores))
                return false;
            if (this.cores != that.cores)
                return false;
        }

        boolean this_present_sockets = true;
        boolean that_present_sockets = true;
        if (this_present_sockets || that_present_sockets)
        {
            if (!(this_present_sockets && that_present_sockets))
                return false;
            if (this.sockets != that.sockets)
                return false;
        }

        boolean this_present_memory = true;
        boolean that_present_memory = true;
        if (this_present_memory || that_present_memory)
        {
            if (!(this_present_memory && that_present_memory))
                return false;
            if (this.memory != that.memory)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode()
    {
        List<Object> list = new ArrayList<Object>();

        boolean present_name = true && (isSetName());
        list.add(present_name);
        if (present_name)
            list.add(name);

        boolean present_version = true;
        list.add(present_version);
        if (present_version)
            list.add(version);

        boolean present_cores = true;
        list.add(present_cores);
        if (present_cores)
            list.add(cores);

        boolean present_sockets = true;
        list.add(present_sockets);
        if (present_sockets)
            list.add(sockets);

        boolean present_memory = true;
        list.add(present_memory);
        if (present_memory)
            list.add(memory);

        return list.hashCode();
    }

    @Override
    public int compareTo(NodeInfo other)
    {
        if (!getClass().equals(other.getClass()))
        {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetName())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetVersion())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetCores()).compareTo(other.isSetCores());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetCores())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cores, other.cores);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetSockets()).compareTo(other.isSetSockets());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetSockets())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sockets, other.sockets);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetMemory()).compareTo(other.isSetMemory());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetMemory())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memory, other.memory);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId)
    {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException
    {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException
    {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder("NodeInfo(");
        boolean first = true;

        sb.append("name:");
        if (this.name == null)
        {
            sb.append("null");
        }
        else
        {
            sb.append(this.name);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("version:");
        sb.append(this.version);
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("cores:");
        sb.append(this.cores);
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("sockets:");
        sb.append(this.sockets);
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("memory:");
        sb.append(this.memory);
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException
    {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
    {
        try
        {
            write(new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
        }
        catch (org.apache.thrift.TException te)
        {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException
    {
        try
        {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and
            // doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
        }
        catch (org.apache.thrift.TException te)
        {
            throw new java.io.IOException(te);
        }
    }

    private static class NodeInfoStandardSchemeFactory implements SchemeFactory
    {
        public NodeInfoStandardScheme getScheme()
        {
            return new NodeInfoStandardScheme();
        }
    }

    private static class NodeInfoStandardScheme extends StandardScheme<NodeInfo>
    {

        public void read(org.apache.thrift.protocol.TProtocol iprot, NodeInfo struct)
            throws org.apache.thrift.TException
        {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true)
            {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                {
                    break;
                }
                switch (schemeField.id)
                {
                    case 1: // NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                        {
                            struct.name = iprot.readString();
                            struct.setNameIsSet(true);
                        }
                        else
                        {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // VERSION
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64)
                        {
                            struct.version = iprot.readI64();
                            struct.setVersionIsSet(true);
                        }
                        else
                        {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // CORES
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32)
                        {
                            struct.cores = iprot.readI32();
                            struct.setCoresIsSet(true);
                        }
                        else
                        {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // SOCKETS
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32)
                        {
                            struct.sockets = iprot.readI32();
                            struct.setSocketsIsSet(true);
                        }
                        else
                        {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // MEMORY
                        if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE)
                        {
                            struct.memory = iprot.readDouble();
                            struct.setMemoryIsSet(true);
                        }
                        else
                        {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate
            // method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, NodeInfo struct)
            throws org.apache.thrift.TException
        {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.name != null)
            {
                oprot.writeFieldBegin(NAME_FIELD_DESC);
                oprot.writeString(struct.name);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(VERSION_FIELD_DESC);
            oprot.writeI64(struct.version);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(CORES_FIELD_DESC);
            oprot.writeI32(struct.cores);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(SOCKETS_FIELD_DESC);
            oprot.writeI32(struct.sockets);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(MEMORY_FIELD_DESC);
            oprot.writeDouble(struct.memory);
            oprot.writeFieldEnd();
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class NodeInfoTupleSchemeFactory implements SchemeFactory
    {
        public NodeInfoTupleScheme getScheme()
        {
            return new NodeInfoTupleScheme();
        }
    }

    private static class NodeInfoTupleScheme extends TupleScheme<NodeInfo>
    {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, NodeInfo struct)
            throws org.apache.thrift.TException
        {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            BitSet optionals = new BitSet();
            if (struct.isSetName())
            {
                optionals.set(0);
            }
            if (struct.isSetVersion())
            {
                optionals.set(1);
            }
            if (struct.isSetCores())
            {
                optionals.set(2);
            }
            if (struct.isSetSockets())
            {
                optionals.set(3);
            }
            if (struct.isSetMemory())
            {
                optionals.set(4);
            }
            oprot.writeBitSet(optionals, 5);
            if (struct.isSetName())
            {
                oprot.writeString(struct.name);
            }
            if (struct.isSetVersion())
            {
                oprot.writeI64(struct.version);
            }
            if (struct.isSetCores())
            {
                oprot.writeI32(struct.cores);
            }
            if (struct.isSetSockets())
            {
                oprot.writeI32(struct.sockets);
            }
            if (struct.isSetMemory())
            {
                oprot.writeDouble(struct.memory);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, NodeInfo struct)
            throws org.apache.thrift.TException
        {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            BitSet incoming = iprot.readBitSet(5);
            if (incoming.get(0))
            {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
            }
            if (incoming.get(1))
            {
                struct.version = iprot.readI64();
                struct.setVersionIsSet(true);
            }
            if (incoming.get(2))
            {
                struct.cores = iprot.readI32();
                struct.setCoresIsSet(true);
            }
            if (incoming.get(3))
            {
                struct.sockets = iprot.readI32();
                struct.setSocketsIsSet(true);
            }
            if (incoming.get(4))
            {
                struct.memory = iprot.readDouble();
                struct.setMemoryIsSet(true);
            }
        }
    }

}
