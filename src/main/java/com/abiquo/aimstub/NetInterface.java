/**
 * Copyright (C) 2008 - Abiquo Holdings S.L. All rights reserved.
 *
 * Please see /opt/abiquo/tomcat/webapps/legal/ on Abiquo server
 * or contact contact@abiquo.com for licensing information.
 */
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.abiquo.aimstub;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-2-8")
public class NetInterface implements org.apache.thrift.TBase<NetInterface, NetInterface._Fields>,
    java.io.Serializable, Cloneable, Comparable<NetInterface>
{
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("NetInterface");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC =
        new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING,
            (short) 1);

    private static final org.apache.thrift.protocol.TField ADDRESS_FIELD_DESC =
        new org.apache.thrift.protocol.TField("address", org.apache.thrift.protocol.TType.STRING,
            (short) 2);

    private static final org.apache.thrift.protocol.TField PHYSICAL_ADDRESS_FIELD_DESC =
        new org.apache.thrift.protocol.TField("physicalAddress",
            org.apache.thrift.protocol.TType.STRING, (short) 3);

    private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
        new HashMap<Class< ? extends IScheme>, SchemeFactory>();
    static
    {
        schemes.put(StandardScheme.class, new NetInterfaceStandardSchemeFactory());
        schemes.put(TupleScheme.class, new NetInterfaceTupleSchemeFactory());
    }

    public String name; // required

    public String address; // required

    public String physicalAddress; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum
    {
        NAME((short) 1, "name"), ADDRESS((short) 2, "address"),
        PHYSICAL_ADDRESS((short) 3, "physicalAddress");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static
        {
            for (_Fields field : EnumSet.allOf(_Fields.class))
            {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId)
        {
            switch (fieldId)
            {
                case 1: // NAME
                    return NAME;
                case 2: // ADDRESS
                    return ADDRESS;
                case 3: // PHYSICAL_ADDRESS
                    return PHYSICAL_ADDRESS;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId)
        {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null)
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name)
        {
            return byName.get(name);
        }

        private final short _thriftId;

        private final String _fieldName;

        _Fields(short thriftId, String fieldName)
        {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId()
        {
            return _thriftId;
        }

        public String getFieldName()
        {
            return _fieldName;
        }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static
    {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
            new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.NAME,
            new org.apache.thrift.meta_data.FieldMetaData("name",
                org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.ADDRESS,
            new org.apache.thrift.meta_data.FieldMetaData("address",
                org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.PHYSICAL_ADDRESS,
            new org.apache.thrift.meta_data.FieldMetaData("physicalAddress",
                org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NetInterface.class,
            metaDataMap);
    }

    public NetInterface()
    {
    }

    public NetInterface(String name, String address, String physicalAddress)
    {
        this();
        this.name = name;
        this.address = address;
        this.physicalAddress = physicalAddress;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public NetInterface(NetInterface other)
    {
        if (other.isSetName())
        {
            this.name = other.name;
        }
        if (other.isSetAddress())
        {
            this.address = other.address;
        }
        if (other.isSetPhysicalAddress())
        {
            this.physicalAddress = other.physicalAddress;
        }
    }

    public NetInterface deepCopy()
    {
        return new NetInterface(this);
    }

    @Override
    public void clear()
    {
        this.name = null;
        this.address = null;
        this.physicalAddress = null;
    }

    public String getName()
    {
        return this.name;
    }

    public NetInterface setName(String name)
    {
        this.name = name;
        return this;
    }

    public void unsetName()
    {
        this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName()
    {
        return this.name != null;
    }

    public void setNameIsSet(boolean value)
    {
        if (!value)
        {
            this.name = null;
        }
    }

    public String getAddress()
    {
        return this.address;
    }

    public NetInterface setAddress(String address)
    {
        this.address = address;
        return this;
    }

    public void unsetAddress()
    {
        this.address = null;
    }

    /** Returns true if field address is set (has been assigned a value) and false otherwise */
    public boolean isSetAddress()
    {
        return this.address != null;
    }

    public void setAddressIsSet(boolean value)
    {
        if (!value)
        {
            this.address = null;
        }
    }

    public String getPhysicalAddress()
    {
        return this.physicalAddress;
    }

    public NetInterface setPhysicalAddress(String physicalAddress)
    {
        this.physicalAddress = physicalAddress;
        return this;
    }

    public void unsetPhysicalAddress()
    {
        this.physicalAddress = null;
    }

    /**
     * Returns true if field physicalAddress is set (has been assigned a value) and false otherwise
     */
    public boolean isSetPhysicalAddress()
    {
        return this.physicalAddress != null;
    }

    public void setPhysicalAddressIsSet(boolean value)
    {
        if (!value)
        {
            this.physicalAddress = null;
        }
    }

    public void setFieldValue(_Fields field, Object value)
    {
        switch (field)
        {
            case NAME:
                if (value == null)
                {
                    unsetName();
                }
                else
                {
                    setName((String) value);
                }
                break;

            case ADDRESS:
                if (value == null)
                {
                    unsetAddress();
                }
                else
                {
                    setAddress((String) value);
                }
                break;

            case PHYSICAL_ADDRESS:
                if (value == null)
                {
                    unsetPhysicalAddress();
                }
                else
                {
                    setPhysicalAddress((String) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field)
    {
        switch (field)
        {
            case NAME:
                return getName();

            case ADDRESS:
                return getAddress();

            case PHYSICAL_ADDRESS:
                return getPhysicalAddress();

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field)
    {
        if (field == null)
        {
            throw new IllegalArgumentException();
        }

        switch (field)
        {
            case NAME:
                return isSetName();
            case ADDRESS:
                return isSetAddress();
            case PHYSICAL_ADDRESS:
                return isSetPhysicalAddress();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that)
    {
        if (that == null)
            return false;
        if (that instanceof NetInterface)
            return this.equals((NetInterface) that);
        return false;
    }

    public boolean equals(NetInterface that)
    {
        if (that == null)
            return false;

        boolean this_present_name = true && this.isSetName();
        boolean that_present_name = true && that.isSetName();
        if (this_present_name || that_present_name)
        {
            if (!(this_present_name && that_present_name))
                return false;
            if (!this.name.equals(that.name))
                return false;
        }

        boolean this_present_address = true && this.isSetAddress();
        boolean that_present_address = true && that.isSetAddress();
        if (this_present_address || that_present_address)
        {
            if (!(this_present_address && that_present_address))
                return false;
            if (!this.address.equals(that.address))
                return false;
        }

        boolean this_present_physicalAddress = true && this.isSetPhysicalAddress();
        boolean that_present_physicalAddress = true && that.isSetPhysicalAddress();
        if (this_present_physicalAddress || that_present_physicalAddress)
        {
            if (!(this_present_physicalAddress && that_present_physicalAddress))
                return false;
            if (!this.physicalAddress.equals(that.physicalAddress))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode()
    {
        List<Object> list = new ArrayList<Object>();

        boolean present_name = true && (isSetName());
        list.add(present_name);
        if (present_name)
            list.add(name);

        boolean present_address = true && (isSetAddress());
        list.add(present_address);
        if (present_address)
            list.add(address);

        boolean present_physicalAddress = true && (isSetPhysicalAddress());
        list.add(present_physicalAddress);
        if (present_physicalAddress)
            list.add(physicalAddress);

        return list.hashCode();
    }

    @Override
    public int compareTo(NetInterface other)
    {
        if (!getClass().equals(other.getClass()))
        {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetName())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetAddress()).compareTo(other.isSetAddress());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetAddress())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.address, other.address);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        lastComparison =
            Boolean.valueOf(isSetPhysicalAddress()).compareTo(other.isSetPhysicalAddress());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetPhysicalAddress())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.physicalAddress,
                other.physicalAddress);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId)
    {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException
    {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException
    {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder("NetInterface(");
        boolean first = true;

        sb.append("name:");
        if (this.name == null)
        {
            sb.append("null");
        }
        else
        {
            sb.append(this.name);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("address:");
        if (this.address == null)
        {
            sb.append("null");
        }
        else
        {
            sb.append(this.address);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("physicalAddress:");
        if (this.physicalAddress == null)
        {
            sb.append("null");
        }
        else
        {
            sb.append(this.physicalAddress);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException
    {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
    {
        try
        {
            write(new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
        }
        catch (org.apache.thrift.TException te)
        {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException
    {
        try
        {
            read(new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
        }
        catch (org.apache.thrift.TException te)
        {
            throw new java.io.IOException(te);
        }
    }

    private static class NetInterfaceStandardSchemeFactory implements SchemeFactory
    {
        public NetInterfaceStandardScheme getScheme()
        {
            return new NetInterfaceStandardScheme();
        }
    }

    private static class NetInterfaceStandardScheme extends StandardScheme<NetInterface>
    {

        public void read(org.apache.thrift.protocol.TProtocol iprot, NetInterface struct)
            throws org.apache.thrift.TException
        {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true)
            {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                {
                    break;
                }
                switch (schemeField.id)
                {
                    case 1: // NAME
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                        {
                            struct.name = iprot.readString();
                            struct.setNameIsSet(true);
                        }
                        else
                        {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // ADDRESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                        {
                            struct.address = iprot.readString();
                            struct.setAddressIsSet(true);
                        }
                        else
                        {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // PHYSICAL_ADDRESS
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                        {
                            struct.physicalAddress = iprot.readString();
                            struct.setPhysicalAddressIsSet(true);
                        }
                        else
                        {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate
            // method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, NetInterface struct)
            throws org.apache.thrift.TException
        {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.name != null)
            {
                oprot.writeFieldBegin(NAME_FIELD_DESC);
                oprot.writeString(struct.name);
                oprot.writeFieldEnd();
            }
            if (struct.address != null)
            {
                oprot.writeFieldBegin(ADDRESS_FIELD_DESC);
                oprot.writeString(struct.address);
                oprot.writeFieldEnd();
            }
            if (struct.physicalAddress != null)
            {
                oprot.writeFieldBegin(PHYSICAL_ADDRESS_FIELD_DESC);
                oprot.writeString(struct.physicalAddress);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class NetInterfaceTupleSchemeFactory implements SchemeFactory
    {
        public NetInterfaceTupleScheme getScheme()
        {
            return new NetInterfaceTupleScheme();
        }
    }

    private static class NetInterfaceTupleScheme extends TupleScheme<NetInterface>
    {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, NetInterface struct)
            throws org.apache.thrift.TException
        {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            BitSet optionals = new BitSet();
            if (struct.isSetName())
            {
                optionals.set(0);
            }
            if (struct.isSetAddress())
            {
                optionals.set(1);
            }
            if (struct.isSetPhysicalAddress())
            {
                optionals.set(2);
            }
            oprot.writeBitSet(optionals, 3);
            if (struct.isSetName())
            {
                oprot.writeString(struct.name);
            }
            if (struct.isSetAddress())
            {
                oprot.writeString(struct.address);
            }
            if (struct.isSetPhysicalAddress())
            {
                oprot.writeString(struct.physicalAddress);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, NetInterface struct)
            throws org.apache.thrift.TException
        {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            BitSet incoming = iprot.readBitSet(3);
            if (incoming.get(0))
            {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
            }
            if (incoming.get(1))
            {
                struct.address = iprot.readString();
                struct.setAddressIsSet(true);
            }
            if (incoming.get(2))
            {
                struct.physicalAddress = iprot.readString();
                struct.setPhysicalAddressIsSet(true);
            }
        }
    }

}
