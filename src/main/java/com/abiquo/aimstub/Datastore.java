/**
 * Copyright (C) 2008 - Abiquo Holdings S.L. All rights reserved.
 *
 * Please see /opt/abiquo/tomcat/webapps/legal/ on Abiquo server
 * or contact contact@abiquo.com for licensing information.
 */
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.abiquo.aimstub;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-2-8")
public class Datastore implements org.apache.thrift.TBase<Datastore, Datastore._Fields>,
    java.io.Serializable, Cloneable, Comparable<Datastore>
{
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
        new org.apache.thrift.protocol.TStruct("Datastore");

    private static final org.apache.thrift.protocol.TField DEVICE_FIELD_DESC =
        new org.apache.thrift.protocol.TField("device", org.apache.thrift.protocol.TType.STRING,
            (short) 1);

    private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC =
        new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING,
            (short) 2);

    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC =
        new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING,
            (short) 3);

    private static final org.apache.thrift.protocol.TField TOTAL_SIZE_FIELD_DESC =
        new org.apache.thrift.protocol.TField("totalSize", org.apache.thrift.protocol.TType.I64,
            (short) 4);

    private static final org.apache.thrift.protocol.TField USABLE_SIZE_FIELD_DESC =
        new org.apache.thrift.protocol.TField("usableSize", org.apache.thrift.protocol.TType.I64,
            (short) 5);

    private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
        new HashMap<Class< ? extends IScheme>, SchemeFactory>();
    static
    {
        schemes.put(StandardScheme.class, new DatastoreStandardSchemeFactory());
        schemes.put(TupleScheme.class, new DatastoreTupleSchemeFactory());
    }

    public String device; // required

    public String path; // required

    public String type; // required

    public long totalSize; // required

    public long usableSize; // required

    /**
     * The set of fields this struct contains, along with convenience methods for finding and
     * manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum
    {
        DEVICE((short) 1, "device"), PATH((short) 2, "path"), TYPE((short) 3, "type"),
        TOTAL_SIZE((short) 4, "totalSize"), USABLE_SIZE((short) 5, "usableSize");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static
        {
            for (_Fields field : EnumSet.allOf(_Fields.class))
            {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId)
        {
            switch (fieldId)
            {
                case 1: // DEVICE
                    return DEVICE;
                case 2: // PATH
                    return PATH;
                case 3: // TYPE
                    return TYPE;
                case 4: // TOTAL_SIZE
                    return TOTAL_SIZE;
                case 5: // USABLE_SIZE
                    return USABLE_SIZE;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId)
        {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null)
                throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name)
        {
            return byName.get(name);
        }

        private final short _thriftId;

        private final String _fieldName;

        _Fields(short thriftId, String fieldName)
        {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId()
        {
            return _thriftId;
        }

        public String getFieldName()
        {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __TOTALSIZE_ISSET_ID = 0;

    private static final int __USABLESIZE_ISSET_ID = 1;

    private byte __isset_bitfield = 0;

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static
    {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
            new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.DEVICE,
            new org.apache.thrift.meta_data.FieldMetaData("device",
                org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.PATH,
            new org.apache.thrift.meta_data.FieldMetaData("path",
                org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.TYPE,
            new org.apache.thrift.meta_data.FieldMetaData("type",
                org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.TOTAL_SIZE,
            new org.apache.thrift.meta_data.FieldMetaData("totalSize",
                org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.USABLE_SIZE,
            new org.apache.thrift.meta_data.FieldMetaData("usableSize",
                org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(
                    org.apache.thrift.protocol.TType.I64)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Datastore.class,
            metaDataMap);
    }

    public Datastore()
    {
    }

    public Datastore(String device, String path, String type, long totalSize, long usableSize)
    {
        this();
        this.device = device;
        this.path = path;
        this.type = type;
        this.totalSize = totalSize;
        setTotalSizeIsSet(true);
        this.usableSize = usableSize;
        setUsableSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Datastore(Datastore other)
    {
        __isset_bitfield = other.__isset_bitfield;
        if (other.isSetDevice())
        {
            this.device = other.device;
        }
        if (other.isSetPath())
        {
            this.path = other.path;
        }
        if (other.isSetType())
        {
            this.type = other.type;
        }
        this.totalSize = other.totalSize;
        this.usableSize = other.usableSize;
    }

    public Datastore deepCopy()
    {
        return new Datastore(this);
    }

    @Override
    public void clear()
    {
        this.device = null;
        this.path = null;
        this.type = null;
        setTotalSizeIsSet(false);
        this.totalSize = 0;
        setUsableSizeIsSet(false);
        this.usableSize = 0;
    }

    public String getDevice()
    {
        return this.device;
    }

    public Datastore setDevice(String device)
    {
        this.device = device;
        return this;
    }

    public void unsetDevice()
    {
        this.device = null;
    }

    /** Returns true if field device is set (has been assigned a value) and false otherwise */
    public boolean isSetDevice()
    {
        return this.device != null;
    }

    public void setDeviceIsSet(boolean value)
    {
        if (!value)
        {
            this.device = null;
        }
    }

    public String getPath()
    {
        return this.path;
    }

    public Datastore setPath(String path)
    {
        this.path = path;
        return this;
    }

    public void unsetPath()
    {
        this.path = null;
    }

    /** Returns true if field path is set (has been assigned a value) and false otherwise */
    public boolean isSetPath()
    {
        return this.path != null;
    }

    public void setPathIsSet(boolean value)
    {
        if (!value)
        {
            this.path = null;
        }
    }

    public String getType()
    {
        return this.type;
    }

    public Datastore setType(String type)
    {
        this.type = type;
        return this;
    }

    public void unsetType()
    {
        this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType()
    {
        return this.type != null;
    }

    public void setTypeIsSet(boolean value)
    {
        if (!value)
        {
            this.type = null;
        }
    }

    public long getTotalSize()
    {
        return this.totalSize;
    }

    public Datastore setTotalSize(long totalSize)
    {
        this.totalSize = totalSize;
        setTotalSizeIsSet(true);
        return this;
    }

    public void unsetTotalSize()
    {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALSIZE_ISSET_ID);
    }

    /** Returns true if field totalSize is set (has been assigned a value) and false otherwise */
    public boolean isSetTotalSize()
    {
        return EncodingUtils.testBit(__isset_bitfield, __TOTALSIZE_ISSET_ID);
    }

    public void setTotalSizeIsSet(boolean value)
    {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALSIZE_ISSET_ID, value);
    }

    public long getUsableSize()
    {
        return this.usableSize;
    }

    public Datastore setUsableSize(long usableSize)
    {
        this.usableSize = usableSize;
        setUsableSizeIsSet(true);
        return this;
    }

    public void unsetUsableSize()
    {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USABLESIZE_ISSET_ID);
    }

    /** Returns true if field usableSize is set (has been assigned a value) and false otherwise */
    public boolean isSetUsableSize()
    {
        return EncodingUtils.testBit(__isset_bitfield, __USABLESIZE_ISSET_ID);
    }

    public void setUsableSizeIsSet(boolean value)
    {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USABLESIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value)
    {
        switch (field)
        {
            case DEVICE:
                if (value == null)
                {
                    unsetDevice();
                }
                else
                {
                    setDevice((String) value);
                }
                break;

            case PATH:
                if (value == null)
                {
                    unsetPath();
                }
                else
                {
                    setPath((String) value);
                }
                break;

            case TYPE:
                if (value == null)
                {
                    unsetType();
                }
                else
                {
                    setType((String) value);
                }
                break;

            case TOTAL_SIZE:
                if (value == null)
                {
                    unsetTotalSize();
                }
                else
                {
                    setTotalSize((Long) value);
                }
                break;

            case USABLE_SIZE:
                if (value == null)
                {
                    unsetUsableSize();
                }
                else
                {
                    setUsableSize((Long) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field)
    {
        switch (field)
        {
            case DEVICE:
                return getDevice();

            case PATH:
                return getPath();

            case TYPE:
                return getType();

            case TOTAL_SIZE:
                return Long.valueOf(getTotalSize());

            case USABLE_SIZE:
                return Long.valueOf(getUsableSize());

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false
     * otherwise
     */
    public boolean isSet(_Fields field)
    {
        if (field == null)
        {
            throw new IllegalArgumentException();
        }

        switch (field)
        {
            case DEVICE:
                return isSetDevice();
            case PATH:
                return isSetPath();
            case TYPE:
                return isSetType();
            case TOTAL_SIZE:
                return isSetTotalSize();
            case USABLE_SIZE:
                return isSetUsableSize();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that)
    {
        if (that == null)
            return false;
        if (that instanceof Datastore)
            return this.equals((Datastore) that);
        return false;
    }

    public boolean equals(Datastore that)
    {
        if (that == null)
            return false;

        boolean this_present_device = true && this.isSetDevice();
        boolean that_present_device = true && that.isSetDevice();
        if (this_present_device || that_present_device)
        {
            if (!(this_present_device && that_present_device))
                return false;
            if (!this.device.equals(that.device))
                return false;
        }

        boolean this_present_path = true && this.isSetPath();
        boolean that_present_path = true && that.isSetPath();
        if (this_present_path || that_present_path)
        {
            if (!(this_present_path && that_present_path))
                return false;
            if (!this.path.equals(that.path))
                return false;
        }

        boolean this_present_type = true && this.isSetType();
        boolean that_present_type = true && that.isSetType();
        if (this_present_type || that_present_type)
        {
            if (!(this_present_type && that_present_type))
                return false;
            if (!this.type.equals(that.type))
                return false;
        }

        boolean this_present_totalSize = true;
        boolean that_present_totalSize = true;
        if (this_present_totalSize || that_present_totalSize)
        {
            if (!(this_present_totalSize && that_present_totalSize))
                return false;
            if (this.totalSize != that.totalSize)
                return false;
        }

        boolean this_present_usableSize = true;
        boolean that_present_usableSize = true;
        if (this_present_usableSize || that_present_usableSize)
        {
            if (!(this_present_usableSize && that_present_usableSize))
                return false;
            if (this.usableSize != that.usableSize)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode()
    {
        List<Object> list = new ArrayList<Object>();

        boolean present_device = true && (isSetDevice());
        list.add(present_device);
        if (present_device)
            list.add(device);

        boolean present_path = true && (isSetPath());
        list.add(present_path);
        if (present_path)
            list.add(path);

        boolean present_type = true && (isSetType());
        list.add(present_type);
        if (present_type)
            list.add(type);

        boolean present_totalSize = true;
        list.add(present_totalSize);
        if (present_totalSize)
            list.add(totalSize);

        boolean present_usableSize = true;
        list.add(present_usableSize);
        if (present_usableSize)
            list.add(usableSize);

        return list.hashCode();
    }

    @Override
    public int compareTo(Datastore other)
    {
        if (!getClass().equals(other.getClass()))
        {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetDevice()).compareTo(other.isSetDevice());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetDevice())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.device, other.device);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetPath()).compareTo(other.isSetPath());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetPath())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetType())
        {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTotalSize()).compareTo(other.isSetTotalSize());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetTotalSize())
        {
            lastComparison =
                org.apache.thrift.TBaseHelper.compareTo(this.totalSize, other.totalSize);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetUsableSize()).compareTo(other.isSetUsableSize());
        if (lastComparison != 0)
        {
            return lastComparison;
        }
        if (isSetUsableSize())
        {
            lastComparison =
                org.apache.thrift.TBaseHelper.compareTo(this.usableSize, other.usableSize);
            if (lastComparison != 0)
            {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId)
    {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException
    {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot)
        throws org.apache.thrift.TException
    {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder("Datastore(");
        boolean first = true;

        sb.append("device:");
        if (this.device == null)
        {
            sb.append("null");
        }
        else
        {
            sb.append(this.device);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("path:");
        if (this.path == null)
        {
            sb.append("null");
        }
        else
        {
            sb.append(this.path);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("type:");
        if (this.type == null)
        {
            sb.append("null");
        }
        else
        {
            sb.append(this.type);
        }
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("totalSize:");
        sb.append(this.totalSize);
        first = false;
        if (!first)
            sb.append(", ");
        sb.append("usableSize:");
        sb.append(this.usableSize);
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException
    {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
    {
        try
        {
            write(new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(out)));
        }
        catch (org.apache.thrift.TException te)
        {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in)
        throws java.io.IOException, ClassNotFoundException
    {
        try
        {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and
            // doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(
                new org.apache.thrift.transport.TIOStreamTransport(in)));
        }
        catch (org.apache.thrift.TException te)
        {
            throw new java.io.IOException(te);
        }
    }

    private static class DatastoreStandardSchemeFactory implements SchemeFactory
    {
        public DatastoreStandardScheme getScheme()
        {
            return new DatastoreStandardScheme();
        }
    }

    private static class DatastoreStandardScheme extends StandardScheme<Datastore>
    {

        public void read(org.apache.thrift.protocol.TProtocol iprot, Datastore struct)
            throws org.apache.thrift.TException
        {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true)
            {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                {
                    break;
                }
                switch (schemeField.id)
                {
                    case 1: // DEVICE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                        {
                            struct.device = iprot.readString();
                            struct.setDeviceIsSet(true);
                        }
                        else
                        {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // PATH
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                        {
                            struct.path = iprot.readString();
                            struct.setPathIsSet(true);
                        }
                        else
                        {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 3: // TYPE
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                        {
                            struct.type = iprot.readString();
                            struct.setTypeIsSet(true);
                        }
                        else
                        {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 4: // TOTAL_SIZE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64)
                        {
                            struct.totalSize = iprot.readI64();
                            struct.setTotalSizeIsSet(true);
                        }
                        else
                        {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 5: // USABLE_SIZE
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64)
                        {
                            struct.usableSize = iprot.readI64();
                            struct.setUsableSizeIsSet(true);
                        }
                        else
                        {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate
            // method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, Datastore struct)
            throws org.apache.thrift.TException
        {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            if (struct.device != null)
            {
                oprot.writeFieldBegin(DEVICE_FIELD_DESC);
                oprot.writeString(struct.device);
                oprot.writeFieldEnd();
            }
            if (struct.path != null)
            {
                oprot.writeFieldBegin(PATH_FIELD_DESC);
                oprot.writeString(struct.path);
                oprot.writeFieldEnd();
            }
            if (struct.type != null)
            {
                oprot.writeFieldBegin(TYPE_FIELD_DESC);
                oprot.writeString(struct.type);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldBegin(TOTAL_SIZE_FIELD_DESC);
            oprot.writeI64(struct.totalSize);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(USABLE_SIZE_FIELD_DESC);
            oprot.writeI64(struct.usableSize);
            oprot.writeFieldEnd();
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class DatastoreTupleSchemeFactory implements SchemeFactory
    {
        public DatastoreTupleScheme getScheme()
        {
            return new DatastoreTupleScheme();
        }
    }

    private static class DatastoreTupleScheme extends TupleScheme<Datastore>
    {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, Datastore struct)
            throws org.apache.thrift.TException
        {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            BitSet optionals = new BitSet();
            if (struct.isSetDevice())
            {
                optionals.set(0);
            }
            if (struct.isSetPath())
            {
                optionals.set(1);
            }
            if (struct.isSetType())
            {
                optionals.set(2);
            }
            if (struct.isSetTotalSize())
            {
                optionals.set(3);
            }
            if (struct.isSetUsableSize())
            {
                optionals.set(4);
            }
            oprot.writeBitSet(optionals, 5);
            if (struct.isSetDevice())
            {
                oprot.writeString(struct.device);
            }
            if (struct.isSetPath())
            {
                oprot.writeString(struct.path);
            }
            if (struct.isSetType())
            {
                oprot.writeString(struct.type);
            }
            if (struct.isSetTotalSize())
            {
                oprot.writeI64(struct.totalSize);
            }
            if (struct.isSetUsableSize())
            {
                oprot.writeI64(struct.usableSize);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, Datastore struct)
            throws org.apache.thrift.TException
        {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            BitSet incoming = iprot.readBitSet(5);
            if (incoming.get(0))
            {
                struct.device = iprot.readString();
                struct.setDeviceIsSet(true);
            }
            if (incoming.get(1))
            {
                struct.path = iprot.readString();
                struct.setPathIsSet(true);
            }
            if (incoming.get(2))
            {
                struct.type = iprot.readString();
                struct.setTypeIsSet(true);
            }
            if (incoming.get(3))
            {
                struct.totalSize = iprot.readI64();
                struct.setTotalSizeIsSet(true);
            }
            if (incoming.get(4))
            {
                struct.usableSize = iprot.readI64();
                struct.setUsableSizeIsSet(true);
            }
        }
    }

}
