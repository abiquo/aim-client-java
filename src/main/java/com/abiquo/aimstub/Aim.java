/**
 * Copyright (C) 2008 - Abiquo Holdings S.L. All rights reserved.
 *
 * Please see /opt/abiquo/tomcat/webapps/legal/ on Abiquo server
 * or contact contact@abiquo.com for licensing information.
 */
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.abiquo.aimstub;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-2-8")
public class Aim
{

    public interface Iface
    {

        /**
         * Rimp procedures
         */
        public void checkRimpConfiguration() throws RimpException, org.apache.thrift.TException;

        public long getDiskFileSize(String virtualImageDatastorePath)
            throws RimpException, org.apache.thrift.TException;

        public List<Datastore> getDatastores() throws RimpException, org.apache.thrift.TException;

        public List<NetInterface> getNetInterfaces()
            throws RimpException, org.apache.thrift.TException;

        public void copyFromRepositoryToDatastore(String virtualImageRepositoryPath,
            String datastorePath, String virtualMachineUUID)
            throws RimpException, org.apache.thrift.TException;

        public void deleteVirtualImageFromDatastore(String datastorePath, String virtualMachineUUID)
            throws RimpException, org.apache.thrift.TException;

        public void copyFromDatastoreToRepository(String virtualMachineUUID, String snapshot,
            String destinationRepositoryPath, String sourceDatastorePath)
            throws RimpException, org.apache.thrift.TException;

        public void instanceDisk(String source, String destination)
            throws RimpException, org.apache.thrift.TException;

        public void renameDisk(String oldPath, String newPath)
            throws RimpException, org.apache.thrift.TException;

        /**
         * VLan procedures
         * 
         * @param vlanTag
         * @param vlanInterface
         * @param bridgeInterface
         */
        public void createVLAN(int vlanTag, String vlanInterface, String bridgeInterface)
            throws VLanException, org.apache.thrift.TException;

        public void deleteVLAN(int vlanTag, String vlanInterface, String bridgeInterface)
            throws VLanException, org.apache.thrift.TException;

        public void checkVLANConfiguration() throws VLanException, org.apache.thrift.TException;

        /**
         * Storage configuration procedures
         */
        public String getInitiatorIQN() throws StorageException, org.apache.thrift.TException;

        public void rescanISCSI(List<String> targets)
            throws StorageException, org.apache.thrift.TException;

        /**
         * Libvirt procedures
         */
        public NodeInfo getNodeInfo() throws LibvirtException, org.apache.thrift.TException;

        public void defineDomain(String xmlDesc)
            throws LibvirtException, org.apache.thrift.TException;

        public void undefineDomain(String domainName)
            throws LibvirtException, org.apache.thrift.TException;

        public boolean existDomain(String domainName) throws org.apache.thrift.TException;

        public DomainState getDomainState(String domainName)
            throws LibvirtException, org.apache.thrift.TException;

        public DomainInfo getDomainInfo(String domainName)
            throws LibvirtException, org.apache.thrift.TException;

        public List<DomainInfo> getDomains() throws LibvirtException, org.apache.thrift.TException;

        public void powerOn(String domainName)
            throws LibvirtException, org.apache.thrift.TException;

        public void powerOff(String domainName)
            throws LibvirtException, org.apache.thrift.TException;

        public void shutdown(String domainName)
            throws LibvirtException, org.apache.thrift.TException;

        public void reset(String domainName) throws LibvirtException, org.apache.thrift.TException;

        public void pause(String domainName) throws LibvirtException, org.apache.thrift.TException;

        public void resume(String domainName) throws LibvirtException, org.apache.thrift.TException;

        public void createISCSIStoragePool(String name, String host, String iqn, String targetPath)
            throws LibvirtException, org.apache.thrift.TException;

        public void createNFSStoragePool(String name, String host, String dir, String targetPath)
            throws LibvirtException, org.apache.thrift.TException;

        public void createDirStoragePool(String name, String targetPath)
            throws LibvirtException, org.apache.thrift.TException;

        public void createDisk(String poolName, String name, double capacityInKb,
            double allocationInKb, String format)
            throws LibvirtException, org.apache.thrift.TException;

        public void deleteDisk(String poolName, String name)
            throws LibvirtException, org.apache.thrift.TException;

        public void resizeVol(String poolName, String name, double capacityInKb)
            throws LibvirtException, org.apache.thrift.TException;

        public void resizeDisk(String domainName, String diskPath, double diskSizeInKb)
            throws LibvirtException, org.apache.thrift.TException;

        public DomainBlockInfo getDomainBlockInfo(String domainName, String diskPath)
            throws LibvirtException, org.apache.thrift.TException;

        public List<Measure> getDatapoints(String domainName, int timestamp)
            throws org.apache.thrift.TException;

        public void upload(BinaryFile file, String path) throws org.apache.thrift.TException;

    }

    public interface AsyncIface
    {

        public void checkRimpConfiguration(
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

        public void getDiskFileSize(String virtualImageDatastorePath,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

        public void getDatastores(org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

        public void getNetInterfaces(org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

        public void copyFromRepositoryToDatastore(String virtualImageRepositoryPath,
            String datastorePath, String virtualMachineUUID,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

        public void deleteVirtualImageFromDatastore(String datastorePath, String virtualMachineUUID,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

        public void copyFromDatastoreToRepository(String virtualMachineUUID, String snapshot,
            String destinationRepositoryPath, String sourceDatastorePath,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

        public void instanceDisk(String source, String destination,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

        public void renameDisk(String oldPath, String newPath,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

        public void createVLAN(int vlanTag, String vlanInterface, String bridgeInterface,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

        public void deleteVLAN(int vlanTag, String vlanInterface, String bridgeInterface,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

        public void checkVLANConfiguration(
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

        public void getInitiatorIQN(org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

        public void rescanISCSI(List<String> targets,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

        public void getNodeInfo(org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

        public void defineDomain(String xmlDesc,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

        public void undefineDomain(String domainName,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

        public void existDomain(String domainName,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

        public void getDomainState(String domainName,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

        public void getDomainInfo(String domainName,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

        public void getDomains(org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

        public void powerOn(String domainName,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

        public void powerOff(String domainName,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

        public void shutdown(String domainName,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

        public void reset(String domainName,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

        public void pause(String domainName,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

        public void resume(String domainName,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

        public void createISCSIStoragePool(String name, String host, String iqn, String targetPath,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

        public void createNFSStoragePool(String name, String host, String dir, String targetPath,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

        public void createDirStoragePool(String name, String targetPath,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

        public void createDisk(String poolName, String name, double capacityInKb,
            double allocationInKb, String format,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

        public void deleteDisk(String poolName, String name,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

        public void resizeVol(String poolName, String name, double capacityInKb,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

        public void resizeDisk(String domainName, String diskPath, double diskSizeInKb,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

        public void getDomainBlockInfo(String domainName, String diskPath,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

        public void getDatapoints(String domainName, int timestamp,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

        public void upload(BinaryFile file, String path,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface
    {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client>
        {
            public Factory()
            {
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol prot)
            {
                return new Client(prot);
            }

            public Client getClient(org.apache.thrift.protocol.TProtocol iprot,
                org.apache.thrift.protocol.TProtocol oprot)
            {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot)
        {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot,
            org.apache.thrift.protocol.TProtocol oprot)
        {
            super(iprot, oprot);
        }

        public void checkRimpConfiguration() throws RimpException, org.apache.thrift.TException
        {
            send_checkRimpConfiguration();
            recv_checkRimpConfiguration();
        }

        public void send_checkRimpConfiguration() throws org.apache.thrift.TException
        {
            checkRimpConfiguration_args args = new checkRimpConfiguration_args();
            sendBase("checkRimpConfiguration", args);
        }

        public void recv_checkRimpConfiguration() throws RimpException, org.apache.thrift.TException
        {
            checkRimpConfiguration_result result = new checkRimpConfiguration_result();
            receiveBase(result, "checkRimpConfiguration");
            if (result.re != null)
            {
                throw result.re;
            }
            return;
        }

        public long getDiskFileSize(String virtualImageDatastorePath)
            throws RimpException, org.apache.thrift.TException
        {
            send_getDiskFileSize(virtualImageDatastorePath);
            return recv_getDiskFileSize();
        }

        public void send_getDiskFileSize(String virtualImageDatastorePath)
            throws org.apache.thrift.TException
        {
            getDiskFileSize_args args = new getDiskFileSize_args();
            args.setVirtualImageDatastorePath(virtualImageDatastorePath);
            sendBase("getDiskFileSize", args);
        }

        public long recv_getDiskFileSize() throws RimpException, org.apache.thrift.TException
        {
            getDiskFileSize_result result = new getDiskFileSize_result();
            receiveBase(result, "getDiskFileSize");
            if (result.isSetSuccess())
            {
                return result.success;
            }
            if (result.re != null)
            {
                throw result.re;
            }
            throw new org.apache.thrift.TApplicationException(
                org.apache.thrift.TApplicationException.MISSING_RESULT,
                "getDiskFileSize failed: unknown result");
        }

        public List<Datastore> getDatastores() throws RimpException, org.apache.thrift.TException
        {
            send_getDatastores();
            return recv_getDatastores();
        }

        public void send_getDatastores() throws org.apache.thrift.TException
        {
            getDatastores_args args = new getDatastores_args();
            sendBase("getDatastores", args);
        }

        public List<Datastore> recv_getDatastores()
            throws RimpException, org.apache.thrift.TException
        {
            getDatastores_result result = new getDatastores_result();
            receiveBase(result, "getDatastores");
            if (result.isSetSuccess())
            {
                return result.success;
            }
            if (result.re != null)
            {
                throw result.re;
            }
            throw new org.apache.thrift.TApplicationException(
                org.apache.thrift.TApplicationException.MISSING_RESULT,
                "getDatastores failed: unknown result");
        }

        public List<NetInterface> getNetInterfaces()
            throws RimpException, org.apache.thrift.TException
        {
            send_getNetInterfaces();
            return recv_getNetInterfaces();
        }

        public void send_getNetInterfaces() throws org.apache.thrift.TException
        {
            getNetInterfaces_args args = new getNetInterfaces_args();
            sendBase("getNetInterfaces", args);
        }

        public List<NetInterface> recv_getNetInterfaces()
            throws RimpException, org.apache.thrift.TException
        {
            getNetInterfaces_result result = new getNetInterfaces_result();
            receiveBase(result, "getNetInterfaces");
            if (result.isSetSuccess())
            {
                return result.success;
            }
            if (result.re != null)
            {
                throw result.re;
            }
            throw new org.apache.thrift.TApplicationException(
                org.apache.thrift.TApplicationException.MISSING_RESULT,
                "getNetInterfaces failed: unknown result");
        }

        public void copyFromRepositoryToDatastore(String virtualImageRepositoryPath,
            String datastorePath, String virtualMachineUUID)
            throws RimpException, org.apache.thrift.TException
        {
            send_copyFromRepositoryToDatastore(virtualImageRepositoryPath, datastorePath,
                virtualMachineUUID);
            recv_copyFromRepositoryToDatastore();
        }

        public void send_copyFromRepositoryToDatastore(String virtualImageRepositoryPath,
            String datastorePath, String virtualMachineUUID) throws org.apache.thrift.TException
        {
            copyFromRepositoryToDatastore_args args = new copyFromRepositoryToDatastore_args();
            args.setVirtualImageRepositoryPath(virtualImageRepositoryPath);
            args.setDatastorePath(datastorePath);
            args.setVirtualMachineUUID(virtualMachineUUID);
            sendBase("copyFromRepositoryToDatastore", args);
        }

        public void recv_copyFromRepositoryToDatastore()
            throws RimpException, org.apache.thrift.TException
        {
            copyFromRepositoryToDatastore_result result =
                new copyFromRepositoryToDatastore_result();
            receiveBase(result, "copyFromRepositoryToDatastore");
            if (result.re != null)
            {
                throw result.re;
            }
            return;
        }

        public void deleteVirtualImageFromDatastore(String datastorePath, String virtualMachineUUID)
            throws RimpException, org.apache.thrift.TException
        {
            send_deleteVirtualImageFromDatastore(datastorePath, virtualMachineUUID);
            recv_deleteVirtualImageFromDatastore();
        }

        public void send_deleteVirtualImageFromDatastore(String datastorePath,
            String virtualMachineUUID) throws org.apache.thrift.TException
        {
            deleteVirtualImageFromDatastore_args args = new deleteVirtualImageFromDatastore_args();
            args.setDatastorePath(datastorePath);
            args.setVirtualMachineUUID(virtualMachineUUID);
            sendBase("deleteVirtualImageFromDatastore", args);
        }

        public void recv_deleteVirtualImageFromDatastore()
            throws RimpException, org.apache.thrift.TException
        {
            deleteVirtualImageFromDatastore_result result =
                new deleteVirtualImageFromDatastore_result();
            receiveBase(result, "deleteVirtualImageFromDatastore");
            if (result.re != null)
            {
                throw result.re;
            }
            return;
        }

        public void copyFromDatastoreToRepository(String virtualMachineUUID, String snapshot,
            String destinationRepositoryPath, String sourceDatastorePath)
            throws RimpException, org.apache.thrift.TException
        {
            send_copyFromDatastoreToRepository(virtualMachineUUID, snapshot,
                destinationRepositoryPath, sourceDatastorePath);
            recv_copyFromDatastoreToRepository();
        }

        public void send_copyFromDatastoreToRepository(String virtualMachineUUID, String snapshot,
            String destinationRepositoryPath, String sourceDatastorePath)
            throws org.apache.thrift.TException
        {
            copyFromDatastoreToRepository_args args = new copyFromDatastoreToRepository_args();
            args.setVirtualMachineUUID(virtualMachineUUID);
            args.setSnapshot(snapshot);
            args.setDestinationRepositoryPath(destinationRepositoryPath);
            args.setSourceDatastorePath(sourceDatastorePath);
            sendBase("copyFromDatastoreToRepository", args);
        }

        public void recv_copyFromDatastoreToRepository()
            throws RimpException, org.apache.thrift.TException
        {
            copyFromDatastoreToRepository_result result =
                new copyFromDatastoreToRepository_result();
            receiveBase(result, "copyFromDatastoreToRepository");
            if (result.re != null)
            {
                throw result.re;
            }
            return;
        }

        public void instanceDisk(String source, String destination)
            throws RimpException, org.apache.thrift.TException
        {
            send_instanceDisk(source, destination);
            recv_instanceDisk();
        }

        public void send_instanceDisk(String source, String destination)
            throws org.apache.thrift.TException
        {
            instanceDisk_args args = new instanceDisk_args();
            args.setSource(source);
            args.setDestination(destination);
            sendBase("instanceDisk", args);
        }

        public void recv_instanceDisk() throws RimpException, org.apache.thrift.TException
        {
            instanceDisk_result result = new instanceDisk_result();
            receiveBase(result, "instanceDisk");
            if (result.re != null)
            {
                throw result.re;
            }
            return;
        }

        public void renameDisk(String oldPath, String newPath)
            throws RimpException, org.apache.thrift.TException
        {
            send_renameDisk(oldPath, newPath);
            recv_renameDisk();
        }

        public void send_renameDisk(String oldPath, String newPath)
            throws org.apache.thrift.TException
        {
            renameDisk_args args = new renameDisk_args();
            args.setOldPath(oldPath);
            args.setNewPath(newPath);
            sendBase("renameDisk", args);
        }

        public void recv_renameDisk() throws RimpException, org.apache.thrift.TException
        {
            renameDisk_result result = new renameDisk_result();
            receiveBase(result, "renameDisk");
            if (result.re != null)
            {
                throw result.re;
            }
            return;
        }

        public void createVLAN(int vlanTag, String vlanInterface, String bridgeInterface)
            throws VLanException, org.apache.thrift.TException
        {
            send_createVLAN(vlanTag, vlanInterface, bridgeInterface);
            recv_createVLAN();
        }

        public void send_createVLAN(int vlanTag, String vlanInterface, String bridgeInterface)
            throws org.apache.thrift.TException
        {
            createVLAN_args args = new createVLAN_args();
            args.setVlanTag(vlanTag);
            args.setVlanInterface(vlanInterface);
            args.setBridgeInterface(bridgeInterface);
            sendBase("createVLAN", args);
        }

        public void recv_createVLAN() throws VLanException, org.apache.thrift.TException
        {
            createVLAN_result result = new createVLAN_result();
            receiveBase(result, "createVLAN");
            if (result.ve != null)
            {
                throw result.ve;
            }
            return;
        }

        public void deleteVLAN(int vlanTag, String vlanInterface, String bridgeInterface)
            throws VLanException, org.apache.thrift.TException
        {
            send_deleteVLAN(vlanTag, vlanInterface, bridgeInterface);
            recv_deleteVLAN();
        }

        public void send_deleteVLAN(int vlanTag, String vlanInterface, String bridgeInterface)
            throws org.apache.thrift.TException
        {
            deleteVLAN_args args = new deleteVLAN_args();
            args.setVlanTag(vlanTag);
            args.setVlanInterface(vlanInterface);
            args.setBridgeInterface(bridgeInterface);
            sendBase("deleteVLAN", args);
        }

        public void recv_deleteVLAN() throws VLanException, org.apache.thrift.TException
        {
            deleteVLAN_result result = new deleteVLAN_result();
            receiveBase(result, "deleteVLAN");
            if (result.ve != null)
            {
                throw result.ve;
            }
            return;
        }

        public void checkVLANConfiguration() throws VLanException, org.apache.thrift.TException
        {
            send_checkVLANConfiguration();
            recv_checkVLANConfiguration();
        }

        public void send_checkVLANConfiguration() throws org.apache.thrift.TException
        {
            checkVLANConfiguration_args args = new checkVLANConfiguration_args();
            sendBase("checkVLANConfiguration", args);
        }

        public void recv_checkVLANConfiguration() throws VLanException, org.apache.thrift.TException
        {
            checkVLANConfiguration_result result = new checkVLANConfiguration_result();
            receiveBase(result, "checkVLANConfiguration");
            if (result.ve != null)
            {
                throw result.ve;
            }
            return;
        }

        public String getInitiatorIQN() throws StorageException, org.apache.thrift.TException
        {
            send_getInitiatorIQN();
            return recv_getInitiatorIQN();
        }

        public void send_getInitiatorIQN() throws org.apache.thrift.TException
        {
            getInitiatorIQN_args args = new getInitiatorIQN_args();
            sendBase("getInitiatorIQN", args);
        }

        public String recv_getInitiatorIQN() throws StorageException, org.apache.thrift.TException
        {
            getInitiatorIQN_result result = new getInitiatorIQN_result();
            receiveBase(result, "getInitiatorIQN");
            if (result.isSetSuccess())
            {
                return result.success;
            }
            if (result.se != null)
            {
                throw result.se;
            }
            throw new org.apache.thrift.TApplicationException(
                org.apache.thrift.TApplicationException.MISSING_RESULT,
                "getInitiatorIQN failed: unknown result");
        }

        public void rescanISCSI(List<String> targets)
            throws StorageException, org.apache.thrift.TException
        {
            send_rescanISCSI(targets);
            recv_rescanISCSI();
        }

        public void send_rescanISCSI(List<String> targets) throws org.apache.thrift.TException
        {
            rescanISCSI_args args = new rescanISCSI_args();
            args.setTargets(targets);
            sendBase("rescanISCSI", args);
        }

        public void recv_rescanISCSI() throws StorageException, org.apache.thrift.TException
        {
            rescanISCSI_result result = new rescanISCSI_result();
            receiveBase(result, "rescanISCSI");
            if (result.se != null)
            {
                throw result.se;
            }
            return;
        }

        public NodeInfo getNodeInfo() throws LibvirtException, org.apache.thrift.TException
        {
            send_getNodeInfo();
            return recv_getNodeInfo();
        }

        public void send_getNodeInfo() throws org.apache.thrift.TException
        {
            getNodeInfo_args args = new getNodeInfo_args();
            sendBase("getNodeInfo", args);
        }

        public NodeInfo recv_getNodeInfo() throws LibvirtException, org.apache.thrift.TException
        {
            getNodeInfo_result result = new getNodeInfo_result();
            receiveBase(result, "getNodeInfo");
            if (result.isSetSuccess())
            {
                return result.success;
            }
            if (result.libvirtException != null)
            {
                throw result.libvirtException;
            }
            throw new org.apache.thrift.TApplicationException(
                org.apache.thrift.TApplicationException.MISSING_RESULT,
                "getNodeInfo failed: unknown result");
        }

        public void defineDomain(String xmlDesc)
            throws LibvirtException, org.apache.thrift.TException
        {
            send_defineDomain(xmlDesc);
            recv_defineDomain();
        }

        public void send_defineDomain(String xmlDesc) throws org.apache.thrift.TException
        {
            defineDomain_args args = new defineDomain_args();
            args.setXmlDesc(xmlDesc);
            sendBase("defineDomain", args);
        }

        public void recv_defineDomain() throws LibvirtException, org.apache.thrift.TException
        {
            defineDomain_result result = new defineDomain_result();
            receiveBase(result, "defineDomain");
            if (result.libvirtException != null)
            {
                throw result.libvirtException;
            }
            return;
        }

        public void undefineDomain(String domainName)
            throws LibvirtException, org.apache.thrift.TException
        {
            send_undefineDomain(domainName);
            recv_undefineDomain();
        }

        public void send_undefineDomain(String domainName) throws org.apache.thrift.TException
        {
            undefineDomain_args args = new undefineDomain_args();
            args.setDomainName(domainName);
            sendBase("undefineDomain", args);
        }

        public void recv_undefineDomain() throws LibvirtException, org.apache.thrift.TException
        {
            undefineDomain_result result = new undefineDomain_result();
            receiveBase(result, "undefineDomain");
            if (result.libvirtException != null)
            {
                throw result.libvirtException;
            }
            return;
        }

        public boolean existDomain(String domainName) throws org.apache.thrift.TException
        {
            send_existDomain(domainName);
            return recv_existDomain();
        }

        public void send_existDomain(String domainName) throws org.apache.thrift.TException
        {
            existDomain_args args = new existDomain_args();
            args.setDomainName(domainName);
            sendBase("existDomain", args);
        }

        public boolean recv_existDomain() throws org.apache.thrift.TException
        {
            existDomain_result result = new existDomain_result();
            receiveBase(result, "existDomain");
            if (result.isSetSuccess())
            {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(
                org.apache.thrift.TApplicationException.MISSING_RESULT,
                "existDomain failed: unknown result");
        }

        public DomainState getDomainState(String domainName)
            throws LibvirtException, org.apache.thrift.TException
        {
            send_getDomainState(domainName);
            return recv_getDomainState();
        }

        public void send_getDomainState(String domainName) throws org.apache.thrift.TException
        {
            getDomainState_args args = new getDomainState_args();
            args.setDomainName(domainName);
            sendBase("getDomainState", args);
        }

        public DomainState recv_getDomainState()
            throws LibvirtException, org.apache.thrift.TException
        {
            getDomainState_result result = new getDomainState_result();
            receiveBase(result, "getDomainState");
            if (result.isSetSuccess())
            {
                return result.success;
            }
            if (result.libvirtException != null)
            {
                throw result.libvirtException;
            }
            throw new org.apache.thrift.TApplicationException(
                org.apache.thrift.TApplicationException.MISSING_RESULT,
                "getDomainState failed: unknown result");
        }

        public DomainInfo getDomainInfo(String domainName)
            throws LibvirtException, org.apache.thrift.TException
        {
            send_getDomainInfo(domainName);
            return recv_getDomainInfo();
        }

        public void send_getDomainInfo(String domainName) throws org.apache.thrift.TException
        {
            getDomainInfo_args args = new getDomainInfo_args();
            args.setDomainName(domainName);
            sendBase("getDomainInfo", args);
        }

        public DomainInfo recv_getDomainInfo() throws LibvirtException, org.apache.thrift.TException
        {
            getDomainInfo_result result = new getDomainInfo_result();
            receiveBase(result, "getDomainInfo");
            if (result.isSetSuccess())
            {
                return result.success;
            }
            if (result.libvirtException != null)
            {
                throw result.libvirtException;
            }
            throw new org.apache.thrift.TApplicationException(
                org.apache.thrift.TApplicationException.MISSING_RESULT,
                "getDomainInfo failed: unknown result");
        }

        public List<DomainInfo> getDomains() throws LibvirtException, org.apache.thrift.TException
        {
            send_getDomains();
            return recv_getDomains();
        }

        public void send_getDomains() throws org.apache.thrift.TException
        {
            getDomains_args args = new getDomains_args();
            sendBase("getDomains", args);
        }

        public List<DomainInfo> recv_getDomains()
            throws LibvirtException, org.apache.thrift.TException
        {
            getDomains_result result = new getDomains_result();
            receiveBase(result, "getDomains");
            if (result.isSetSuccess())
            {
                return result.success;
            }
            if (result.libvirtException != null)
            {
                throw result.libvirtException;
            }
            throw new org.apache.thrift.TApplicationException(
                org.apache.thrift.TApplicationException.MISSING_RESULT,
                "getDomains failed: unknown result");
        }

        public void powerOn(String domainName) throws LibvirtException, org.apache.thrift.TException
        {
            send_powerOn(domainName);
            recv_powerOn();
        }

        public void send_powerOn(String domainName) throws org.apache.thrift.TException
        {
            powerOn_args args = new powerOn_args();
            args.setDomainName(domainName);
            sendBase("powerOn", args);
        }

        public void recv_powerOn() throws LibvirtException, org.apache.thrift.TException
        {
            powerOn_result result = new powerOn_result();
            receiveBase(result, "powerOn");
            if (result.libvirtException != null)
            {
                throw result.libvirtException;
            }
            return;
        }

        public void powerOff(String domainName)
            throws LibvirtException, org.apache.thrift.TException
        {
            send_powerOff(domainName);
            recv_powerOff();
        }

        public void send_powerOff(String domainName) throws org.apache.thrift.TException
        {
            powerOff_args args = new powerOff_args();
            args.setDomainName(domainName);
            sendBase("powerOff", args);
        }

        public void recv_powerOff() throws LibvirtException, org.apache.thrift.TException
        {
            powerOff_result result = new powerOff_result();
            receiveBase(result, "powerOff");
            if (result.libvirtException != null)
            {
                throw result.libvirtException;
            }
            return;
        }

        public void shutdown(String domainName)
            throws LibvirtException, org.apache.thrift.TException
        {
            send_shutdown(domainName);
            recv_shutdown();
        }

        public void send_shutdown(String domainName) throws org.apache.thrift.TException
        {
            shutdown_args args = new shutdown_args();
            args.setDomainName(domainName);
            sendBase("shutdown", args);
        }

        public void recv_shutdown() throws LibvirtException, org.apache.thrift.TException
        {
            shutdown_result result = new shutdown_result();
            receiveBase(result, "shutdown");
            if (result.libvirtException != null)
            {
                throw result.libvirtException;
            }
            return;
        }

        public void reset(String domainName) throws LibvirtException, org.apache.thrift.TException
        {
            send_reset(domainName);
            recv_reset();
        }

        public void send_reset(String domainName) throws org.apache.thrift.TException
        {
            reset_args args = new reset_args();
            args.setDomainName(domainName);
            sendBase("reset", args);
        }

        public void recv_reset() throws LibvirtException, org.apache.thrift.TException
        {
            reset_result result = new reset_result();
            receiveBase(result, "reset");
            if (result.libvirtException != null)
            {
                throw result.libvirtException;
            }
            return;
        }

        public void pause(String domainName) throws LibvirtException, org.apache.thrift.TException
        {
            send_pause(domainName);
            recv_pause();
        }

        public void send_pause(String domainName) throws org.apache.thrift.TException
        {
            pause_args args = new pause_args();
            args.setDomainName(domainName);
            sendBase("pause", args);
        }

        public void recv_pause() throws LibvirtException, org.apache.thrift.TException
        {
            pause_result result = new pause_result();
            receiveBase(result, "pause");
            if (result.libvirtException != null)
            {
                throw result.libvirtException;
            }
            return;
        }

        public void resume(String domainName) throws LibvirtException, org.apache.thrift.TException
        {
            send_resume(domainName);
            recv_resume();
        }

        public void send_resume(String domainName) throws org.apache.thrift.TException
        {
            resume_args args = new resume_args();
            args.setDomainName(domainName);
            sendBase("resume", args);
        }

        public void recv_resume() throws LibvirtException, org.apache.thrift.TException
        {
            resume_result result = new resume_result();
            receiveBase(result, "resume");
            if (result.libvirtException != null)
            {
                throw result.libvirtException;
            }
            return;
        }

        public void createISCSIStoragePool(String name, String host, String iqn, String targetPath)
            throws LibvirtException, org.apache.thrift.TException
        {
            send_createISCSIStoragePool(name, host, iqn, targetPath);
            recv_createISCSIStoragePool();
        }

        public void send_createISCSIStoragePool(String name, String host, String iqn,
            String targetPath) throws org.apache.thrift.TException
        {
            createISCSIStoragePool_args args = new createISCSIStoragePool_args();
            args.setName(name);
            args.setHost(host);
            args.setIqn(iqn);
            args.setTargetPath(targetPath);
            sendBase("createISCSIStoragePool", args);
        }

        public void recv_createISCSIStoragePool()
            throws LibvirtException, org.apache.thrift.TException
        {
            createISCSIStoragePool_result result = new createISCSIStoragePool_result();
            receiveBase(result, "createISCSIStoragePool");
            if (result.libvirtException != null)
            {
                throw result.libvirtException;
            }
            return;
        }

        public void createNFSStoragePool(String name, String host, String dir, String targetPath)
            throws LibvirtException, org.apache.thrift.TException
        {
            send_createNFSStoragePool(name, host, dir, targetPath);
            recv_createNFSStoragePool();
        }

        public void send_createNFSStoragePool(String name, String host, String dir,
            String targetPath) throws org.apache.thrift.TException
        {
            createNFSStoragePool_args args = new createNFSStoragePool_args();
            args.setName(name);
            args.setHost(host);
            args.setDir(dir);
            args.setTargetPath(targetPath);
            sendBase("createNFSStoragePool", args);
        }

        public void recv_createNFSStoragePool()
            throws LibvirtException, org.apache.thrift.TException
        {
            createNFSStoragePool_result result = new createNFSStoragePool_result();
            receiveBase(result, "createNFSStoragePool");
            if (result.libvirtException != null)
            {
                throw result.libvirtException;
            }
            return;
        }

        public void createDirStoragePool(String name, String targetPath)
            throws LibvirtException, org.apache.thrift.TException
        {
            send_createDirStoragePool(name, targetPath);
            recv_createDirStoragePool();
        }

        public void send_createDirStoragePool(String name, String targetPath)
            throws org.apache.thrift.TException
        {
            createDirStoragePool_args args = new createDirStoragePool_args();
            args.setName(name);
            args.setTargetPath(targetPath);
            sendBase("createDirStoragePool", args);
        }

        public void recv_createDirStoragePool()
            throws LibvirtException, org.apache.thrift.TException
        {
            createDirStoragePool_result result = new createDirStoragePool_result();
            receiveBase(result, "createDirStoragePool");
            if (result.libvirtException != null)
            {
                throw result.libvirtException;
            }
            return;
        }

        public void createDisk(String poolName, String name, double capacityInKb,
            double allocationInKb, String format)
            throws LibvirtException, org.apache.thrift.TException
        {
            send_createDisk(poolName, name, capacityInKb, allocationInKb, format);
            recv_createDisk();
        }

        public void send_createDisk(String poolName, String name, double capacityInKb,
            double allocationInKb, String format) throws org.apache.thrift.TException
        {
            createDisk_args args = new createDisk_args();
            args.setPoolName(poolName);
            args.setName(name);
            args.setCapacityInKb(capacityInKb);
            args.setAllocationInKb(allocationInKb);
            args.setFormat(format);
            sendBase("createDisk", args);
        }

        public void recv_createDisk() throws LibvirtException, org.apache.thrift.TException
        {
            createDisk_result result = new createDisk_result();
            receiveBase(result, "createDisk");
            if (result.libvirtException != null)
            {
                throw result.libvirtException;
            }
            return;
        }

        public void deleteDisk(String poolName, String name)
            throws LibvirtException, org.apache.thrift.TException
        {
            send_deleteDisk(poolName, name);
            recv_deleteDisk();
        }

        public void send_deleteDisk(String poolName, String name)
            throws org.apache.thrift.TException
        {
            deleteDisk_args args = new deleteDisk_args();
            args.setPoolName(poolName);
            args.setName(name);
            sendBase("deleteDisk", args);
        }

        public void recv_deleteDisk() throws LibvirtException, org.apache.thrift.TException
        {
            deleteDisk_result result = new deleteDisk_result();
            receiveBase(result, "deleteDisk");
            if (result.libvirtException != null)
            {
                throw result.libvirtException;
            }
            return;
        }

        public void resizeVol(String poolName, String name, double capacityInKb)
            throws LibvirtException, org.apache.thrift.TException
        {
            send_resizeVol(poolName, name, capacityInKb);
            recv_resizeVol();
        }

        public void send_resizeVol(String poolName, String name, double capacityInKb)
            throws org.apache.thrift.TException
        {
            resizeVol_args args = new resizeVol_args();
            args.setPoolName(poolName);
            args.setName(name);
            args.setCapacityInKb(capacityInKb);
            sendBase("resizeVol", args);
        }

        public void recv_resizeVol() throws LibvirtException, org.apache.thrift.TException
        {
            resizeVol_result result = new resizeVol_result();
            receiveBase(result, "resizeVol");
            if (result.libvirtException != null)
            {
                throw result.libvirtException;
            }
            return;
        }

        public void resizeDisk(String domainName, String diskPath, double diskSizeInKb)
            throws LibvirtException, org.apache.thrift.TException
        {
            send_resizeDisk(domainName, diskPath, diskSizeInKb);
            recv_resizeDisk();
        }

        public void send_resizeDisk(String domainName, String diskPath, double diskSizeInKb)
            throws org.apache.thrift.TException
        {
            resizeDisk_args args = new resizeDisk_args();
            args.setDomainName(domainName);
            args.setDiskPath(diskPath);
            args.setDiskSizeInKb(diskSizeInKb);
            sendBase("resizeDisk", args);
        }

        public void recv_resizeDisk() throws LibvirtException, org.apache.thrift.TException
        {
            resizeDisk_result result = new resizeDisk_result();
            receiveBase(result, "resizeDisk");
            if (result.libvirtException != null)
            {
                throw result.libvirtException;
            }
            return;
        }

        public DomainBlockInfo getDomainBlockInfo(String domainName, String diskPath)
            throws LibvirtException, org.apache.thrift.TException
        {
            send_getDomainBlockInfo(domainName, diskPath);
            return recv_getDomainBlockInfo();
        }

        public void send_getDomainBlockInfo(String domainName, String diskPath)
            throws org.apache.thrift.TException
        {
            getDomainBlockInfo_args args = new getDomainBlockInfo_args();
            args.setDomainName(domainName);
            args.setDiskPath(diskPath);
            sendBase("getDomainBlockInfo", args);
        }

        public DomainBlockInfo recv_getDomainBlockInfo()
            throws LibvirtException, org.apache.thrift.TException
        {
            getDomainBlockInfo_result result = new getDomainBlockInfo_result();
            receiveBase(result, "getDomainBlockInfo");
            if (result.isSetSuccess())
            {
                return result.success;
            }
            if (result.libvirtException != null)
            {
                throw result.libvirtException;
            }
            throw new org.apache.thrift.TApplicationException(
                org.apache.thrift.TApplicationException.MISSING_RESULT,
                "getDomainBlockInfo failed: unknown result");
        }

        public List<Measure> getDatapoints(String domainName, int timestamp)
            throws org.apache.thrift.TException
        {
            send_getDatapoints(domainName, timestamp);
            return recv_getDatapoints();
        }

        public void send_getDatapoints(String domainName, int timestamp)
            throws org.apache.thrift.TException
        {
            getDatapoints_args args = new getDatapoints_args();
            args.setDomainName(domainName);
            args.setTimestamp(timestamp);
            sendBase("getDatapoints", args);
        }

        public List<Measure> recv_getDatapoints() throws org.apache.thrift.TException
        {
            getDatapoints_result result = new getDatapoints_result();
            receiveBase(result, "getDatapoints");
            if (result.isSetSuccess())
            {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(
                org.apache.thrift.TApplicationException.MISSING_RESULT,
                "getDatapoints failed: unknown result");
        }

        public void upload(BinaryFile file, String path) throws org.apache.thrift.TException
        {
            send_upload(file, path);
            recv_upload();
        }

        public void send_upload(BinaryFile file, String path) throws org.apache.thrift.TException
        {
            upload_args args = new upload_args();
            args.setFile(file);
            args.setPath(path);
            sendBase("upload", args);
        }

        public void recv_upload() throws org.apache.thrift.TException
        {
            upload_result result = new upload_result();
            receiveBase(result, "upload");
            return;
        }

    }

    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient
        implements AsyncIface
    {
        public static class Factory
            implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient>
        {
            private org.apache.thrift.async.TAsyncClientManager clientManager;

            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory)
            {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }

            public AsyncClient getAsyncClient(
                org.apache.thrift.transport.TNonblockingTransport transport)
            {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory,
            org.apache.thrift.async.TAsyncClientManager clientManager,
            org.apache.thrift.transport.TNonblockingTransport transport)
        {
            super(protocolFactory, clientManager, transport);
        }

        public void checkRimpConfiguration(
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException
        {
            checkReady();
            checkRimpConfiguration_call method_call = new checkRimpConfiguration_call(resultHandler,
                this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class checkRimpConfiguration_call
            extends org.apache.thrift.async.TAsyncMethodCall
        {
            public checkRimpConfiguration_call(
                org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException
            {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                throws org.apache.thrift.TException
            {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
                    "checkRimpConfiguration", org.apache.thrift.protocol.TMessageType.CALL, 0));
                checkRimpConfiguration_args args = new checkRimpConfiguration_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws RimpException, org.apache.thrift.TException
            {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
                {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot =
                    client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_checkRimpConfiguration();
            }
        }

        public void getDiskFileSize(String virtualImageDatastorePath,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException
        {
            checkReady();
            getDiskFileSize_call method_call = new getDiskFileSize_call(virtualImageDatastorePath,
                resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getDiskFileSize_call extends org.apache.thrift.async.TAsyncMethodCall
        {
            private String virtualImageDatastorePath;

            public getDiskFileSize_call(String virtualImageDatastorePath,
                org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException
            {
                super(client, protocolFactory, transport, resultHandler, false);
                this.virtualImageDatastorePath = virtualImageDatastorePath;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                throws org.apache.thrift.TException
            {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDiskFileSize",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                getDiskFileSize_args args = new getDiskFileSize_args();
                args.setVirtualImageDatastorePath(virtualImageDatastorePath);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public long getResult() throws RimpException, org.apache.thrift.TException
            {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
                {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot =
                    client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getDiskFileSize();
            }
        }

        public void getDatastores(org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException
        {
            checkReady();
            getDatastores_call method_call =
                new getDatastores_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getDatastores_call extends org.apache.thrift.async.TAsyncMethodCall
        {
            public getDatastores_call(org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException
            {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                throws org.apache.thrift.TException
            {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDatastores",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                getDatastores_args args = new getDatastores_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public List<Datastore> getResult() throws RimpException, org.apache.thrift.TException
            {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
                {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot =
                    client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getDatastores();
            }
        }

        public void getNetInterfaces(org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException
        {
            checkReady();
            getNetInterfaces_call method_call =
                new getNetInterfaces_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getNetInterfaces_call extends org.apache.thrift.async.TAsyncMethodCall
        {
            public getNetInterfaces_call(org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException
            {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                throws org.apache.thrift.TException
            {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNetInterfaces",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                getNetInterfaces_args args = new getNetInterfaces_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public List<NetInterface> getResult() throws RimpException, org.apache.thrift.TException
            {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
                {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot =
                    client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getNetInterfaces();
            }
        }

        public void copyFromRepositoryToDatastore(String virtualImageRepositoryPath,
            String datastorePath, String virtualMachineUUID,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException
        {
            checkReady();
            copyFromRepositoryToDatastore_call method_call =
                new copyFromRepositoryToDatastore_call(virtualImageRepositoryPath, datastorePath,
                    virtualMachineUUID, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class copyFromRepositoryToDatastore_call
            extends org.apache.thrift.async.TAsyncMethodCall
        {
            private String virtualImageRepositoryPath;

            private String datastorePath;

            private String virtualMachineUUID;

            public copyFromRepositoryToDatastore_call(String virtualImageRepositoryPath,
                String datastorePath, String virtualMachineUUID,
                org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException
            {
                super(client, protocolFactory, transport, resultHandler, false);
                this.virtualImageRepositoryPath = virtualImageRepositoryPath;
                this.datastorePath = datastorePath;
                this.virtualMachineUUID = virtualMachineUUID;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                throws org.apache.thrift.TException
            {
                prot.writeMessageBegin(
                    new org.apache.thrift.protocol.TMessage("copyFromRepositoryToDatastore",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                copyFromRepositoryToDatastore_args args = new copyFromRepositoryToDatastore_args();
                args.setVirtualImageRepositoryPath(virtualImageRepositoryPath);
                args.setDatastorePath(datastorePath);
                args.setVirtualMachineUUID(virtualMachineUUID);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws RimpException, org.apache.thrift.TException
            {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
                {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot =
                    client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_copyFromRepositoryToDatastore();
            }
        }

        public void deleteVirtualImageFromDatastore(String datastorePath, String virtualMachineUUID,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException
        {
            checkReady();
            deleteVirtualImageFromDatastore_call method_call =
                new deleteVirtualImageFromDatastore_call(datastorePath, virtualMachineUUID,
                    resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class deleteVirtualImageFromDatastore_call
            extends org.apache.thrift.async.TAsyncMethodCall
        {
            private String datastorePath;

            private String virtualMachineUUID;

            public deleteVirtualImageFromDatastore_call(String datastorePath,
                String virtualMachineUUID,
                org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException
            {
                super(client, protocolFactory, transport, resultHandler, false);
                this.datastorePath = datastorePath;
                this.virtualMachineUUID = virtualMachineUUID;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                throws org.apache.thrift.TException
            {
                prot.writeMessageBegin(
                    new org.apache.thrift.protocol.TMessage("deleteVirtualImageFromDatastore",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                deleteVirtualImageFromDatastore_args args =
                    new deleteVirtualImageFromDatastore_args();
                args.setDatastorePath(datastorePath);
                args.setVirtualMachineUUID(virtualMachineUUID);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws RimpException, org.apache.thrift.TException
            {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
                {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot =
                    client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_deleteVirtualImageFromDatastore();
            }
        }

        public void copyFromDatastoreToRepository(String virtualMachineUUID, String snapshot,
            String destinationRepositoryPath, String sourceDatastorePath,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException
        {
            checkReady();
            copyFromDatastoreToRepository_call method_call = new copyFromDatastoreToRepository_call(
                virtualMachineUUID, snapshot, destinationRepositoryPath, sourceDatastorePath,
                resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class copyFromDatastoreToRepository_call
            extends org.apache.thrift.async.TAsyncMethodCall
        {
            private String virtualMachineUUID;

            private String snapshot;

            private String destinationRepositoryPath;

            private String sourceDatastorePath;

            public copyFromDatastoreToRepository_call(String virtualMachineUUID, String snapshot,
                String destinationRepositoryPath, String sourceDatastorePath,
                org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException
            {
                super(client, protocolFactory, transport, resultHandler, false);
                this.virtualMachineUUID = virtualMachineUUID;
                this.snapshot = snapshot;
                this.destinationRepositoryPath = destinationRepositoryPath;
                this.sourceDatastorePath = sourceDatastorePath;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                throws org.apache.thrift.TException
            {
                prot.writeMessageBegin(
                    new org.apache.thrift.protocol.TMessage("copyFromDatastoreToRepository",
                        org.apache.thrift.protocol.TMessageType.CALL, 0));
                copyFromDatastoreToRepository_args args = new copyFromDatastoreToRepository_args();
                args.setVirtualMachineUUID(virtualMachineUUID);
                args.setSnapshot(snapshot);
                args.setDestinationRepositoryPath(destinationRepositoryPath);
                args.setSourceDatastorePath(sourceDatastorePath);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws RimpException, org.apache.thrift.TException
            {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
                {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot =
                    client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_copyFromDatastoreToRepository();
            }
        }

        public void instanceDisk(String source, String destination,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException
        {
            checkReady();
            instanceDisk_call method_call = new instanceDisk_call(source, destination,
                resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class instanceDisk_call extends org.apache.thrift.async.TAsyncMethodCall
        {
            private String source;

            private String destination;

            public instanceDisk_call(String source, String destination,
                org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException
            {
                super(client, protocolFactory, transport, resultHandler, false);
                this.source = source;
                this.destination = destination;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                throws org.apache.thrift.TException
            {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("instanceDisk",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                instanceDisk_args args = new instanceDisk_args();
                args.setSource(source);
                args.setDestination(destination);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws RimpException, org.apache.thrift.TException
            {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
                {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot =
                    client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_instanceDisk();
            }
        }

        public void renameDisk(String oldPath, String newPath,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException
        {
            checkReady();
            renameDisk_call method_call = new renameDisk_call(oldPath, newPath, resultHandler, this,
                ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class renameDisk_call extends org.apache.thrift.async.TAsyncMethodCall
        {
            private String oldPath;

            private String newPath;

            public renameDisk_call(String oldPath, String newPath,
                org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException
            {
                super(client, protocolFactory, transport, resultHandler, false);
                this.oldPath = oldPath;
                this.newPath = newPath;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                throws org.apache.thrift.TException
            {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("renameDisk",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                renameDisk_args args = new renameDisk_args();
                args.setOldPath(oldPath);
                args.setNewPath(newPath);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws RimpException, org.apache.thrift.TException
            {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
                {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot =
                    client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_renameDisk();
            }
        }

        public void createVLAN(int vlanTag, String vlanInterface, String bridgeInterface,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException
        {
            checkReady();
            createVLAN_call method_call = new createVLAN_call(vlanTag, vlanInterface,
                bridgeInterface, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class createVLAN_call extends org.apache.thrift.async.TAsyncMethodCall
        {
            private int vlanTag;

            private String vlanInterface;

            private String bridgeInterface;

            public createVLAN_call(int vlanTag, String vlanInterface, String bridgeInterface,
                org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException
            {
                super(client, protocolFactory, transport, resultHandler, false);
                this.vlanTag = vlanTag;
                this.vlanInterface = vlanInterface;
                this.bridgeInterface = bridgeInterface;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                throws org.apache.thrift.TException
            {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createVLAN",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                createVLAN_args args = new createVLAN_args();
                args.setVlanTag(vlanTag);
                args.setVlanInterface(vlanInterface);
                args.setBridgeInterface(bridgeInterface);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws VLanException, org.apache.thrift.TException
            {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
                {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot =
                    client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_createVLAN();
            }
        }

        public void deleteVLAN(int vlanTag, String vlanInterface, String bridgeInterface,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException
        {
            checkReady();
            deleteVLAN_call method_call = new deleteVLAN_call(vlanTag, vlanInterface,
                bridgeInterface, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class deleteVLAN_call extends org.apache.thrift.async.TAsyncMethodCall
        {
            private int vlanTag;

            private String vlanInterface;

            private String bridgeInterface;

            public deleteVLAN_call(int vlanTag, String vlanInterface, String bridgeInterface,
                org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException
            {
                super(client, protocolFactory, transport, resultHandler, false);
                this.vlanTag = vlanTag;
                this.vlanInterface = vlanInterface;
                this.bridgeInterface = bridgeInterface;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                throws org.apache.thrift.TException
            {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteVLAN",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                deleteVLAN_args args = new deleteVLAN_args();
                args.setVlanTag(vlanTag);
                args.setVlanInterface(vlanInterface);
                args.setBridgeInterface(bridgeInterface);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws VLanException, org.apache.thrift.TException
            {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
                {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot =
                    client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_deleteVLAN();
            }
        }

        public void checkVLANConfiguration(
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException
        {
            checkReady();
            checkVLANConfiguration_call method_call = new checkVLANConfiguration_call(resultHandler,
                this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class checkVLANConfiguration_call
            extends org.apache.thrift.async.TAsyncMethodCall
        {
            public checkVLANConfiguration_call(
                org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException
            {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                throws org.apache.thrift.TException
            {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
                    "checkVLANConfiguration", org.apache.thrift.protocol.TMessageType.CALL, 0));
                checkVLANConfiguration_args args = new checkVLANConfiguration_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws VLanException, org.apache.thrift.TException
            {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
                {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot =
                    client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_checkVLANConfiguration();
            }
        }

        public void getInitiatorIQN(org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException
        {
            checkReady();
            getInitiatorIQN_call method_call =
                new getInitiatorIQN_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getInitiatorIQN_call extends org.apache.thrift.async.TAsyncMethodCall
        {
            public getInitiatorIQN_call(org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException
            {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                throws org.apache.thrift.TException
            {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getInitiatorIQN",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                getInitiatorIQN_args args = new getInitiatorIQN_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public String getResult() throws StorageException, org.apache.thrift.TException
            {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
                {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot =
                    client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getInitiatorIQN();
            }
        }

        public void rescanISCSI(List<String> targets,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException
        {
            checkReady();
            rescanISCSI_call method_call = new rescanISCSI_call(targets, resultHandler, this,
                ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class rescanISCSI_call extends org.apache.thrift.async.TAsyncMethodCall
        {
            private List<String> targets;

            public rescanISCSI_call(List<String> targets,
                org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException
            {
                super(client, protocolFactory, transport, resultHandler, false);
                this.targets = targets;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                throws org.apache.thrift.TException
            {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rescanISCSI",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                rescanISCSI_args args = new rescanISCSI_args();
                args.setTargets(targets);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws StorageException, org.apache.thrift.TException
            {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
                {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot =
                    client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_rescanISCSI();
            }
        }

        public void getNodeInfo(org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException
        {
            checkReady();
            getNodeInfo_call method_call =
                new getNodeInfo_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getNodeInfo_call extends org.apache.thrift.async.TAsyncMethodCall
        {
            public getNodeInfo_call(org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException
            {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                throws org.apache.thrift.TException
            {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNodeInfo",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                getNodeInfo_args args = new getNodeInfo_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public NodeInfo getResult() throws LibvirtException, org.apache.thrift.TException
            {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
                {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot =
                    client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getNodeInfo();
            }
        }

        public void defineDomain(String xmlDesc,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException
        {
            checkReady();
            defineDomain_call method_call = new defineDomain_call(xmlDesc, resultHandler, this,
                ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class defineDomain_call extends org.apache.thrift.async.TAsyncMethodCall
        {
            private String xmlDesc;

            public defineDomain_call(String xmlDesc,
                org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException
            {
                super(client, protocolFactory, transport, resultHandler, false);
                this.xmlDesc = xmlDesc;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                throws org.apache.thrift.TException
            {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("defineDomain",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                defineDomain_args args = new defineDomain_args();
                args.setXmlDesc(xmlDesc);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws LibvirtException, org.apache.thrift.TException
            {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
                {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot =
                    client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_defineDomain();
            }
        }

        public void undefineDomain(String domainName,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException
        {
            checkReady();
            undefineDomain_call method_call = new undefineDomain_call(domainName, resultHandler,
                this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class undefineDomain_call extends org.apache.thrift.async.TAsyncMethodCall
        {
            private String domainName;

            public undefineDomain_call(String domainName,
                org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException
            {
                super(client, protocolFactory, transport, resultHandler, false);
                this.domainName = domainName;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                throws org.apache.thrift.TException
            {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("undefineDomain",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                undefineDomain_args args = new undefineDomain_args();
                args.setDomainName(domainName);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws LibvirtException, org.apache.thrift.TException
            {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
                {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot =
                    client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_undefineDomain();
            }
        }

        public void existDomain(String domainName,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException
        {
            checkReady();
            existDomain_call method_call = new existDomain_call(domainName, resultHandler, this,
                ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class existDomain_call extends org.apache.thrift.async.TAsyncMethodCall
        {
            private String domainName;

            public existDomain_call(String domainName,
                org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException
            {
                super(client, protocolFactory, transport, resultHandler, false);
                this.domainName = domainName;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                throws org.apache.thrift.TException
            {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("existDomain",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                existDomain_args args = new existDomain_args();
                args.setDomainName(domainName);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public boolean getResult() throws org.apache.thrift.TException
            {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
                {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot =
                    client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_existDomain();
            }
        }

        public void getDomainState(String domainName,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException
        {
            checkReady();
            getDomainState_call method_call = new getDomainState_call(domainName, resultHandler,
                this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getDomainState_call extends org.apache.thrift.async.TAsyncMethodCall
        {
            private String domainName;

            public getDomainState_call(String domainName,
                org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException
            {
                super(client, protocolFactory, transport, resultHandler, false);
                this.domainName = domainName;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                throws org.apache.thrift.TException
            {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDomainState",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                getDomainState_args args = new getDomainState_args();
                args.setDomainName(domainName);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public DomainState getResult() throws LibvirtException, org.apache.thrift.TException
            {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
                {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot =
                    client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getDomainState();
            }
        }

        public void getDomainInfo(String domainName,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException
        {
            checkReady();
            getDomainInfo_call method_call = new getDomainInfo_call(domainName, resultHandler, this,
                ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getDomainInfo_call extends org.apache.thrift.async.TAsyncMethodCall
        {
            private String domainName;

            public getDomainInfo_call(String domainName,
                org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException
            {
                super(client, protocolFactory, transport, resultHandler, false);
                this.domainName = domainName;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                throws org.apache.thrift.TException
            {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDomainInfo",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                getDomainInfo_args args = new getDomainInfo_args();
                args.setDomainName(domainName);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public DomainInfo getResult() throws LibvirtException, org.apache.thrift.TException
            {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
                {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot =
                    client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getDomainInfo();
            }
        }

        public void getDomains(org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException
        {
            checkReady();
            getDomains_call method_call =
                new getDomains_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getDomains_call extends org.apache.thrift.async.TAsyncMethodCall
        {
            public getDomains_call(org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException
            {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                throws org.apache.thrift.TException
            {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDomains",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                getDomains_args args = new getDomains_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public List<DomainInfo> getResult()
                throws LibvirtException, org.apache.thrift.TException
            {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
                {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot =
                    client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getDomains();
            }
        }

        public void powerOn(String domainName,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException
        {
            checkReady();
            powerOn_call method_call =
                new powerOn_call(domainName, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class powerOn_call extends org.apache.thrift.async.TAsyncMethodCall
        {
            private String domainName;

            public powerOn_call(String domainName,
                org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException
            {
                super(client, protocolFactory, transport, resultHandler, false);
                this.domainName = domainName;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                throws org.apache.thrift.TException
            {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("powerOn",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                powerOn_args args = new powerOn_args();
                args.setDomainName(domainName);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws LibvirtException, org.apache.thrift.TException
            {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
                {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot =
                    client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_powerOn();
            }
        }

        public void powerOff(String domainName,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException
        {
            checkReady();
            powerOff_call method_call = new powerOff_call(domainName, resultHandler, this,
                ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class powerOff_call extends org.apache.thrift.async.TAsyncMethodCall
        {
            private String domainName;

            public powerOff_call(String domainName,
                org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException
            {
                super(client, protocolFactory, transport, resultHandler, false);
                this.domainName = domainName;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                throws org.apache.thrift.TException
            {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("powerOff",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                powerOff_args args = new powerOff_args();
                args.setDomainName(domainName);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws LibvirtException, org.apache.thrift.TException
            {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
                {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot =
                    client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_powerOff();
            }
        }

        public void shutdown(String domainName,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException
        {
            checkReady();
            shutdown_call method_call = new shutdown_call(domainName, resultHandler, this,
                ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class shutdown_call extends org.apache.thrift.async.TAsyncMethodCall
        {
            private String domainName;

            public shutdown_call(String domainName,
                org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException
            {
                super(client, protocolFactory, transport, resultHandler, false);
                this.domainName = domainName;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                throws org.apache.thrift.TException
            {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("shutdown",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                shutdown_args args = new shutdown_args();
                args.setDomainName(domainName);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws LibvirtException, org.apache.thrift.TException
            {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
                {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot =
                    client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_shutdown();
            }
        }

        public void reset(String domainName,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException
        {
            checkReady();
            reset_call method_call =
                new reset_call(domainName, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class reset_call extends org.apache.thrift.async.TAsyncMethodCall
        {
            private String domainName;

            public reset_call(String domainName,
                org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException
            {
                super(client, protocolFactory, transport, resultHandler, false);
                this.domainName = domainName;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                throws org.apache.thrift.TException
            {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reset",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                reset_args args = new reset_args();
                args.setDomainName(domainName);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws LibvirtException, org.apache.thrift.TException
            {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
                {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot =
                    client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_reset();
            }
        }

        public void pause(String domainName,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException
        {
            checkReady();
            pause_call method_call =
                new pause_call(domainName, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class pause_call extends org.apache.thrift.async.TAsyncMethodCall
        {
            private String domainName;

            public pause_call(String domainName,
                org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException
            {
                super(client, protocolFactory, transport, resultHandler, false);
                this.domainName = domainName;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                throws org.apache.thrift.TException
            {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pause",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                pause_args args = new pause_args();
                args.setDomainName(domainName);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws LibvirtException, org.apache.thrift.TException
            {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
                {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot =
                    client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_pause();
            }
        }

        public void resume(String domainName,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException
        {
            checkReady();
            resume_call method_call =
                new resume_call(domainName, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class resume_call extends org.apache.thrift.async.TAsyncMethodCall
        {
            private String domainName;

            public resume_call(String domainName,
                org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException
            {
                super(client, protocolFactory, transport, resultHandler, false);
                this.domainName = domainName;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                throws org.apache.thrift.TException
            {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("resume",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                resume_args args = new resume_args();
                args.setDomainName(domainName);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws LibvirtException, org.apache.thrift.TException
            {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
                {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot =
                    client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_resume();
            }
        }

        public void createISCSIStoragePool(String name, String host, String iqn, String targetPath,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException
        {
            checkReady();
            createISCSIStoragePool_call method_call = new createISCSIStoragePool_call(name, host,
                iqn, targetPath, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class createISCSIStoragePool_call
            extends org.apache.thrift.async.TAsyncMethodCall
        {
            private String name;

            private String host;

            private String iqn;

            private String targetPath;

            public createISCSIStoragePool_call(String name, String host, String iqn,
                String targetPath, org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException
            {
                super(client, protocolFactory, transport, resultHandler, false);
                this.name = name;
                this.host = host;
                this.iqn = iqn;
                this.targetPath = targetPath;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                throws org.apache.thrift.TException
            {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
                    "createISCSIStoragePool", org.apache.thrift.protocol.TMessageType.CALL, 0));
                createISCSIStoragePool_args args = new createISCSIStoragePool_args();
                args.setName(name);
                args.setHost(host);
                args.setIqn(iqn);
                args.setTargetPath(targetPath);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws LibvirtException, org.apache.thrift.TException
            {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
                {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot =
                    client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_createISCSIStoragePool();
            }
        }

        public void createNFSStoragePool(String name, String host, String dir, String targetPath,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException
        {
            checkReady();
            createNFSStoragePool_call method_call = new createNFSStoragePool_call(name, host, dir,
                targetPath, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class createNFSStoragePool_call
            extends org.apache.thrift.async.TAsyncMethodCall
        {
            private String name;

            private String host;

            private String dir;

            private String targetPath;

            public createNFSStoragePool_call(String name, String host, String dir,
                String targetPath, org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException
            {
                super(client, protocolFactory, transport, resultHandler, false);
                this.name = name;
                this.host = host;
                this.dir = dir;
                this.targetPath = targetPath;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                throws org.apache.thrift.TException
            {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
                    "createNFSStoragePool", org.apache.thrift.protocol.TMessageType.CALL, 0));
                createNFSStoragePool_args args = new createNFSStoragePool_args();
                args.setName(name);
                args.setHost(host);
                args.setDir(dir);
                args.setTargetPath(targetPath);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws LibvirtException, org.apache.thrift.TException
            {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
                {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot =
                    client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_createNFSStoragePool();
            }
        }

        public void createDirStoragePool(String name, String targetPath,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException
        {
            checkReady();
            createDirStoragePool_call method_call = new createDirStoragePool_call(name, targetPath,
                resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class createDirStoragePool_call
            extends org.apache.thrift.async.TAsyncMethodCall
        {
            private String name;

            private String targetPath;

            public createDirStoragePool_call(String name, String targetPath,
                org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException
            {
                super(client, protocolFactory, transport, resultHandler, false);
                this.name = name;
                this.targetPath = targetPath;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                throws org.apache.thrift.TException
            {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(
                    "createDirStoragePool", org.apache.thrift.protocol.TMessageType.CALL, 0));
                createDirStoragePool_args args = new createDirStoragePool_args();
                args.setName(name);
                args.setTargetPath(targetPath);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws LibvirtException, org.apache.thrift.TException
            {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
                {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot =
                    client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_createDirStoragePool();
            }
        }

        public void createDisk(String poolName, String name, double capacityInKb,
            double allocationInKb, String format,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException
        {
            checkReady();
            createDisk_call method_call = new createDisk_call(poolName, name, capacityInKb,
                allocationInKb, format, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class createDisk_call extends org.apache.thrift.async.TAsyncMethodCall
        {
            private String poolName;

            private String name;

            private double capacityInKb;

            private double allocationInKb;

            private String format;

            public createDisk_call(String poolName, String name, double capacityInKb,
                double allocationInKb, String format,
                org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException
            {
                super(client, protocolFactory, transport, resultHandler, false);
                this.poolName = poolName;
                this.name = name;
                this.capacityInKb = capacityInKb;
                this.allocationInKb = allocationInKb;
                this.format = format;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                throws org.apache.thrift.TException
            {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createDisk",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                createDisk_args args = new createDisk_args();
                args.setPoolName(poolName);
                args.setName(name);
                args.setCapacityInKb(capacityInKb);
                args.setAllocationInKb(allocationInKb);
                args.setFormat(format);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws LibvirtException, org.apache.thrift.TException
            {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
                {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot =
                    client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_createDisk();
            }
        }

        public void deleteDisk(String poolName, String name,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException
        {
            checkReady();
            deleteDisk_call method_call = new deleteDisk_call(poolName, name, resultHandler, this,
                ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class deleteDisk_call extends org.apache.thrift.async.TAsyncMethodCall
        {
            private String poolName;

            private String name;

            public deleteDisk_call(String poolName, String name,
                org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException
            {
                super(client, protocolFactory, transport, resultHandler, false);
                this.poolName = poolName;
                this.name = name;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                throws org.apache.thrift.TException
            {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteDisk",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                deleteDisk_args args = new deleteDisk_args();
                args.setPoolName(poolName);
                args.setName(name);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws LibvirtException, org.apache.thrift.TException
            {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
                {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot =
                    client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_deleteDisk();
            }
        }

        public void resizeVol(String poolName, String name, double capacityInKb,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException
        {
            checkReady();
            resizeVol_call method_call = new resizeVol_call(poolName, name, capacityInKb,
                resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class resizeVol_call extends org.apache.thrift.async.TAsyncMethodCall
        {
            private String poolName;

            private String name;

            private double capacityInKb;

            public resizeVol_call(String poolName, String name, double capacityInKb,
                org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException
            {
                super(client, protocolFactory, transport, resultHandler, false);
                this.poolName = poolName;
                this.name = name;
                this.capacityInKb = capacityInKb;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                throws org.apache.thrift.TException
            {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("resizeVol",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                resizeVol_args args = new resizeVol_args();
                args.setPoolName(poolName);
                args.setName(name);
                args.setCapacityInKb(capacityInKb);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws LibvirtException, org.apache.thrift.TException
            {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
                {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot =
                    client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_resizeVol();
            }
        }

        public void resizeDisk(String domainName, String diskPath, double diskSizeInKb,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException
        {
            checkReady();
            resizeDisk_call method_call = new resizeDisk_call(domainName, diskPath, diskSizeInKb,
                resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class resizeDisk_call extends org.apache.thrift.async.TAsyncMethodCall
        {
            private String domainName;

            private String diskPath;

            private double diskSizeInKb;

            public resizeDisk_call(String domainName, String diskPath, double diskSizeInKb,
                org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException
            {
                super(client, protocolFactory, transport, resultHandler, false);
                this.domainName = domainName;
                this.diskPath = diskPath;
                this.diskSizeInKb = diskSizeInKb;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                throws org.apache.thrift.TException
            {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("resizeDisk",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                resizeDisk_args args = new resizeDisk_args();
                args.setDomainName(domainName);
                args.setDiskPath(diskPath);
                args.setDiskSizeInKb(diskSizeInKb);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws LibvirtException, org.apache.thrift.TException
            {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
                {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot =
                    client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_resizeDisk();
            }
        }

        public void getDomainBlockInfo(String domainName, String diskPath,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException
        {
            checkReady();
            getDomainBlockInfo_call method_call = new getDomainBlockInfo_call(domainName, diskPath,
                resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getDomainBlockInfo_call extends org.apache.thrift.async.TAsyncMethodCall
        {
            private String domainName;

            private String diskPath;

            public getDomainBlockInfo_call(String domainName, String diskPath,
                org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException
            {
                super(client, protocolFactory, transport, resultHandler, false);
                this.domainName = domainName;
                this.diskPath = diskPath;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                throws org.apache.thrift.TException
            {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDomainBlockInfo",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                getDomainBlockInfo_args args = new getDomainBlockInfo_args();
                args.setDomainName(domainName);
                args.setDiskPath(diskPath);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public DomainBlockInfo getResult() throws LibvirtException, org.apache.thrift.TException
            {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
                {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot =
                    client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getDomainBlockInfo();
            }
        }

        public void getDatapoints(String domainName, int timestamp,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException
        {
            checkReady();
            getDatapoints_call method_call = new getDatapoints_call(domainName, timestamp,
                resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class getDatapoints_call extends org.apache.thrift.async.TAsyncMethodCall
        {
            private String domainName;

            private int timestamp;

            public getDatapoints_call(String domainName, int timestamp,
                org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException
            {
                super(client, protocolFactory, transport, resultHandler, false);
                this.domainName = domainName;
                this.timestamp = timestamp;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                throws org.apache.thrift.TException
            {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDatapoints",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                getDatapoints_args args = new getDatapoints_args();
                args.setDomainName(domainName);
                args.setTimestamp(timestamp);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public List<Measure> getResult() throws org.apache.thrift.TException
            {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
                {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot =
                    client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_getDatapoints();
            }
        }

        public void upload(BinaryFile file, String path,
            org.apache.thrift.async.AsyncMethodCallback resultHandler)
            throws org.apache.thrift.TException
        {
            checkReady();
            upload_call method_call =
                new upload_call(file, path, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class upload_call extends org.apache.thrift.async.TAsyncMethodCall
        {
            private BinaryFile file;

            private String path;

            public upload_call(BinaryFile file, String path,
                org.apache.thrift.async.AsyncMethodCallback resultHandler,
                org.apache.thrift.async.TAsyncClient client,
                org.apache.thrift.protocol.TProtocolFactory protocolFactory,
                org.apache.thrift.transport.TNonblockingTransport transport)
                throws org.apache.thrift.TException
            {
                super(client, protocolFactory, transport, resultHandler, false);
                this.file = file;
                this.path = path;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot)
                throws org.apache.thrift.TException
            {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("upload",
                    org.apache.thrift.protocol.TMessageType.CALL, 0));
                upload_args args = new upload_args();
                args.setFile(file);
                args.setPath(path);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException
            {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ)
                {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
                    new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot =
                    client.getProtocolFactory().getProtocol(memoryTransport);
                (new Client(prot)).recv_upload();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I>
        implements org.apache.thrift.TProcessor
    {
        private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

        public Processor(I iface)
        {
            super(iface, getProcessMap(
                new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface,
            Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap)
        {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
            Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap)
        {
            processMap.put("checkRimpConfiguration", new checkRimpConfiguration());
            processMap.put("getDiskFileSize", new getDiskFileSize());
            processMap.put("getDatastores", new getDatastores());
            processMap.put("getNetInterfaces", new getNetInterfaces());
            processMap.put("copyFromRepositoryToDatastore", new copyFromRepositoryToDatastore());
            processMap.put("deleteVirtualImageFromDatastore",
                new deleteVirtualImageFromDatastore());
            processMap.put("copyFromDatastoreToRepository", new copyFromDatastoreToRepository());
            processMap.put("instanceDisk", new instanceDisk());
            processMap.put("renameDisk", new renameDisk());
            processMap.put("createVLAN", new createVLAN());
            processMap.put("deleteVLAN", new deleteVLAN());
            processMap.put("checkVLANConfiguration", new checkVLANConfiguration());
            processMap.put("getInitiatorIQN", new getInitiatorIQN());
            processMap.put("rescanISCSI", new rescanISCSI());
            processMap.put("getNodeInfo", new getNodeInfo());
            processMap.put("defineDomain", new defineDomain());
            processMap.put("undefineDomain", new undefineDomain());
            processMap.put("existDomain", new existDomain());
            processMap.put("getDomainState", new getDomainState());
            processMap.put("getDomainInfo", new getDomainInfo());
            processMap.put("getDomains", new getDomains());
            processMap.put("powerOn", new powerOn());
            processMap.put("powerOff", new powerOff());
            processMap.put("shutdown", new shutdown());
            processMap.put("reset", new reset());
            processMap.put("pause", new pause());
            processMap.put("resume", new resume());
            processMap.put("createISCSIStoragePool", new createISCSIStoragePool());
            processMap.put("createNFSStoragePool", new createNFSStoragePool());
            processMap.put("createDirStoragePool", new createDirStoragePool());
            processMap.put("createDisk", new createDisk());
            processMap.put("deleteDisk", new deleteDisk());
            processMap.put("resizeVol", new resizeVol());
            processMap.put("resizeDisk", new resizeDisk());
            processMap.put("getDomainBlockInfo", new getDomainBlockInfo());
            processMap.put("getDatapoints", new getDatapoints());
            processMap.put("upload", new upload());
            return processMap;
        }

        public static class checkRimpConfiguration<I extends Iface>
            extends org.apache.thrift.ProcessFunction<I, checkRimpConfiguration_args>
        {
            public checkRimpConfiguration()
            {
                super("checkRimpConfiguration");
            }

            public checkRimpConfiguration_args getEmptyArgsInstance()
            {
                return new checkRimpConfiguration_args();
            }

            protected boolean isOneway()
            {
                return false;
            }

            public checkRimpConfiguration_result getResult(I iface,
                checkRimpConfiguration_args args) throws org.apache.thrift.TException
            {
                checkRimpConfiguration_result result = new checkRimpConfiguration_result();
                try
                {
                    iface.checkRimpConfiguration();
                }
                catch (RimpException re)
                {
                    result.re = re;
                }
                return result;
            }
        }

        public static class getDiskFileSize<I extends Iface>
            extends org.apache.thrift.ProcessFunction<I, getDiskFileSize_args>
        {
            public getDiskFileSize()
            {
                super("getDiskFileSize");
            }

            public getDiskFileSize_args getEmptyArgsInstance()
            {
                return new getDiskFileSize_args();
            }

            protected boolean isOneway()
            {
                return false;
            }

            public getDiskFileSize_result getResult(I iface, getDiskFileSize_args args)
                throws org.apache.thrift.TException
            {
                getDiskFileSize_result result = new getDiskFileSize_result();
                try
                {
                    result.success = iface.getDiskFileSize(args.virtualImageDatastorePath);
                    result.setSuccessIsSet(true);
                }
                catch (RimpException re)
                {
                    result.re = re;
                }
                return result;
            }
        }

        public static class getDatastores<I extends Iface>
            extends org.apache.thrift.ProcessFunction<I, getDatastores_args>
        {
            public getDatastores()
            {
                super("getDatastores");
            }

            public getDatastores_args getEmptyArgsInstance()
            {
                return new getDatastores_args();
            }

            protected boolean isOneway()
            {
                return false;
            }

            public getDatastores_result getResult(I iface, getDatastores_args args)
                throws org.apache.thrift.TException
            {
                getDatastores_result result = new getDatastores_result();
                try
                {
                    result.success = iface.getDatastores();
                }
                catch (RimpException re)
                {
                    result.re = re;
                }
                return result;
            }
        }

        public static class getNetInterfaces<I extends Iface>
            extends org.apache.thrift.ProcessFunction<I, getNetInterfaces_args>
        {
            public getNetInterfaces()
            {
                super("getNetInterfaces");
            }

            public getNetInterfaces_args getEmptyArgsInstance()
            {
                return new getNetInterfaces_args();
            }

            protected boolean isOneway()
            {
                return false;
            }

            public getNetInterfaces_result getResult(I iface, getNetInterfaces_args args)
                throws org.apache.thrift.TException
            {
                getNetInterfaces_result result = new getNetInterfaces_result();
                try
                {
                    result.success = iface.getNetInterfaces();
                }
                catch (RimpException re)
                {
                    result.re = re;
                }
                return result;
            }
        }

        public static class copyFromRepositoryToDatastore<I extends Iface>
            extends org.apache.thrift.ProcessFunction<I, copyFromRepositoryToDatastore_args>
        {
            public copyFromRepositoryToDatastore()
            {
                super("copyFromRepositoryToDatastore");
            }

            public copyFromRepositoryToDatastore_args getEmptyArgsInstance()
            {
                return new copyFromRepositoryToDatastore_args();
            }

            protected boolean isOneway()
            {
                return false;
            }

            public copyFromRepositoryToDatastore_result getResult(I iface,
                copyFromRepositoryToDatastore_args args) throws org.apache.thrift.TException
            {
                copyFromRepositoryToDatastore_result result =
                    new copyFromRepositoryToDatastore_result();
                try
                {
                    iface.copyFromRepositoryToDatastore(args.virtualImageRepositoryPath,
                        args.datastorePath, args.virtualMachineUUID);
                }
                catch (RimpException re)
                {
                    result.re = re;
                }
                return result;
            }
        }

        public static class deleteVirtualImageFromDatastore<I extends Iface>
            extends org.apache.thrift.ProcessFunction<I, deleteVirtualImageFromDatastore_args>
        {
            public deleteVirtualImageFromDatastore()
            {
                super("deleteVirtualImageFromDatastore");
            }

            public deleteVirtualImageFromDatastore_args getEmptyArgsInstance()
            {
                return new deleteVirtualImageFromDatastore_args();
            }

            protected boolean isOneway()
            {
                return false;
            }

            public deleteVirtualImageFromDatastore_result getResult(I iface,
                deleteVirtualImageFromDatastore_args args) throws org.apache.thrift.TException
            {
                deleteVirtualImageFromDatastore_result result =
                    new deleteVirtualImageFromDatastore_result();
                try
                {
                    iface.deleteVirtualImageFromDatastore(args.datastorePath,
                        args.virtualMachineUUID);
                }
                catch (RimpException re)
                {
                    result.re = re;
                }
                return result;
            }
        }

        public static class copyFromDatastoreToRepository<I extends Iface>
            extends org.apache.thrift.ProcessFunction<I, copyFromDatastoreToRepository_args>
        {
            public copyFromDatastoreToRepository()
            {
                super("copyFromDatastoreToRepository");
            }

            public copyFromDatastoreToRepository_args getEmptyArgsInstance()
            {
                return new copyFromDatastoreToRepository_args();
            }

            protected boolean isOneway()
            {
                return false;
            }

            public copyFromDatastoreToRepository_result getResult(I iface,
                copyFromDatastoreToRepository_args args) throws org.apache.thrift.TException
            {
                copyFromDatastoreToRepository_result result =
                    new copyFromDatastoreToRepository_result();
                try
                {
                    iface.copyFromDatastoreToRepository(args.virtualMachineUUID, args.snapshot,
                        args.destinationRepositoryPath, args.sourceDatastorePath);
                }
                catch (RimpException re)
                {
                    result.re = re;
                }
                return result;
            }
        }

        public static class instanceDisk<I extends Iface>
            extends org.apache.thrift.ProcessFunction<I, instanceDisk_args>
        {
            public instanceDisk()
            {
                super("instanceDisk");
            }

            public instanceDisk_args getEmptyArgsInstance()
            {
                return new instanceDisk_args();
            }

            protected boolean isOneway()
            {
                return false;
            }

            public instanceDisk_result getResult(I iface, instanceDisk_args args)
                throws org.apache.thrift.TException
            {
                instanceDisk_result result = new instanceDisk_result();
                try
                {
                    iface.instanceDisk(args.source, args.destination);
                }
                catch (RimpException re)
                {
                    result.re = re;
                }
                return result;
            }
        }

        public static class renameDisk<I extends Iface>
            extends org.apache.thrift.ProcessFunction<I, renameDisk_args>
        {
            public renameDisk()
            {
                super("renameDisk");
            }

            public renameDisk_args getEmptyArgsInstance()
            {
                return new renameDisk_args();
            }

            protected boolean isOneway()
            {
                return false;
            }

            public renameDisk_result getResult(I iface, renameDisk_args args)
                throws org.apache.thrift.TException
            {
                renameDisk_result result = new renameDisk_result();
                try
                {
                    iface.renameDisk(args.oldPath, args.newPath);
                }
                catch (RimpException re)
                {
                    result.re = re;
                }
                return result;
            }
        }

        public static class createVLAN<I extends Iface>
            extends org.apache.thrift.ProcessFunction<I, createVLAN_args>
        {
            public createVLAN()
            {
                super("createVLAN");
            }

            public createVLAN_args getEmptyArgsInstance()
            {
                return new createVLAN_args();
            }

            protected boolean isOneway()
            {
                return false;
            }

            public createVLAN_result getResult(I iface, createVLAN_args args)
                throws org.apache.thrift.TException
            {
                createVLAN_result result = new createVLAN_result();
                try
                {
                    iface.createVLAN(args.vlanTag, args.vlanInterface, args.bridgeInterface);
                }
                catch (VLanException ve)
                {
                    result.ve = ve;
                }
                return result;
            }
        }

        public static class deleteVLAN<I extends Iface>
            extends org.apache.thrift.ProcessFunction<I, deleteVLAN_args>
        {
            public deleteVLAN()
            {
                super("deleteVLAN");
            }

            public deleteVLAN_args getEmptyArgsInstance()
            {
                return new deleteVLAN_args();
            }

            protected boolean isOneway()
            {
                return false;
            }

            public deleteVLAN_result getResult(I iface, deleteVLAN_args args)
                throws org.apache.thrift.TException
            {
                deleteVLAN_result result = new deleteVLAN_result();
                try
                {
                    iface.deleteVLAN(args.vlanTag, args.vlanInterface, args.bridgeInterface);
                }
                catch (VLanException ve)
                {
                    result.ve = ve;
                }
                return result;
            }
        }

        public static class checkVLANConfiguration<I extends Iface>
            extends org.apache.thrift.ProcessFunction<I, checkVLANConfiguration_args>
        {
            public checkVLANConfiguration()
            {
                super("checkVLANConfiguration");
            }

            public checkVLANConfiguration_args getEmptyArgsInstance()
            {
                return new checkVLANConfiguration_args();
            }

            protected boolean isOneway()
            {
                return false;
            }

            public checkVLANConfiguration_result getResult(I iface,
                checkVLANConfiguration_args args) throws org.apache.thrift.TException
            {
                checkVLANConfiguration_result result = new checkVLANConfiguration_result();
                try
                {
                    iface.checkVLANConfiguration();
                }
                catch (VLanException ve)
                {
                    result.ve = ve;
                }
                return result;
            }
        }

        public static class getInitiatorIQN<I extends Iface>
            extends org.apache.thrift.ProcessFunction<I, getInitiatorIQN_args>
        {
            public getInitiatorIQN()
            {
                super("getInitiatorIQN");
            }

            public getInitiatorIQN_args getEmptyArgsInstance()
            {
                return new getInitiatorIQN_args();
            }

            protected boolean isOneway()
            {
                return false;
            }

            public getInitiatorIQN_result getResult(I iface, getInitiatorIQN_args args)
                throws org.apache.thrift.TException
            {
                getInitiatorIQN_result result = new getInitiatorIQN_result();
                try
                {
                    result.success = iface.getInitiatorIQN();
                }
                catch (StorageException se)
                {
                    result.se = se;
                }
                return result;
            }
        }

        public static class rescanISCSI<I extends Iface>
            extends org.apache.thrift.ProcessFunction<I, rescanISCSI_args>
        {
            public rescanISCSI()
            {
                super("rescanISCSI");
            }

            public rescanISCSI_args getEmptyArgsInstance()
            {
                return new rescanISCSI_args();
            }

            protected boolean isOneway()
            {
                return false;
            }

            public rescanISCSI_result getResult(I iface, rescanISCSI_args args)
                throws org.apache.thrift.TException
            {
                rescanISCSI_result result = new rescanISCSI_result();
                try
                {
                    iface.rescanISCSI(args.targets);
                }
                catch (StorageException se)
                {
                    result.se = se;
                }
                return result;
            }
        }

        public static class getNodeInfo<I extends Iface>
            extends org.apache.thrift.ProcessFunction<I, getNodeInfo_args>
        {
            public getNodeInfo()
            {
                super("getNodeInfo");
            }

            public getNodeInfo_args getEmptyArgsInstance()
            {
                return new getNodeInfo_args();
            }

            protected boolean isOneway()
            {
                return false;
            }

            public getNodeInfo_result getResult(I iface, getNodeInfo_args args)
                throws org.apache.thrift.TException
            {
                getNodeInfo_result result = new getNodeInfo_result();
                try
                {
                    result.success = iface.getNodeInfo();
                }
                catch (LibvirtException libvirtException)
                {
                    result.libvirtException = libvirtException;
                }
                return result;
            }
        }

        public static class defineDomain<I extends Iface>
            extends org.apache.thrift.ProcessFunction<I, defineDomain_args>
        {
            public defineDomain()
            {
                super("defineDomain");
            }

            public defineDomain_args getEmptyArgsInstance()
            {
                return new defineDomain_args();
            }

            protected boolean isOneway()
            {
                return false;
            }

            public defineDomain_result getResult(I iface, defineDomain_args args)
                throws org.apache.thrift.TException
            {
                defineDomain_result result = new defineDomain_result();
                try
                {
                    iface.defineDomain(args.xmlDesc);
                }
                catch (LibvirtException libvirtException)
                {
                    result.libvirtException = libvirtException;
                }
                return result;
            }
        }

        public static class undefineDomain<I extends Iface>
            extends org.apache.thrift.ProcessFunction<I, undefineDomain_args>
        {
            public undefineDomain()
            {
                super("undefineDomain");
            }

            public undefineDomain_args getEmptyArgsInstance()
            {
                return new undefineDomain_args();
            }

            protected boolean isOneway()
            {
                return false;
            }

            public undefineDomain_result getResult(I iface, undefineDomain_args args)
                throws org.apache.thrift.TException
            {
                undefineDomain_result result = new undefineDomain_result();
                try
                {
                    iface.undefineDomain(args.domainName);
                }
                catch (LibvirtException libvirtException)
                {
                    result.libvirtException = libvirtException;
                }
                return result;
            }
        }

        public static class existDomain<I extends Iface>
            extends org.apache.thrift.ProcessFunction<I, existDomain_args>
        {
            public existDomain()
            {
                super("existDomain");
            }

            public existDomain_args getEmptyArgsInstance()
            {
                return new existDomain_args();
            }

            protected boolean isOneway()
            {
                return false;
            }

            public existDomain_result getResult(I iface, existDomain_args args)
                throws org.apache.thrift.TException
            {
                existDomain_result result = new existDomain_result();
                result.success = iface.existDomain(args.domainName);
                result.setSuccessIsSet(true);
                return result;
            }
        }

        public static class getDomainState<I extends Iface>
            extends org.apache.thrift.ProcessFunction<I, getDomainState_args>
        {
            public getDomainState()
            {
                super("getDomainState");
            }

            public getDomainState_args getEmptyArgsInstance()
            {
                return new getDomainState_args();
            }

            protected boolean isOneway()
            {
                return false;
            }

            public getDomainState_result getResult(I iface, getDomainState_args args)
                throws org.apache.thrift.TException
            {
                getDomainState_result result = new getDomainState_result();
                try
                {
                    result.success = iface.getDomainState(args.domainName);
                }
                catch (LibvirtException libvirtException)
                {
                    result.libvirtException = libvirtException;
                }
                return result;
            }
        }

        public static class getDomainInfo<I extends Iface>
            extends org.apache.thrift.ProcessFunction<I, getDomainInfo_args>
        {
            public getDomainInfo()
            {
                super("getDomainInfo");
            }

            public getDomainInfo_args getEmptyArgsInstance()
            {
                return new getDomainInfo_args();
            }

            protected boolean isOneway()
            {
                return false;
            }

            public getDomainInfo_result getResult(I iface, getDomainInfo_args args)
                throws org.apache.thrift.TException
            {
                getDomainInfo_result result = new getDomainInfo_result();
                try
                {
                    result.success = iface.getDomainInfo(args.domainName);
                }
                catch (LibvirtException libvirtException)
                {
                    result.libvirtException = libvirtException;
                }
                return result;
            }
        }

        public static class getDomains<I extends Iface>
            extends org.apache.thrift.ProcessFunction<I, getDomains_args>
        {
            public getDomains()
            {
                super("getDomains");
            }

            public getDomains_args getEmptyArgsInstance()
            {
                return new getDomains_args();
            }

            protected boolean isOneway()
            {
                return false;
            }

            public getDomains_result getResult(I iface, getDomains_args args)
                throws org.apache.thrift.TException
            {
                getDomains_result result = new getDomains_result();
                try
                {
                    result.success = iface.getDomains();
                }
                catch (LibvirtException libvirtException)
                {
                    result.libvirtException = libvirtException;
                }
                return result;
            }
        }

        public static class powerOn<I extends Iface>
            extends org.apache.thrift.ProcessFunction<I, powerOn_args>
        {
            public powerOn()
            {
                super("powerOn");
            }

            public powerOn_args getEmptyArgsInstance()
            {
                return new powerOn_args();
            }

            protected boolean isOneway()
            {
                return false;
            }

            public powerOn_result getResult(I iface, powerOn_args args)
                throws org.apache.thrift.TException
            {
                powerOn_result result = new powerOn_result();
                try
                {
                    iface.powerOn(args.domainName);
                }
                catch (LibvirtException libvirtException)
                {
                    result.libvirtException = libvirtException;
                }
                return result;
            }
        }

        public static class powerOff<I extends Iface>
            extends org.apache.thrift.ProcessFunction<I, powerOff_args>
        {
            public powerOff()
            {
                super("powerOff");
            }

            public powerOff_args getEmptyArgsInstance()
            {
                return new powerOff_args();
            }

            protected boolean isOneway()
            {
                return false;
            }

            public powerOff_result getResult(I iface, powerOff_args args)
                throws org.apache.thrift.TException
            {
                powerOff_result result = new powerOff_result();
                try
                {
                    iface.powerOff(args.domainName);
                }
                catch (LibvirtException libvirtException)
                {
                    result.libvirtException = libvirtException;
                }
                return result;
            }
        }

        public static class shutdown<I extends Iface>
            extends org.apache.thrift.ProcessFunction<I, shutdown_args>
        {
            public shutdown()
            {
                super("shutdown");
            }

            public shutdown_args getEmptyArgsInstance()
            {
                return new shutdown_args();
            }

            protected boolean isOneway()
            {
                return false;
            }

            public shutdown_result getResult(I iface, shutdown_args args)
                throws org.apache.thrift.TException
            {
                shutdown_result result = new shutdown_result();
                try
                {
                    iface.shutdown(args.domainName);
                }
                catch (LibvirtException libvirtException)
                {
                    result.libvirtException = libvirtException;
                }
                return result;
            }
        }

        public static class reset<I extends Iface>
            extends org.apache.thrift.ProcessFunction<I, reset_args>
        {
            public reset()
            {
                super("reset");
            }

            public reset_args getEmptyArgsInstance()
            {
                return new reset_args();
            }

            protected boolean isOneway()
            {
                return false;
            }

            public reset_result getResult(I iface, reset_args args)
                throws org.apache.thrift.TException
            {
                reset_result result = new reset_result();
                try
                {
                    iface.reset(args.domainName);
                }
                catch (LibvirtException libvirtException)
                {
                    result.libvirtException = libvirtException;
                }
                return result;
            }
        }

        public static class pause<I extends Iface>
            extends org.apache.thrift.ProcessFunction<I, pause_args>
        {
            public pause()
            {
                super("pause");
            }

            public pause_args getEmptyArgsInstance()
            {
                return new pause_args();
            }

            protected boolean isOneway()
            {
                return false;
            }

            public pause_result getResult(I iface, pause_args args)
                throws org.apache.thrift.TException
            {
                pause_result result = new pause_result();
                try
                {
                    iface.pause(args.domainName);
                }
                catch (LibvirtException libvirtException)
                {
                    result.libvirtException = libvirtException;
                }
                return result;
            }
        }

        public static class resume<I extends Iface>
            extends org.apache.thrift.ProcessFunction<I, resume_args>
        {
            public resume()
            {
                super("resume");
            }

            public resume_args getEmptyArgsInstance()
            {
                return new resume_args();
            }

            protected boolean isOneway()
            {
                return false;
            }

            public resume_result getResult(I iface, resume_args args)
                throws org.apache.thrift.TException
            {
                resume_result result = new resume_result();
                try
                {
                    iface.resume(args.domainName);
                }
                catch (LibvirtException libvirtException)
                {
                    result.libvirtException = libvirtException;
                }
                return result;
            }
        }

        public static class createISCSIStoragePool<I extends Iface>
            extends org.apache.thrift.ProcessFunction<I, createISCSIStoragePool_args>
        {
            public createISCSIStoragePool()
            {
                super("createISCSIStoragePool");
            }

            public createISCSIStoragePool_args getEmptyArgsInstance()
            {
                return new createISCSIStoragePool_args();
            }

            protected boolean isOneway()
            {
                return false;
            }

            public createISCSIStoragePool_result getResult(I iface,
                createISCSIStoragePool_args args) throws org.apache.thrift.TException
            {
                createISCSIStoragePool_result result = new createISCSIStoragePool_result();
                try
                {
                    iface.createISCSIStoragePool(args.name, args.host, args.iqn, args.targetPath);
                }
                catch (LibvirtException libvirtException)
                {
                    result.libvirtException = libvirtException;
                }
                return result;
            }
        }

        public static class createNFSStoragePool<I extends Iface>
            extends org.apache.thrift.ProcessFunction<I, createNFSStoragePool_args>
        {
            public createNFSStoragePool()
            {
                super("createNFSStoragePool");
            }

            public createNFSStoragePool_args getEmptyArgsInstance()
            {
                return new createNFSStoragePool_args();
            }

            protected boolean isOneway()
            {
                return false;
            }

            public createNFSStoragePool_result getResult(I iface, createNFSStoragePool_args args)
                throws org.apache.thrift.TException
            {
                createNFSStoragePool_result result = new createNFSStoragePool_result();
                try
                {
                    iface.createNFSStoragePool(args.name, args.host, args.dir, args.targetPath);
                }
                catch (LibvirtException libvirtException)
                {
                    result.libvirtException = libvirtException;
                }
                return result;
            }
        }

        public static class createDirStoragePool<I extends Iface>
            extends org.apache.thrift.ProcessFunction<I, createDirStoragePool_args>
        {
            public createDirStoragePool()
            {
                super("createDirStoragePool");
            }

            public createDirStoragePool_args getEmptyArgsInstance()
            {
                return new createDirStoragePool_args();
            }

            protected boolean isOneway()
            {
                return false;
            }

            public createDirStoragePool_result getResult(I iface, createDirStoragePool_args args)
                throws org.apache.thrift.TException
            {
                createDirStoragePool_result result = new createDirStoragePool_result();
                try
                {
                    iface.createDirStoragePool(args.name, args.targetPath);
                }
                catch (LibvirtException libvirtException)
                {
                    result.libvirtException = libvirtException;
                }
                return result;
            }
        }

        public static class createDisk<I extends Iface>
            extends org.apache.thrift.ProcessFunction<I, createDisk_args>
        {
            public createDisk()
            {
                super("createDisk");
            }

            public createDisk_args getEmptyArgsInstance()
            {
                return new createDisk_args();
            }

            protected boolean isOneway()
            {
                return false;
            }

            public createDisk_result getResult(I iface, createDisk_args args)
                throws org.apache.thrift.TException
            {
                createDisk_result result = new createDisk_result();
                try
                {
                    iface.createDisk(args.poolName, args.name, args.capacityInKb,
                        args.allocationInKb, args.format);
                }
                catch (LibvirtException libvirtException)
                {
                    result.libvirtException = libvirtException;
                }
                return result;
            }
        }

        public static class deleteDisk<I extends Iface>
            extends org.apache.thrift.ProcessFunction<I, deleteDisk_args>
        {
            public deleteDisk()
            {
                super("deleteDisk");
            }

            public deleteDisk_args getEmptyArgsInstance()
            {
                return new deleteDisk_args();
            }

            protected boolean isOneway()
            {
                return false;
            }

            public deleteDisk_result getResult(I iface, deleteDisk_args args)
                throws org.apache.thrift.TException
            {
                deleteDisk_result result = new deleteDisk_result();
                try
                {
                    iface.deleteDisk(args.poolName, args.name);
                }
                catch (LibvirtException libvirtException)
                {
                    result.libvirtException = libvirtException;
                }
                return result;
            }
        }

        public static class resizeVol<I extends Iface>
            extends org.apache.thrift.ProcessFunction<I, resizeVol_args>
        {
            public resizeVol()
            {
                super("resizeVol");
            }

            public resizeVol_args getEmptyArgsInstance()
            {
                return new resizeVol_args();
            }

            protected boolean isOneway()
            {
                return false;
            }

            public resizeVol_result getResult(I iface, resizeVol_args args)
                throws org.apache.thrift.TException
            {
                resizeVol_result result = new resizeVol_result();
                try
                {
                    iface.resizeVol(args.poolName, args.name, args.capacityInKb);
                }
                catch (LibvirtException libvirtException)
                {
                    result.libvirtException = libvirtException;
                }
                return result;
            }
        }

        public static class resizeDisk<I extends Iface>
            extends org.apache.thrift.ProcessFunction<I, resizeDisk_args>
        {
            public resizeDisk()
            {
                super("resizeDisk");
            }

            public resizeDisk_args getEmptyArgsInstance()
            {
                return new resizeDisk_args();
            }

            protected boolean isOneway()
            {
                return false;
            }

            public resizeDisk_result getResult(I iface, resizeDisk_args args)
                throws org.apache.thrift.TException
            {
                resizeDisk_result result = new resizeDisk_result();
                try
                {
                    iface.resizeDisk(args.domainName, args.diskPath, args.diskSizeInKb);
                }
                catch (LibvirtException libvirtException)
                {
                    result.libvirtException = libvirtException;
                }
                return result;
            }
        }

        public static class getDomainBlockInfo<I extends Iface>
            extends org.apache.thrift.ProcessFunction<I, getDomainBlockInfo_args>
        {
            public getDomainBlockInfo()
            {
                super("getDomainBlockInfo");
            }

            public getDomainBlockInfo_args getEmptyArgsInstance()
            {
                return new getDomainBlockInfo_args();
            }

            protected boolean isOneway()
            {
                return false;
            }

            public getDomainBlockInfo_result getResult(I iface, getDomainBlockInfo_args args)
                throws org.apache.thrift.TException
            {
                getDomainBlockInfo_result result = new getDomainBlockInfo_result();
                try
                {
                    result.success = iface.getDomainBlockInfo(args.domainName, args.diskPath);
                }
                catch (LibvirtException libvirtException)
                {
                    result.libvirtException = libvirtException;
                }
                return result;
            }
        }

        public static class getDatapoints<I extends Iface>
            extends org.apache.thrift.ProcessFunction<I, getDatapoints_args>
        {
            public getDatapoints()
            {
                super("getDatapoints");
            }

            public getDatapoints_args getEmptyArgsInstance()
            {
                return new getDatapoints_args();
            }

            protected boolean isOneway()
            {
                return false;
            }

            public getDatapoints_result getResult(I iface, getDatapoints_args args)
                throws org.apache.thrift.TException
            {
                getDatapoints_result result = new getDatapoints_result();
                result.success = iface.getDatapoints(args.domainName, args.timestamp);
                return result;
            }
        }

        public static class upload<I extends Iface>
            extends org.apache.thrift.ProcessFunction<I, upload_args>
        {
            public upload()
            {
                super("upload");
            }

            public upload_args getEmptyArgsInstance()
            {
                return new upload_args();
            }

            protected boolean isOneway()
            {
                return false;
            }

            public upload_result getResult(I iface, upload_args args)
                throws org.apache.thrift.TException
            {
                upload_result result = new upload_result();
                iface.upload(args.file, args.path);
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface>
        extends org.apache.thrift.TBaseAsyncProcessor<I>
    {
        private static final Logger LOGGER =
            LoggerFactory.getLogger(AsyncProcessor.class.getName());

        public AsyncProcessor(I iface)
        {
            super(iface, getProcessMap(
                new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ? >>()));
        }

        protected AsyncProcessor(I iface,
            Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ? >> processMap)
        {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ? >> getProcessMap(
            Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ? >> processMap)
        {
            processMap.put("checkRimpConfiguration", new checkRimpConfiguration());
            processMap.put("getDiskFileSize", new getDiskFileSize());
            processMap.put("getDatastores", new getDatastores());
            processMap.put("getNetInterfaces", new getNetInterfaces());
            processMap.put("copyFromRepositoryToDatastore", new copyFromRepositoryToDatastore());
            processMap.put("deleteVirtualImageFromDatastore",
                new deleteVirtualImageFromDatastore());
            processMap.put("copyFromDatastoreToRepository", new copyFromDatastoreToRepository());
            processMap.put("instanceDisk", new instanceDisk());
            processMap.put("renameDisk", new renameDisk());
            processMap.put("createVLAN", new createVLAN());
            processMap.put("deleteVLAN", new deleteVLAN());
            processMap.put("checkVLANConfiguration", new checkVLANConfiguration());
            processMap.put("getInitiatorIQN", new getInitiatorIQN());
            processMap.put("rescanISCSI", new rescanISCSI());
            processMap.put("getNodeInfo", new getNodeInfo());
            processMap.put("defineDomain", new defineDomain());
            processMap.put("undefineDomain", new undefineDomain());
            processMap.put("existDomain", new existDomain());
            processMap.put("getDomainState", new getDomainState());
            processMap.put("getDomainInfo", new getDomainInfo());
            processMap.put("getDomains", new getDomains());
            processMap.put("powerOn", new powerOn());
            processMap.put("powerOff", new powerOff());
            processMap.put("shutdown", new shutdown());
            processMap.put("reset", new reset());
            processMap.put("pause", new pause());
            processMap.put("resume", new resume());
            processMap.put("createISCSIStoragePool", new createISCSIStoragePool());
            processMap.put("createNFSStoragePool", new createNFSStoragePool());
            processMap.put("createDirStoragePool", new createDirStoragePool());
            processMap.put("createDisk", new createDisk());
            processMap.put("deleteDisk", new deleteDisk());
            processMap.put("resizeVol", new resizeVol());
            processMap.put("resizeDisk", new resizeDisk());
            processMap.put("getDomainBlockInfo", new getDomainBlockInfo());
            processMap.put("getDatapoints", new getDatapoints());
            processMap.put("upload", new upload());
            return processMap;
        }

        public static class checkRimpConfiguration<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, checkRimpConfiguration_args, Void>
        {
            public checkRimpConfiguration()
            {
                super("checkRimpConfiguration");
            }

            public checkRimpConfiguration_args getEmptyArgsInstance()
            {
                return new checkRimpConfiguration_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb,
                final int seqid)
            {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>()
                {
                    public void onComplete(Void o)
                    {
                        checkRimpConfiguration_result result = new checkRimpConfiguration_result();
                        try
                        {
                            fcall.sendResponse(fb, result,
                                org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e)
                    {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        checkRimpConfiguration_result result = new checkRimpConfiguration_result();
                        if (e instanceof RimpException)
                        {
                            result.re = (RimpException) e;
                            result.setReIsSet(true);
                            msg = result;
                        }
                        else
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg =
                                (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                    org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                    e.getMessage());
                        }
                        try
                        {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway()
            {
                return false;
            }

            public void start(I iface, checkRimpConfiguration_args args,
                org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException
            {
                iface.checkRimpConfiguration(resultHandler);
            }
        }

        public static class getDiskFileSize<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, getDiskFileSize_args, Long>
        {
            public getDiskFileSize()
            {
                super("getDiskFileSize");
            }

            public getDiskFileSize_args getEmptyArgsInstance()
            {
                return new getDiskFileSize_args();
            }

            public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb,
                final int seqid)
            {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Long>()
                {
                    public void onComplete(Long o)
                    {
                        getDiskFileSize_result result = new getDiskFileSize_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try
                        {
                            fcall.sendResponse(fb, result,
                                org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e)
                    {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getDiskFileSize_result result = new getDiskFileSize_result();
                        if (e instanceof RimpException)
                        {
                            result.re = (RimpException) e;
                            result.setReIsSet(true);
                            msg = result;
                        }
                        else
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg =
                                (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                    org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                    e.getMessage());
                        }
                        try
                        {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway()
            {
                return false;
            }

            public void start(I iface, getDiskFileSize_args args,
                org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException
            {
                iface.getDiskFileSize(args.virtualImageDatastorePath, resultHandler);
            }
        }

        public static class getDatastores<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, getDatastores_args, List<Datastore>>
        {
            public getDatastores()
            {
                super("getDatastores");
            }

            public getDatastores_args getEmptyArgsInstance()
            {
                return new getDatastores_args();
            }

            public AsyncMethodCallback<List<Datastore>> getResultHandler(final AsyncFrameBuffer fb,
                final int seqid)
            {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<List<Datastore>>()
                {
                    public void onComplete(List<Datastore> o)
                    {
                        getDatastores_result result = new getDatastores_result();
                        result.success = o;
                        try
                        {
                            fcall.sendResponse(fb, result,
                                org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e)
                    {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getDatastores_result result = new getDatastores_result();
                        if (e instanceof RimpException)
                        {
                            result.re = (RimpException) e;
                            result.setReIsSet(true);
                            msg = result;
                        }
                        else
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg =
                                (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                    org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                    e.getMessage());
                        }
                        try
                        {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway()
            {
                return false;
            }

            public void start(I iface, getDatastores_args args,
                org.apache.thrift.async.AsyncMethodCallback<List<Datastore>> resultHandler)
                throws TException
            {
                iface.getDatastores(resultHandler);
            }
        }

        public static class getNetInterfaces<I extends AsyncIface> extends
            org.apache.thrift.AsyncProcessFunction<I, getNetInterfaces_args, List<NetInterface>>
        {
            public getNetInterfaces()
            {
                super("getNetInterfaces");
            }

            public getNetInterfaces_args getEmptyArgsInstance()
            {
                return new getNetInterfaces_args();
            }

            public AsyncMethodCallback<List<NetInterface>> getResultHandler(
                final AsyncFrameBuffer fb, final int seqid)
            {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<List<NetInterface>>()
                {
                    public void onComplete(List<NetInterface> o)
                    {
                        getNetInterfaces_result result = new getNetInterfaces_result();
                        result.success = o;
                        try
                        {
                            fcall.sendResponse(fb, result,
                                org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e)
                    {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getNetInterfaces_result result = new getNetInterfaces_result();
                        if (e instanceof RimpException)
                        {
                            result.re = (RimpException) e;
                            result.setReIsSet(true);
                            msg = result;
                        }
                        else
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg =
                                (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                    org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                    e.getMessage());
                        }
                        try
                        {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway()
            {
                return false;
            }

            public void start(I iface, getNetInterfaces_args args,
                org.apache.thrift.async.AsyncMethodCallback<List<NetInterface>> resultHandler)
                throws TException
            {
                iface.getNetInterfaces(resultHandler);
            }
        }

        public static class copyFromRepositoryToDatastore<I extends AsyncIface> extends
            org.apache.thrift.AsyncProcessFunction<I, copyFromRepositoryToDatastore_args, Void>
        {
            public copyFromRepositoryToDatastore()
            {
                super("copyFromRepositoryToDatastore");
            }

            public copyFromRepositoryToDatastore_args getEmptyArgsInstance()
            {
                return new copyFromRepositoryToDatastore_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb,
                final int seqid)
            {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>()
                {
                    public void onComplete(Void o)
                    {
                        copyFromRepositoryToDatastore_result result =
                            new copyFromRepositoryToDatastore_result();
                        try
                        {
                            fcall.sendResponse(fb, result,
                                org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e)
                    {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        copyFromRepositoryToDatastore_result result =
                            new copyFromRepositoryToDatastore_result();
                        if (e instanceof RimpException)
                        {
                            result.re = (RimpException) e;
                            result.setReIsSet(true);
                            msg = result;
                        }
                        else
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg =
                                (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                    org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                    e.getMessage());
                        }
                        try
                        {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway()
            {
                return false;
            }

            public void start(I iface, copyFromRepositoryToDatastore_args args,
                org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException
            {
                iface.copyFromRepositoryToDatastore(args.virtualImageRepositoryPath,
                    args.datastorePath, args.virtualMachineUUID, resultHandler);
            }
        }

        public static class deleteVirtualImageFromDatastore<I extends AsyncIface> extends
            org.apache.thrift.AsyncProcessFunction<I, deleteVirtualImageFromDatastore_args, Void>
        {
            public deleteVirtualImageFromDatastore()
            {
                super("deleteVirtualImageFromDatastore");
            }

            public deleteVirtualImageFromDatastore_args getEmptyArgsInstance()
            {
                return new deleteVirtualImageFromDatastore_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb,
                final int seqid)
            {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>()
                {
                    public void onComplete(Void o)
                    {
                        deleteVirtualImageFromDatastore_result result =
                            new deleteVirtualImageFromDatastore_result();
                        try
                        {
                            fcall.sendResponse(fb, result,
                                org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e)
                    {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        deleteVirtualImageFromDatastore_result result =
                            new deleteVirtualImageFromDatastore_result();
                        if (e instanceof RimpException)
                        {
                            result.re = (RimpException) e;
                            result.setReIsSet(true);
                            msg = result;
                        }
                        else
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg =
                                (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                    org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                    e.getMessage());
                        }
                        try
                        {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway()
            {
                return false;
            }

            public void start(I iface, deleteVirtualImageFromDatastore_args args,
                org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException
            {
                iface.deleteVirtualImageFromDatastore(args.datastorePath, args.virtualMachineUUID,
                    resultHandler);
            }
        }

        public static class copyFromDatastoreToRepository<I extends AsyncIface> extends
            org.apache.thrift.AsyncProcessFunction<I, copyFromDatastoreToRepository_args, Void>
        {
            public copyFromDatastoreToRepository()
            {
                super("copyFromDatastoreToRepository");
            }

            public copyFromDatastoreToRepository_args getEmptyArgsInstance()
            {
                return new copyFromDatastoreToRepository_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb,
                final int seqid)
            {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>()
                {
                    public void onComplete(Void o)
                    {
                        copyFromDatastoreToRepository_result result =
                            new copyFromDatastoreToRepository_result();
                        try
                        {
                            fcall.sendResponse(fb, result,
                                org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e)
                    {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        copyFromDatastoreToRepository_result result =
                            new copyFromDatastoreToRepository_result();
                        if (e instanceof RimpException)
                        {
                            result.re = (RimpException) e;
                            result.setReIsSet(true);
                            msg = result;
                        }
                        else
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg =
                                (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                    org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                    e.getMessage());
                        }
                        try
                        {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway()
            {
                return false;
            }

            public void start(I iface, copyFromDatastoreToRepository_args args,
                org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException
            {
                iface.copyFromDatastoreToRepository(args.virtualMachineUUID, args.snapshot,
                    args.destinationRepositoryPath, args.sourceDatastorePath, resultHandler);
            }
        }

        public static class instanceDisk<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, instanceDisk_args, Void>
        {
            public instanceDisk()
            {
                super("instanceDisk");
            }

            public instanceDisk_args getEmptyArgsInstance()
            {
                return new instanceDisk_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb,
                final int seqid)
            {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>()
                {
                    public void onComplete(Void o)
                    {
                        instanceDisk_result result = new instanceDisk_result();
                        try
                        {
                            fcall.sendResponse(fb, result,
                                org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e)
                    {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        instanceDisk_result result = new instanceDisk_result();
                        if (e instanceof RimpException)
                        {
                            result.re = (RimpException) e;
                            result.setReIsSet(true);
                            msg = result;
                        }
                        else
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg =
                                (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                    org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                    e.getMessage());
                        }
                        try
                        {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway()
            {
                return false;
            }

            public void start(I iface, instanceDisk_args args,
                org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException
            {
                iface.instanceDisk(args.source, args.destination, resultHandler);
            }
        }

        public static class renameDisk<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, renameDisk_args, Void>
        {
            public renameDisk()
            {
                super("renameDisk");
            }

            public renameDisk_args getEmptyArgsInstance()
            {
                return new renameDisk_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb,
                final int seqid)
            {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>()
                {
                    public void onComplete(Void o)
                    {
                        renameDisk_result result = new renameDisk_result();
                        try
                        {
                            fcall.sendResponse(fb, result,
                                org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e)
                    {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        renameDisk_result result = new renameDisk_result();
                        if (e instanceof RimpException)
                        {
                            result.re = (RimpException) e;
                            result.setReIsSet(true);
                            msg = result;
                        }
                        else
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg =
                                (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                    org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                    e.getMessage());
                        }
                        try
                        {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway()
            {
                return false;
            }

            public void start(I iface, renameDisk_args args,
                org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException
            {
                iface.renameDisk(args.oldPath, args.newPath, resultHandler);
            }
        }

        public static class createVLAN<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, createVLAN_args, Void>
        {
            public createVLAN()
            {
                super("createVLAN");
            }

            public createVLAN_args getEmptyArgsInstance()
            {
                return new createVLAN_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb,
                final int seqid)
            {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>()
                {
                    public void onComplete(Void o)
                    {
                        createVLAN_result result = new createVLAN_result();
                        try
                        {
                            fcall.sendResponse(fb, result,
                                org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e)
                    {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        createVLAN_result result = new createVLAN_result();
                        if (e instanceof VLanException)
                        {
                            result.ve = (VLanException) e;
                            result.setVeIsSet(true);
                            msg = result;
                        }
                        else
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg =
                                (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                    org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                    e.getMessage());
                        }
                        try
                        {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway()
            {
                return false;
            }

            public void start(I iface, createVLAN_args args,
                org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException
            {
                iface.createVLAN(args.vlanTag, args.vlanInterface, args.bridgeInterface,
                    resultHandler);
            }
        }

        public static class deleteVLAN<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, deleteVLAN_args, Void>
        {
            public deleteVLAN()
            {
                super("deleteVLAN");
            }

            public deleteVLAN_args getEmptyArgsInstance()
            {
                return new deleteVLAN_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb,
                final int seqid)
            {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>()
                {
                    public void onComplete(Void o)
                    {
                        deleteVLAN_result result = new deleteVLAN_result();
                        try
                        {
                            fcall.sendResponse(fb, result,
                                org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e)
                    {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        deleteVLAN_result result = new deleteVLAN_result();
                        if (e instanceof VLanException)
                        {
                            result.ve = (VLanException) e;
                            result.setVeIsSet(true);
                            msg = result;
                        }
                        else
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg =
                                (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                    org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                    e.getMessage());
                        }
                        try
                        {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway()
            {
                return false;
            }

            public void start(I iface, deleteVLAN_args args,
                org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException
            {
                iface.deleteVLAN(args.vlanTag, args.vlanInterface, args.bridgeInterface,
                    resultHandler);
            }
        }

        public static class checkVLANConfiguration<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, checkVLANConfiguration_args, Void>
        {
            public checkVLANConfiguration()
            {
                super("checkVLANConfiguration");
            }

            public checkVLANConfiguration_args getEmptyArgsInstance()
            {
                return new checkVLANConfiguration_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb,
                final int seqid)
            {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>()
                {
                    public void onComplete(Void o)
                    {
                        checkVLANConfiguration_result result = new checkVLANConfiguration_result();
                        try
                        {
                            fcall.sendResponse(fb, result,
                                org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e)
                    {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        checkVLANConfiguration_result result = new checkVLANConfiguration_result();
                        if (e instanceof VLanException)
                        {
                            result.ve = (VLanException) e;
                            result.setVeIsSet(true);
                            msg = result;
                        }
                        else
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg =
                                (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                    org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                    e.getMessage());
                        }
                        try
                        {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway()
            {
                return false;
            }

            public void start(I iface, checkVLANConfiguration_args args,
                org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException
            {
                iface.checkVLANConfiguration(resultHandler);
            }
        }

        public static class getInitiatorIQN<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, getInitiatorIQN_args, String>
        {
            public getInitiatorIQN()
            {
                super("getInitiatorIQN");
            }

            public getInitiatorIQN_args getEmptyArgsInstance()
            {
                return new getInitiatorIQN_args();
            }

            public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb,
                final int seqid)
            {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<String>()
                {
                    public void onComplete(String o)
                    {
                        getInitiatorIQN_result result = new getInitiatorIQN_result();
                        result.success = o;
                        try
                        {
                            fcall.sendResponse(fb, result,
                                org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e)
                    {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getInitiatorIQN_result result = new getInitiatorIQN_result();
                        if (e instanceof StorageException)
                        {
                            result.se = (StorageException) e;
                            result.setSeIsSet(true);
                            msg = result;
                        }
                        else
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg =
                                (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                    org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                    e.getMessage());
                        }
                        try
                        {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway()
            {
                return false;
            }

            public void start(I iface, getInitiatorIQN_args args,
                org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException
            {
                iface.getInitiatorIQN(resultHandler);
            }
        }

        public static class rescanISCSI<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, rescanISCSI_args, Void>
        {
            public rescanISCSI()
            {
                super("rescanISCSI");
            }

            public rescanISCSI_args getEmptyArgsInstance()
            {
                return new rescanISCSI_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb,
                final int seqid)
            {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>()
                {
                    public void onComplete(Void o)
                    {
                        rescanISCSI_result result = new rescanISCSI_result();
                        try
                        {
                            fcall.sendResponse(fb, result,
                                org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e)
                    {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        rescanISCSI_result result = new rescanISCSI_result();
                        if (e instanceof StorageException)
                        {
                            result.se = (StorageException) e;
                            result.setSeIsSet(true);
                            msg = result;
                        }
                        else
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg =
                                (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                    org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                    e.getMessage());
                        }
                        try
                        {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway()
            {
                return false;
            }

            public void start(I iface, rescanISCSI_args args,
                org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException
            {
                iface.rescanISCSI(args.targets, resultHandler);
            }
        }

        public static class getNodeInfo<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, getNodeInfo_args, NodeInfo>
        {
            public getNodeInfo()
            {
                super("getNodeInfo");
            }

            public getNodeInfo_args getEmptyArgsInstance()
            {
                return new getNodeInfo_args();
            }

            public AsyncMethodCallback<NodeInfo> getResultHandler(final AsyncFrameBuffer fb,
                final int seqid)
            {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<NodeInfo>()
                {
                    public void onComplete(NodeInfo o)
                    {
                        getNodeInfo_result result = new getNodeInfo_result();
                        result.success = o;
                        try
                        {
                            fcall.sendResponse(fb, result,
                                org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e)
                    {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getNodeInfo_result result = new getNodeInfo_result();
                        if (e instanceof LibvirtException)
                        {
                            result.libvirtException = (LibvirtException) e;
                            result.setLibvirtExceptionIsSet(true);
                            msg = result;
                        }
                        else
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg =
                                (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                    org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                    e.getMessage());
                        }
                        try
                        {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway()
            {
                return false;
            }

            public void start(I iface, getNodeInfo_args args,
                org.apache.thrift.async.AsyncMethodCallback<NodeInfo> resultHandler)
                throws TException
            {
                iface.getNodeInfo(resultHandler);
            }
        }

        public static class defineDomain<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, defineDomain_args, Void>
        {
            public defineDomain()
            {
                super("defineDomain");
            }

            public defineDomain_args getEmptyArgsInstance()
            {
                return new defineDomain_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb,
                final int seqid)
            {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>()
                {
                    public void onComplete(Void o)
                    {
                        defineDomain_result result = new defineDomain_result();
                        try
                        {
                            fcall.sendResponse(fb, result,
                                org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e)
                    {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        defineDomain_result result = new defineDomain_result();
                        if (e instanceof LibvirtException)
                        {
                            result.libvirtException = (LibvirtException) e;
                            result.setLibvirtExceptionIsSet(true);
                            msg = result;
                        }
                        else
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg =
                                (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                    org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                    e.getMessage());
                        }
                        try
                        {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway()
            {
                return false;
            }

            public void start(I iface, defineDomain_args args,
                org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException
            {
                iface.defineDomain(args.xmlDesc, resultHandler);
            }
        }

        public static class undefineDomain<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, undefineDomain_args, Void>
        {
            public undefineDomain()
            {
                super("undefineDomain");
            }

            public undefineDomain_args getEmptyArgsInstance()
            {
                return new undefineDomain_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb,
                final int seqid)
            {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>()
                {
                    public void onComplete(Void o)
                    {
                        undefineDomain_result result = new undefineDomain_result();
                        try
                        {
                            fcall.sendResponse(fb, result,
                                org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e)
                    {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        undefineDomain_result result = new undefineDomain_result();
                        if (e instanceof LibvirtException)
                        {
                            result.libvirtException = (LibvirtException) e;
                            result.setLibvirtExceptionIsSet(true);
                            msg = result;
                        }
                        else
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg =
                                (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                    org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                    e.getMessage());
                        }
                        try
                        {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway()
            {
                return false;
            }

            public void start(I iface, undefineDomain_args args,
                org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException
            {
                iface.undefineDomain(args.domainName, resultHandler);
            }
        }

        public static class existDomain<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, existDomain_args, Boolean>
        {
            public existDomain()
            {
                super("existDomain");
            }

            public existDomain_args getEmptyArgsInstance()
            {
                return new existDomain_args();
            }

            public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb,
                final int seqid)
            {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Boolean>()
                {
                    public void onComplete(Boolean o)
                    {
                        existDomain_result result = new existDomain_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try
                        {
                            fcall.sendResponse(fb, result,
                                org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e)
                    {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        existDomain_result result = new existDomain_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg =
                                (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                    org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                    e.getMessage());
                        }
                        try
                        {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway()
            {
                return false;
            }

            public void start(I iface, existDomain_args args,
                org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler)
                throws TException
            {
                iface.existDomain(args.domainName, resultHandler);
            }
        }

        public static class getDomainState<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, getDomainState_args, DomainState>
        {
            public getDomainState()
            {
                super("getDomainState");
            }

            public getDomainState_args getEmptyArgsInstance()
            {
                return new getDomainState_args();
            }

            public AsyncMethodCallback<DomainState> getResultHandler(final AsyncFrameBuffer fb,
                final int seqid)
            {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<DomainState>()
                {
                    public void onComplete(DomainState o)
                    {
                        getDomainState_result result = new getDomainState_result();
                        result.success = o;
                        try
                        {
                            fcall.sendResponse(fb, result,
                                org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e)
                    {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getDomainState_result result = new getDomainState_result();
                        if (e instanceof LibvirtException)
                        {
                            result.libvirtException = (LibvirtException) e;
                            result.setLibvirtExceptionIsSet(true);
                            msg = result;
                        }
                        else
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg =
                                (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                    org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                    e.getMessage());
                        }
                        try
                        {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway()
            {
                return false;
            }

            public void start(I iface, getDomainState_args args,
                org.apache.thrift.async.AsyncMethodCallback<DomainState> resultHandler)
                throws TException
            {
                iface.getDomainState(args.domainName, resultHandler);
            }
        }

        public static class getDomainInfo<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, getDomainInfo_args, DomainInfo>
        {
            public getDomainInfo()
            {
                super("getDomainInfo");
            }

            public getDomainInfo_args getEmptyArgsInstance()
            {
                return new getDomainInfo_args();
            }

            public AsyncMethodCallback<DomainInfo> getResultHandler(final AsyncFrameBuffer fb,
                final int seqid)
            {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<DomainInfo>()
                {
                    public void onComplete(DomainInfo o)
                    {
                        getDomainInfo_result result = new getDomainInfo_result();
                        result.success = o;
                        try
                        {
                            fcall.sendResponse(fb, result,
                                org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e)
                    {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getDomainInfo_result result = new getDomainInfo_result();
                        if (e instanceof LibvirtException)
                        {
                            result.libvirtException = (LibvirtException) e;
                            result.setLibvirtExceptionIsSet(true);
                            msg = result;
                        }
                        else
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg =
                                (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                    org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                    e.getMessage());
                        }
                        try
                        {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway()
            {
                return false;
            }

            public void start(I iface, getDomainInfo_args args,
                org.apache.thrift.async.AsyncMethodCallback<DomainInfo> resultHandler)
                throws TException
            {
                iface.getDomainInfo(args.domainName, resultHandler);
            }
        }

        public static class getDomains<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, getDomains_args, List<DomainInfo>>
        {
            public getDomains()
            {
                super("getDomains");
            }

            public getDomains_args getEmptyArgsInstance()
            {
                return new getDomains_args();
            }

            public AsyncMethodCallback<List<DomainInfo>> getResultHandler(final AsyncFrameBuffer fb,
                final int seqid)
            {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<List<DomainInfo>>()
                {
                    public void onComplete(List<DomainInfo> o)
                    {
                        getDomains_result result = new getDomains_result();
                        result.success = o;
                        try
                        {
                            fcall.sendResponse(fb, result,
                                org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e)
                    {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getDomains_result result = new getDomains_result();
                        if (e instanceof LibvirtException)
                        {
                            result.libvirtException = (LibvirtException) e;
                            result.setLibvirtExceptionIsSet(true);
                            msg = result;
                        }
                        else
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg =
                                (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                    org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                    e.getMessage());
                        }
                        try
                        {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway()
            {
                return false;
            }

            public void start(I iface, getDomains_args args,
                org.apache.thrift.async.AsyncMethodCallback<List<DomainInfo>> resultHandler)
                throws TException
            {
                iface.getDomains(resultHandler);
            }
        }

        public static class powerOn<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, powerOn_args, Void>
        {
            public powerOn()
            {
                super("powerOn");
            }

            public powerOn_args getEmptyArgsInstance()
            {
                return new powerOn_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb,
                final int seqid)
            {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>()
                {
                    public void onComplete(Void o)
                    {
                        powerOn_result result = new powerOn_result();
                        try
                        {
                            fcall.sendResponse(fb, result,
                                org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e)
                    {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        powerOn_result result = new powerOn_result();
                        if (e instanceof LibvirtException)
                        {
                            result.libvirtException = (LibvirtException) e;
                            result.setLibvirtExceptionIsSet(true);
                            msg = result;
                        }
                        else
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg =
                                (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                    org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                    e.getMessage());
                        }
                        try
                        {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway()
            {
                return false;
            }

            public void start(I iface, powerOn_args args,
                org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException
            {
                iface.powerOn(args.domainName, resultHandler);
            }
        }

        public static class powerOff<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, powerOff_args, Void>
        {
            public powerOff()
            {
                super("powerOff");
            }

            public powerOff_args getEmptyArgsInstance()
            {
                return new powerOff_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb,
                final int seqid)
            {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>()
                {
                    public void onComplete(Void o)
                    {
                        powerOff_result result = new powerOff_result();
                        try
                        {
                            fcall.sendResponse(fb, result,
                                org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e)
                    {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        powerOff_result result = new powerOff_result();
                        if (e instanceof LibvirtException)
                        {
                            result.libvirtException = (LibvirtException) e;
                            result.setLibvirtExceptionIsSet(true);
                            msg = result;
                        }
                        else
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg =
                                (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                    org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                    e.getMessage());
                        }
                        try
                        {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway()
            {
                return false;
            }

            public void start(I iface, powerOff_args args,
                org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException
            {
                iface.powerOff(args.domainName, resultHandler);
            }
        }

        public static class shutdown<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, shutdown_args, Void>
        {
            public shutdown()
            {
                super("shutdown");
            }

            public shutdown_args getEmptyArgsInstance()
            {
                return new shutdown_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb,
                final int seqid)
            {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>()
                {
                    public void onComplete(Void o)
                    {
                        shutdown_result result = new shutdown_result();
                        try
                        {
                            fcall.sendResponse(fb, result,
                                org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e)
                    {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        shutdown_result result = new shutdown_result();
                        if (e instanceof LibvirtException)
                        {
                            result.libvirtException = (LibvirtException) e;
                            result.setLibvirtExceptionIsSet(true);
                            msg = result;
                        }
                        else
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg =
                                (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                    org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                    e.getMessage());
                        }
                        try
                        {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway()
            {
                return false;
            }

            public void start(I iface, shutdown_args args,
                org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException
            {
                iface.shutdown(args.domainName, resultHandler);
            }
        }

        public static class reset<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, reset_args, Void>
        {
            public reset()
            {
                super("reset");
            }

            public reset_args getEmptyArgsInstance()
            {
                return new reset_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb,
                final int seqid)
            {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>()
                {
                    public void onComplete(Void o)
                    {
                        reset_result result = new reset_result();
                        try
                        {
                            fcall.sendResponse(fb, result,
                                org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e)
                    {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        reset_result result = new reset_result();
                        if (e instanceof LibvirtException)
                        {
                            result.libvirtException = (LibvirtException) e;
                            result.setLibvirtExceptionIsSet(true);
                            msg = result;
                        }
                        else
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg =
                                (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                    org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                    e.getMessage());
                        }
                        try
                        {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway()
            {
                return false;
            }

            public void start(I iface, reset_args args,
                org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException
            {
                iface.reset(args.domainName, resultHandler);
            }
        }

        public static class pause<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, pause_args, Void>
        {
            public pause()
            {
                super("pause");
            }

            public pause_args getEmptyArgsInstance()
            {
                return new pause_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb,
                final int seqid)
            {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>()
                {
                    public void onComplete(Void o)
                    {
                        pause_result result = new pause_result();
                        try
                        {
                            fcall.sendResponse(fb, result,
                                org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e)
                    {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        pause_result result = new pause_result();
                        if (e instanceof LibvirtException)
                        {
                            result.libvirtException = (LibvirtException) e;
                            result.setLibvirtExceptionIsSet(true);
                            msg = result;
                        }
                        else
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg =
                                (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                    org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                    e.getMessage());
                        }
                        try
                        {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway()
            {
                return false;
            }

            public void start(I iface, pause_args args,
                org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException
            {
                iface.pause(args.domainName, resultHandler);
            }
        }

        public static class resume<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, resume_args, Void>
        {
            public resume()
            {
                super("resume");
            }

            public resume_args getEmptyArgsInstance()
            {
                return new resume_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb,
                final int seqid)
            {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>()
                {
                    public void onComplete(Void o)
                    {
                        resume_result result = new resume_result();
                        try
                        {
                            fcall.sendResponse(fb, result,
                                org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e)
                    {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        resume_result result = new resume_result();
                        if (e instanceof LibvirtException)
                        {
                            result.libvirtException = (LibvirtException) e;
                            result.setLibvirtExceptionIsSet(true);
                            msg = result;
                        }
                        else
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg =
                                (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                    org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                    e.getMessage());
                        }
                        try
                        {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway()
            {
                return false;
            }

            public void start(I iface, resume_args args,
                org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException
            {
                iface.resume(args.domainName, resultHandler);
            }
        }

        public static class createISCSIStoragePool<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, createISCSIStoragePool_args, Void>
        {
            public createISCSIStoragePool()
            {
                super("createISCSIStoragePool");
            }

            public createISCSIStoragePool_args getEmptyArgsInstance()
            {
                return new createISCSIStoragePool_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb,
                final int seqid)
            {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>()
                {
                    public void onComplete(Void o)
                    {
                        createISCSIStoragePool_result result = new createISCSIStoragePool_result();
                        try
                        {
                            fcall.sendResponse(fb, result,
                                org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e)
                    {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        createISCSIStoragePool_result result = new createISCSIStoragePool_result();
                        if (e instanceof LibvirtException)
                        {
                            result.libvirtException = (LibvirtException) e;
                            result.setLibvirtExceptionIsSet(true);
                            msg = result;
                        }
                        else
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg =
                                (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                    org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                    e.getMessage());
                        }
                        try
                        {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway()
            {
                return false;
            }

            public void start(I iface, createISCSIStoragePool_args args,
                org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException
            {
                iface.createISCSIStoragePool(args.name, args.host, args.iqn, args.targetPath,
                    resultHandler);
            }
        }

        public static class createNFSStoragePool<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, createNFSStoragePool_args, Void>
        {
            public createNFSStoragePool()
            {
                super("createNFSStoragePool");
            }

            public createNFSStoragePool_args getEmptyArgsInstance()
            {
                return new createNFSStoragePool_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb,
                final int seqid)
            {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>()
                {
                    public void onComplete(Void o)
                    {
                        createNFSStoragePool_result result = new createNFSStoragePool_result();
                        try
                        {
                            fcall.sendResponse(fb, result,
                                org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e)
                    {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        createNFSStoragePool_result result = new createNFSStoragePool_result();
                        if (e instanceof LibvirtException)
                        {
                            result.libvirtException = (LibvirtException) e;
                            result.setLibvirtExceptionIsSet(true);
                            msg = result;
                        }
                        else
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg =
                                (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                    org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                    e.getMessage());
                        }
                        try
                        {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway()
            {
                return false;
            }

            public void start(I iface, createNFSStoragePool_args args,
                org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException
            {
                iface.createNFSStoragePool(args.name, args.host, args.dir, args.targetPath,
                    resultHandler);
            }
        }

        public static class createDirStoragePool<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, createDirStoragePool_args, Void>
        {
            public createDirStoragePool()
            {
                super("createDirStoragePool");
            }

            public createDirStoragePool_args getEmptyArgsInstance()
            {
                return new createDirStoragePool_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb,
                final int seqid)
            {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>()
                {
                    public void onComplete(Void o)
                    {
                        createDirStoragePool_result result = new createDirStoragePool_result();
                        try
                        {
                            fcall.sendResponse(fb, result,
                                org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e)
                    {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        createDirStoragePool_result result = new createDirStoragePool_result();
                        if (e instanceof LibvirtException)
                        {
                            result.libvirtException = (LibvirtException) e;
                            result.setLibvirtExceptionIsSet(true);
                            msg = result;
                        }
                        else
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg =
                                (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                    org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                    e.getMessage());
                        }
                        try
                        {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway()
            {
                return false;
            }

            public void start(I iface, createDirStoragePool_args args,
                org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException
            {
                iface.createDirStoragePool(args.name, args.targetPath, resultHandler);
            }
        }

        public static class createDisk<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, createDisk_args, Void>
        {
            public createDisk()
            {
                super("createDisk");
            }

            public createDisk_args getEmptyArgsInstance()
            {
                return new createDisk_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb,
                final int seqid)
            {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>()
                {
                    public void onComplete(Void o)
                    {
                        createDisk_result result = new createDisk_result();
                        try
                        {
                            fcall.sendResponse(fb, result,
                                org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e)
                    {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        createDisk_result result = new createDisk_result();
                        if (e instanceof LibvirtException)
                        {
                            result.libvirtException = (LibvirtException) e;
                            result.setLibvirtExceptionIsSet(true);
                            msg = result;
                        }
                        else
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg =
                                (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                    org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                    e.getMessage());
                        }
                        try
                        {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway()
            {
                return false;
            }

            public void start(I iface, createDisk_args args,
                org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException
            {
                iface.createDisk(args.poolName, args.name, args.capacityInKb, args.allocationInKb,
                    args.format, resultHandler);
            }
        }

        public static class deleteDisk<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, deleteDisk_args, Void>
        {
            public deleteDisk()
            {
                super("deleteDisk");
            }

            public deleteDisk_args getEmptyArgsInstance()
            {
                return new deleteDisk_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb,
                final int seqid)
            {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>()
                {
                    public void onComplete(Void o)
                    {
                        deleteDisk_result result = new deleteDisk_result();
                        try
                        {
                            fcall.sendResponse(fb, result,
                                org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e)
                    {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        deleteDisk_result result = new deleteDisk_result();
                        if (e instanceof LibvirtException)
                        {
                            result.libvirtException = (LibvirtException) e;
                            result.setLibvirtExceptionIsSet(true);
                            msg = result;
                        }
                        else
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg =
                                (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                    org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                    e.getMessage());
                        }
                        try
                        {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway()
            {
                return false;
            }

            public void start(I iface, deleteDisk_args args,
                org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException
            {
                iface.deleteDisk(args.poolName, args.name, resultHandler);
            }
        }

        public static class resizeVol<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, resizeVol_args, Void>
        {
            public resizeVol()
            {
                super("resizeVol");
            }

            public resizeVol_args getEmptyArgsInstance()
            {
                return new resizeVol_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb,
                final int seqid)
            {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>()
                {
                    public void onComplete(Void o)
                    {
                        resizeVol_result result = new resizeVol_result();
                        try
                        {
                            fcall.sendResponse(fb, result,
                                org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e)
                    {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        resizeVol_result result = new resizeVol_result();
                        if (e instanceof LibvirtException)
                        {
                            result.libvirtException = (LibvirtException) e;
                            result.setLibvirtExceptionIsSet(true);
                            msg = result;
                        }
                        else
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg =
                                (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                    org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                    e.getMessage());
                        }
                        try
                        {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway()
            {
                return false;
            }

            public void start(I iface, resizeVol_args args,
                org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException
            {
                iface.resizeVol(args.poolName, args.name, args.capacityInKb, resultHandler);
            }
        }

        public static class resizeDisk<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, resizeDisk_args, Void>
        {
            public resizeDisk()
            {
                super("resizeDisk");
            }

            public resizeDisk_args getEmptyArgsInstance()
            {
                return new resizeDisk_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb,
                final int seqid)
            {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>()
                {
                    public void onComplete(Void o)
                    {
                        resizeDisk_result result = new resizeDisk_result();
                        try
                        {
                            fcall.sendResponse(fb, result,
                                org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e)
                    {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        resizeDisk_result result = new resizeDisk_result();
                        if (e instanceof LibvirtException)
                        {
                            result.libvirtException = (LibvirtException) e;
                            result.setLibvirtExceptionIsSet(true);
                            msg = result;
                        }
                        else
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg =
                                (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                    org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                    e.getMessage());
                        }
                        try
                        {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway()
            {
                return false;
            }

            public void start(I iface, resizeDisk_args args,
                org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException
            {
                iface.resizeDisk(args.domainName, args.diskPath, args.diskSizeInKb, resultHandler);
            }
        }

        public static class getDomainBlockInfo<I extends AsyncIface> extends
            org.apache.thrift.AsyncProcessFunction<I, getDomainBlockInfo_args, DomainBlockInfo>
        {
            public getDomainBlockInfo()
            {
                super("getDomainBlockInfo");
            }

            public getDomainBlockInfo_args getEmptyArgsInstance()
            {
                return new getDomainBlockInfo_args();
            }

            public AsyncMethodCallback<DomainBlockInfo> getResultHandler(final AsyncFrameBuffer fb,
                final int seqid)
            {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<DomainBlockInfo>()
                {
                    public void onComplete(DomainBlockInfo o)
                    {
                        getDomainBlockInfo_result result = new getDomainBlockInfo_result();
                        result.success = o;
                        try
                        {
                            fcall.sendResponse(fb, result,
                                org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e)
                    {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getDomainBlockInfo_result result = new getDomainBlockInfo_result();
                        if (e instanceof LibvirtException)
                        {
                            result.libvirtException = (LibvirtException) e;
                            result.setLibvirtExceptionIsSet(true);
                            msg = result;
                        }
                        else
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg =
                                (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                    org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                    e.getMessage());
                        }
                        try
                        {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway()
            {
                return false;
            }

            public void start(I iface, getDomainBlockInfo_args args,
                org.apache.thrift.async.AsyncMethodCallback<DomainBlockInfo> resultHandler)
                throws TException
            {
                iface.getDomainBlockInfo(args.domainName, args.diskPath, resultHandler);
            }
        }

        public static class getDatapoints<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, getDatapoints_args, List<Measure>>
        {
            public getDatapoints()
            {
                super("getDatapoints");
            }

            public getDatapoints_args getEmptyArgsInstance()
            {
                return new getDatapoints_args();
            }

            public AsyncMethodCallback<List<Measure>> getResultHandler(final AsyncFrameBuffer fb,
                final int seqid)
            {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<List<Measure>>()
                {
                    public void onComplete(List<Measure> o)
                    {
                        getDatapoints_result result = new getDatapoints_result();
                        result.success = o;
                        try
                        {
                            fcall.sendResponse(fb, result,
                                org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e)
                    {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        getDatapoints_result result = new getDatapoints_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg =
                                (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                    org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                    e.getMessage());
                        }
                        try
                        {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway()
            {
                return false;
            }

            public void start(I iface, getDatapoints_args args,
                org.apache.thrift.async.AsyncMethodCallback<List<Measure>> resultHandler)
                throws TException
            {
                iface.getDatapoints(args.domainName, args.timestamp, resultHandler);
            }
        }

        public static class upload<I extends AsyncIface>
            extends org.apache.thrift.AsyncProcessFunction<I, upload_args, Void>
        {
            public upload()
            {
                super("upload");
            }

            public upload_args getEmptyArgsInstance()
            {
                return new upload_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb,
                final int seqid)
            {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>()
                {
                    public void onComplete(Void o)
                    {
                        upload_result result = new upload_result();
                        try
                        {
                            fcall.sendResponse(fb, result,
                                org.apache.thrift.protocol.TMessageType.REPLY, seqid);
                            return;
                        }
                        catch (Exception e)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }

                    public void onError(Exception e)
                    {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        upload_result result = new upload_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg =
                                (org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
                                    org.apache.thrift.TApplicationException.INTERNAL_ERROR,
                                    e.getMessage());
                        }
                        try
                        {
                            fcall.sendResponse(fb, msg, msgType, seqid);
                            return;
                        }
                        catch (Exception ex)
                        {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway()
            {
                return false;
            }

            public void start(I iface, upload_args args,
                org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException
            {
                iface.upload(args.file, args.path, resultHandler);
            }
        }

    }

    public static class checkRimpConfiguration_args implements
        org.apache.thrift.TBase<checkRimpConfiguration_args, checkRimpConfiguration_args._Fields>,
        java.io.Serializable, Cloneable, Comparable<checkRimpConfiguration_args>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("checkRimpConfiguration_args");

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class,
                new checkRimpConfiguration_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new checkRimpConfiguration_argsTupleSchemeFactory());
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData
                .addStructMetaDataMap(checkRimpConfiguration_args.class, metaDataMap);
        }

        public checkRimpConfiguration_args()
        {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public checkRimpConfiguration_args(checkRimpConfiguration_args other)
        {
        }

        public checkRimpConfiguration_args deepCopy()
        {
            return new checkRimpConfiguration_args(this);
        }

        @Override
        public void clear()
        {
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof checkRimpConfiguration_args)
                return this.equals((checkRimpConfiguration_args) that);
            return false;
        }

        public boolean equals(checkRimpConfiguration_args that)
        {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(checkRimpConfiguration_args other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("checkRimpConfiguration_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class checkRimpConfiguration_argsStandardSchemeFactory
            implements SchemeFactory
        {
            public checkRimpConfiguration_argsStandardScheme getScheme()
            {
                return new checkRimpConfiguration_argsStandardScheme();
            }
        }

        private static class checkRimpConfiguration_argsStandardScheme
            extends StandardScheme<checkRimpConfiguration_args>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot,
                checkRimpConfiguration_args struct) throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                checkRimpConfiguration_args struct) throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class checkRimpConfiguration_argsTupleSchemeFactory implements SchemeFactory
        {
            public checkRimpConfiguration_argsTupleScheme getScheme()
            {
                return new checkRimpConfiguration_argsTupleScheme();
            }
        }

        private static class checkRimpConfiguration_argsTupleScheme
            extends TupleScheme<checkRimpConfiguration_args>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot,
                checkRimpConfiguration_args struct) throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot,
                checkRimpConfiguration_args struct) throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class checkRimpConfiguration_result implements
        org.apache.thrift.TBase<checkRimpConfiguration_result, checkRimpConfiguration_result._Fields>,
        java.io.Serializable, Cloneable, Comparable<checkRimpConfiguration_result>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("checkRimpConfiguration_result");

        private static final org.apache.thrift.protocol.TField RE_FIELD_DESC =
            new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT,
                (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class,
                new checkRimpConfiguration_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new checkRimpConfiguration_resultTupleSchemeFactory());
        }

        public RimpException re; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            RE((short) 1, "re");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // RE
                        return RE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.RE,
                new org.apache.thrift.meta_data.FieldMetaData("re",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData
                .addStructMetaDataMap(checkRimpConfiguration_result.class, metaDataMap);
        }

        public checkRimpConfiguration_result()
        {
        }

        public checkRimpConfiguration_result(RimpException re)
        {
            this();
            this.re = re;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public checkRimpConfiguration_result(checkRimpConfiguration_result other)
        {
            if (other.isSetRe())
            {
                this.re = new RimpException(other.re);
            }
        }

        public checkRimpConfiguration_result deepCopy()
        {
            return new checkRimpConfiguration_result(this);
        }

        @Override
        public void clear()
        {
            this.re = null;
        }

        public RimpException getRe()
        {
            return this.re;
        }

        public checkRimpConfiguration_result setRe(RimpException re)
        {
            this.re = re;
            return this;
        }

        public void unsetRe()
        {
            this.re = null;
        }

        /** Returns true if field re is set (has been assigned a value) and false otherwise */
        public boolean isSetRe()
        {
            return this.re != null;
        }

        public void setReIsSet(boolean value)
        {
            if (!value)
            {
                this.re = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case RE:
                    if (value == null)
                    {
                        unsetRe();
                    }
                    else
                    {
                        setRe((RimpException) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case RE:
                    return getRe();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case RE:
                    return isSetRe();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof checkRimpConfiguration_result)
                return this.equals((checkRimpConfiguration_result) that);
            return false;
        }

        public boolean equals(checkRimpConfiguration_result that)
        {
            if (that == null)
                return false;

            boolean this_present_re = true && this.isSetRe();
            boolean that_present_re = true && that.isSetRe();
            if (this_present_re || that_present_re)
            {
                if (!(this_present_re && that_present_re))
                    return false;
                if (!this.re.equals(that.re))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_re = true && (isSetRe());
            list.add(present_re);
            if (present_re)
                list.add(re);

            return list.hashCode();
        }

        @Override
        public int compareTo(checkRimpConfiguration_result other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetRe())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("checkRimpConfiguration_result(");
            boolean first = true;

            sb.append("re:");
            if (this.re == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.re);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class checkRimpConfiguration_resultStandardSchemeFactory
            implements SchemeFactory
        {
            public checkRimpConfiguration_resultStandardScheme getScheme()
            {
                return new checkRimpConfiguration_resultStandardScheme();
            }
        }

        private static class checkRimpConfiguration_resultStandardScheme
            extends StandardScheme<checkRimpConfiguration_result>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot,
                checkRimpConfiguration_result struct) throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // RE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT)
                            {
                                struct.re = new RimpException();
                                struct.re.read(iprot);
                                struct.setReIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                checkRimpConfiguration_result struct) throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.re != null)
                {
                    oprot.writeFieldBegin(RE_FIELD_DESC);
                    struct.re.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class checkRimpConfiguration_resultTupleSchemeFactory
            implements SchemeFactory
        {
            public checkRimpConfiguration_resultTupleScheme getScheme()
            {
                return new checkRimpConfiguration_resultTupleScheme();
            }
        }

        private static class checkRimpConfiguration_resultTupleScheme
            extends TupleScheme<checkRimpConfiguration_result>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot,
                checkRimpConfiguration_result struct) throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetRe())
                {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetRe())
                {
                    struct.re.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot,
                checkRimpConfiguration_result struct) throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0))
                {
                    struct.re = new RimpException();
                    struct.re.read(iprot);
                    struct.setReIsSet(true);
                }
            }
        }

    }

    public static class getDiskFileSize_args
        implements org.apache.thrift.TBase<getDiskFileSize_args, getDiskFileSize_args._Fields>,
        java.io.Serializable, Cloneable, Comparable<getDiskFileSize_args>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("getDiskFileSize_args");

        private static final org.apache.thrift.protocol.TField VIRTUAL_IMAGE_DATASTORE_PATH_FIELD_DESC =
            new org.apache.thrift.protocol.TField("virtualImageDatastorePath",
                org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new getDiskFileSize_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getDiskFileSize_argsTupleSchemeFactory());
        }

        public String virtualImageDatastorePath; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            VIRTUAL_IMAGE_DATASTORE_PATH((short) 1, "virtualImageDatastorePath");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // VIRTUAL_IMAGE_DATASTORE_PATH
                        return VIRTUAL_IMAGE_DATASTORE_PATH;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.VIRTUAL_IMAGE_DATASTORE_PATH,
                new org.apache.thrift.meta_data.FieldMetaData("virtualImageDatastorePath",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData
                .addStructMetaDataMap(getDiskFileSize_args.class, metaDataMap);
        }

        public getDiskFileSize_args()
        {
        }

        public getDiskFileSize_args(String virtualImageDatastorePath)
        {
            this();
            this.virtualImageDatastorePath = virtualImageDatastorePath;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getDiskFileSize_args(getDiskFileSize_args other)
        {
            if (other.isSetVirtualImageDatastorePath())
            {
                this.virtualImageDatastorePath = other.virtualImageDatastorePath;
            }
        }

        public getDiskFileSize_args deepCopy()
        {
            return new getDiskFileSize_args(this);
        }

        @Override
        public void clear()
        {
            this.virtualImageDatastorePath = null;
        }

        public String getVirtualImageDatastorePath()
        {
            return this.virtualImageDatastorePath;
        }

        public getDiskFileSize_args setVirtualImageDatastorePath(String virtualImageDatastorePath)
        {
            this.virtualImageDatastorePath = virtualImageDatastorePath;
            return this;
        }

        public void unsetVirtualImageDatastorePath()
        {
            this.virtualImageDatastorePath = null;
        }

        /** Returns true if field virtualImageDatastorePath is set (has been assigned a value) and false otherwise */
        public boolean isSetVirtualImageDatastorePath()
        {
            return this.virtualImageDatastorePath != null;
        }

        public void setVirtualImageDatastorePathIsSet(boolean value)
        {
            if (!value)
            {
                this.virtualImageDatastorePath = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case VIRTUAL_IMAGE_DATASTORE_PATH:
                    if (value == null)
                    {
                        unsetVirtualImageDatastorePath();
                    }
                    else
                    {
                        setVirtualImageDatastorePath((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case VIRTUAL_IMAGE_DATASTORE_PATH:
                    return getVirtualImageDatastorePath();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case VIRTUAL_IMAGE_DATASTORE_PATH:
                    return isSetVirtualImageDatastorePath();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof getDiskFileSize_args)
                return this.equals((getDiskFileSize_args) that);
            return false;
        }

        public boolean equals(getDiskFileSize_args that)
        {
            if (that == null)
                return false;

            boolean this_present_virtualImageDatastorePath =
                true && this.isSetVirtualImageDatastorePath();
            boolean that_present_virtualImageDatastorePath =
                true && that.isSetVirtualImageDatastorePath();
            if (this_present_virtualImageDatastorePath || that_present_virtualImageDatastorePath)
            {
                if (!(this_present_virtualImageDatastorePath
                    && that_present_virtualImageDatastorePath))
                    return false;
                if (!this.virtualImageDatastorePath.equals(that.virtualImageDatastorePath))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_virtualImageDatastorePath = true && (isSetVirtualImageDatastorePath());
            list.add(present_virtualImageDatastorePath);
            if (present_virtualImageDatastorePath)
                list.add(virtualImageDatastorePath);

            return list.hashCode();
        }

        @Override
        public int compareTo(getDiskFileSize_args other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetVirtualImageDatastorePath())
                .compareTo(other.isSetVirtualImageDatastorePath());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetVirtualImageDatastorePath())
            {
                lastComparison = org.apache.thrift.TBaseHelper
                    .compareTo(this.virtualImageDatastorePath, other.virtualImageDatastorePath);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("getDiskFileSize_args(");
            boolean first = true;

            sb.append("virtualImageDatastorePath:");
            if (this.virtualImageDatastorePath == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.virtualImageDatastorePath);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class getDiskFileSize_argsStandardSchemeFactory implements SchemeFactory
        {
            public getDiskFileSize_argsStandardScheme getScheme()
            {
                return new getDiskFileSize_argsStandardScheme();
            }
        }

        private static class getDiskFileSize_argsStandardScheme
            extends StandardScheme<getDiskFileSize_args>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot,
                getDiskFileSize_args struct) throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // VIRTUAL_IMAGE_DATASTORE_PATH
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.virtualImageDatastorePath = iprot.readString();
                                struct.setVirtualImageDatastorePathIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                getDiskFileSize_args struct) throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.virtualImageDatastorePath != null)
                {
                    oprot.writeFieldBegin(VIRTUAL_IMAGE_DATASTORE_PATH_FIELD_DESC);
                    oprot.writeString(struct.virtualImageDatastorePath);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getDiskFileSize_argsTupleSchemeFactory implements SchemeFactory
        {
            public getDiskFileSize_argsTupleScheme getScheme()
            {
                return new getDiskFileSize_argsTupleScheme();
            }
        }

        private static class getDiskFileSize_argsTupleScheme
            extends TupleScheme<getDiskFileSize_args>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot,
                getDiskFileSize_args struct) throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetVirtualImageDatastorePath())
                {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetVirtualImageDatastorePath())
                {
                    oprot.writeString(struct.virtualImageDatastorePath);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getDiskFileSize_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0))
                {
                    struct.virtualImageDatastorePath = iprot.readString();
                    struct.setVirtualImageDatastorePathIsSet(true);
                }
            }
        }

    }

    public static class getDiskFileSize_result
        implements org.apache.thrift.TBase<getDiskFileSize_result, getDiskFileSize_result._Fields>,
        java.io.Serializable, Cloneable, Comparable<getDiskFileSize_result>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("getDiskFileSize_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC =
            new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64,
                (short) 0);

        private static final org.apache.thrift.protocol.TField RE_FIELD_DESC =
            new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT,
                (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new getDiskFileSize_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getDiskFileSize_resultTupleSchemeFactory());
        }

        public long success; // required

        public RimpException re; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            SUCCESS((short) 0, "success"),
            RE((short) 1, "re");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // RE
                        return RE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;

        private byte __isset_bitfield = 0;

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS,
                new org.apache.thrift.meta_data.FieldMetaData("success",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.I64)));
            tmpMap.put(_Fields.RE,
                new org.apache.thrift.meta_data.FieldMetaData("re",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData
                .addStructMetaDataMap(getDiskFileSize_result.class, metaDataMap);
        }

        public getDiskFileSize_result()
        {
        }

        public getDiskFileSize_result(long success, RimpException re)
        {
            this();
            this.success = success;
            setSuccessIsSet(true);
            this.re = re;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getDiskFileSize_result(getDiskFileSize_result other)
        {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
            if (other.isSetRe())
            {
                this.re = new RimpException(other.re);
            }
        }

        public getDiskFileSize_result deepCopy()
        {
            return new getDiskFileSize_result(this);
        }

        @Override
        public void clear()
        {
            setSuccessIsSet(false);
            this.success = 0;
            this.re = null;
        }

        public long getSuccess()
        {
            return this.success;
        }

        public getDiskFileSize_result setSuccess(long success)
        {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess()
        {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess()
        {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value)
        {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public RimpException getRe()
        {
            return this.re;
        }

        public getDiskFileSize_result setRe(RimpException re)
        {
            this.re = re;
            return this;
        }

        public void unsetRe()
        {
            this.re = null;
        }

        /** Returns true if field re is set (has been assigned a value) and false otherwise */
        public boolean isSetRe()
        {
            return this.re != null;
        }

        public void setReIsSet(boolean value)
        {
            if (!value)
            {
                this.re = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case SUCCESS:
                    if (value == null)
                    {
                        unsetSuccess();
                    }
                    else
                    {
                        setSuccess((Long) value);
                    }
                    break;

                case RE:
                    if (value == null)
                    {
                        unsetRe();
                    }
                    else
                    {
                        setRe((RimpException) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case SUCCESS:
                    return Long.valueOf(getSuccess());

                case RE:
                    return getRe();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case SUCCESS:
                    return isSetSuccess();
                case RE:
                    return isSetRe();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof getDiskFileSize_result)
                return this.equals((getDiskFileSize_result) that);
            return false;
        }

        public boolean equals(getDiskFileSize_result that)
        {
            if (that == null)
                return false;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success)
            {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            boolean this_present_re = true && this.isSetRe();
            boolean that_present_re = true && that.isSetRe();
            if (this_present_re || that_present_re)
            {
                if (!(this_present_re && that_present_re))
                    return false;
                if (!this.re.equals(that.re))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true;
            list.add(present_success);
            if (present_success)
                list.add(success);

            boolean present_re = true && (isSetRe());
            list.add(present_re);
            if (present_re)
                list.add(re);

            return list.hashCode();
        }

        @Override
        public int compareTo(getDiskFileSize_result other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetSuccess())
            {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetRe())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("getDiskFileSize_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("re:");
            if (this.re == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.re);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class getDiskFileSize_resultStandardSchemeFactory implements SchemeFactory
        {
            public getDiskFileSize_resultStandardScheme getScheme()
            {
                return new getDiskFileSize_resultStandardScheme();
            }
        }

        private static class getDiskFileSize_resultStandardScheme
            extends StandardScheme<getDiskFileSize_result>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot,
                getDiskFileSize_result struct) throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64)
                            {
                                struct.success = iprot.readI64();
                                struct.setSuccessIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        case 1: // RE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT)
                            {
                                struct.re = new RimpException();
                                struct.re.read(iprot);
                                struct.setReIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                getDiskFileSize_result struct) throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess())
                {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI64(struct.success);
                    oprot.writeFieldEnd();
                }
                if (struct.re != null)
                {
                    oprot.writeFieldBegin(RE_FIELD_DESC);
                    struct.re.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getDiskFileSize_resultTupleSchemeFactory implements SchemeFactory
        {
            public getDiskFileSize_resultTupleScheme getScheme()
            {
                return new getDiskFileSize_resultTupleScheme();
            }
        }

        private static class getDiskFileSize_resultTupleScheme
            extends TupleScheme<getDiskFileSize_result>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot,
                getDiskFileSize_result struct) throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess())
                {
                    optionals.set(0);
                }
                if (struct.isSetRe())
                {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess())
                {
                    oprot.writeI64(struct.success);
                }
                if (struct.isSetRe())
                {
                    struct.re.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot,
                getDiskFileSize_result struct) throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0))
                {
                    struct.success = iprot.readI64();
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1))
                {
                    struct.re = new RimpException();
                    struct.re.read(iprot);
                    struct.setReIsSet(true);
                }
            }
        }

    }

    public static class getDatastores_args
        implements org.apache.thrift.TBase<getDatastores_args, getDatastores_args._Fields>,
        java.io.Serializable, Cloneable, Comparable<getDatastores_args>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("getDatastores_args");

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new getDatastores_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getDatastores_argsTupleSchemeFactory());
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDatastores_args.class,
                metaDataMap);
        }

        public getDatastores_args()
        {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getDatastores_args(getDatastores_args other)
        {
        }

        public getDatastores_args deepCopy()
        {
            return new getDatastores_args(this);
        }

        @Override
        public void clear()
        {
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof getDatastores_args)
                return this.equals((getDatastores_args) that);
            return false;
        }

        public boolean equals(getDatastores_args that)
        {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(getDatastores_args other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("getDatastores_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class getDatastores_argsStandardSchemeFactory implements SchemeFactory
        {
            public getDatastores_argsStandardScheme getScheme()
            {
                return new getDatastores_argsStandardScheme();
            }
        }

        private static class getDatastores_argsStandardScheme
            extends StandardScheme<getDatastores_args>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getDatastores_args struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getDatastores_args struct)
                throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getDatastores_argsTupleSchemeFactory implements SchemeFactory
        {
            public getDatastores_argsTupleScheme getScheme()
            {
                return new getDatastores_argsTupleScheme();
            }
        }

        private static class getDatastores_argsTupleScheme extends TupleScheme<getDatastores_args>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getDatastores_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getDatastores_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class getDatastores_result
        implements org.apache.thrift.TBase<getDatastores_result, getDatastores_result._Fields>,
        java.io.Serializable, Cloneable, Comparable<getDatastores_result>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("getDatastores_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC =
            new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST,
                (short) 0);

        private static final org.apache.thrift.protocol.TField RE_FIELD_DESC =
            new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT,
                (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new getDatastores_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getDatastores_resultTupleSchemeFactory());
        }

        public List<Datastore> success; // required

        public RimpException re; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            SUCCESS((short) 0, "success"),
            RE((short) 1, "re");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // RE
                        return RE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
                org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                    new org.apache.thrift.meta_data.StructMetaData(
                        org.apache.thrift.protocol.TType.STRUCT, Datastore.class))));
            tmpMap.put(_Fields.RE,
                new org.apache.thrift.meta_data.FieldMetaData("re",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData
                .addStructMetaDataMap(getDatastores_result.class, metaDataMap);
        }

        public getDatastores_result()
        {
        }

        public getDatastores_result(List<Datastore> success, RimpException re)
        {
            this();
            this.success = success;
            this.re = re;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getDatastores_result(getDatastores_result other)
        {
            if (other.isSetSuccess())
            {
                List<Datastore> __this__success = new ArrayList<Datastore>(other.success.size());
                for (Datastore other_element : other.success)
                {
                    __this__success.add(new Datastore(other_element));
                }
                this.success = __this__success;
            }
            if (other.isSetRe())
            {
                this.re = new RimpException(other.re);
            }
        }

        public getDatastores_result deepCopy()
        {
            return new getDatastores_result(this);
        }

        @Override
        public void clear()
        {
            this.success = null;
            this.re = null;
        }

        public int getSuccessSize()
        {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<Datastore> getSuccessIterator()
        {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(Datastore elem)
        {
            if (this.success == null)
            {
                this.success = new ArrayList<Datastore>();
            }
            this.success.add(elem);
        }

        public List<Datastore> getSuccess()
        {
            return this.success;
        }

        public getDatastores_result setSuccess(List<Datastore> success)
        {
            this.success = success;
            return this;
        }

        public void unsetSuccess()
        {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess()
        {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value)
        {
            if (!value)
            {
                this.success = null;
            }
        }

        public RimpException getRe()
        {
            return this.re;
        }

        public getDatastores_result setRe(RimpException re)
        {
            this.re = re;
            return this;
        }

        public void unsetRe()
        {
            this.re = null;
        }

        /** Returns true if field re is set (has been assigned a value) and false otherwise */
        public boolean isSetRe()
        {
            return this.re != null;
        }

        public void setReIsSet(boolean value)
        {
            if (!value)
            {
                this.re = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case SUCCESS:
                    if (value == null)
                    {
                        unsetSuccess();
                    }
                    else
                    {
                        setSuccess((List<Datastore>) value);
                    }
                    break;

                case RE:
                    if (value == null)
                    {
                        unsetRe();
                    }
                    else
                    {
                        setRe((RimpException) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case SUCCESS:
                    return getSuccess();

                case RE:
                    return getRe();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case SUCCESS:
                    return isSetSuccess();
                case RE:
                    return isSetRe();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof getDatastores_result)
                return this.equals((getDatastores_result) that);
            return false;
        }

        public boolean equals(getDatastores_result that)
        {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success)
            {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_re = true && this.isSetRe();
            boolean that_present_re = true && that.isSetRe();
            if (this_present_re || that_present_re)
            {
                if (!(this_present_re && that_present_re))
                    return false;
                if (!this.re.equals(that.re))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            boolean present_re = true && (isSetRe());
            list.add(present_re);
            if (present_re)
                list.add(re);

            return list.hashCode();
        }

        @Override
        public int compareTo(getDatastores_result other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetSuccess())
            {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetRe())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("getDatastores_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.success);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("re:");
            if (this.re == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.re);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class getDatastores_resultStandardSchemeFactory implements SchemeFactory
        {
            public getDatastores_resultStandardScheme getScheme()
            {
                return new getDatastores_resultStandardScheme();
            }
        }

        private static class getDatastores_resultStandardScheme
            extends StandardScheme<getDatastores_result>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot,
                getDatastores_result struct) throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST)
                            {
                                {
                                    org.apache.thrift.protocol.TList _list18 =
                                        iprot.readListBegin();
                                    struct.success = new ArrayList<Datastore>(_list18.size);
                                    Datastore _elem19;
                                    for (int _i20 = 0; _i20 < _list18.size; ++_i20)
                                    {
                                        _elem19 = new Datastore();
                                        _elem19.read(iprot);
                                        struct.success.add(_elem19);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        case 1: // RE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT)
                            {
                                struct.re = new RimpException();
                                struct.re.read(iprot);
                                struct.setReIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                getDatastores_result struct) throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null)
                {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(
                            org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                        for (Datastore _iter21 : struct.success)
                        {
                            _iter21.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.re != null)
                {
                    oprot.writeFieldBegin(RE_FIELD_DESC);
                    struct.re.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getDatastores_resultTupleSchemeFactory implements SchemeFactory
        {
            public getDatastores_resultTupleScheme getScheme()
            {
                return new getDatastores_resultTupleScheme();
            }
        }

        private static class getDatastores_resultTupleScheme
            extends TupleScheme<getDatastores_result>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot,
                getDatastores_result struct) throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess())
                {
                    optionals.set(0);
                }
                if (struct.isSetRe())
                {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess())
                {
                    {
                        oprot.writeI32(struct.success.size());
                        for (Datastore _iter22 : struct.success)
                        {
                            _iter22.write(oprot);
                        }
                    }
                }
                if (struct.isSetRe())
                {
                    struct.re.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getDatastores_result struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0))
                {
                    {
                        org.apache.thrift.protocol.TList _list23 =
                            new org.apache.thrift.protocol.TList(
                                org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.success = new ArrayList<Datastore>(_list23.size);
                        Datastore _elem24;
                        for (int _i25 = 0; _i25 < _list23.size; ++_i25)
                        {
                            _elem24 = new Datastore();
                            _elem24.read(iprot);
                            struct.success.add(_elem24);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1))
                {
                    struct.re = new RimpException();
                    struct.re.read(iprot);
                    struct.setReIsSet(true);
                }
            }
        }

    }

    public static class getNetInterfaces_args
        implements org.apache.thrift.TBase<getNetInterfaces_args, getNetInterfaces_args._Fields>,
        java.io.Serializable, Cloneable, Comparable<getNetInterfaces_args>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("getNetInterfaces_args");

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new getNetInterfaces_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getNetInterfaces_argsTupleSchemeFactory());
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData
                .addStructMetaDataMap(getNetInterfaces_args.class, metaDataMap);
        }

        public getNetInterfaces_args()
        {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getNetInterfaces_args(getNetInterfaces_args other)
        {
        }

        public getNetInterfaces_args deepCopy()
        {
            return new getNetInterfaces_args(this);
        }

        @Override
        public void clear()
        {
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof getNetInterfaces_args)
                return this.equals((getNetInterfaces_args) that);
            return false;
        }

        public boolean equals(getNetInterfaces_args that)
        {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(getNetInterfaces_args other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("getNetInterfaces_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class getNetInterfaces_argsStandardSchemeFactory implements SchemeFactory
        {
            public getNetInterfaces_argsStandardScheme getScheme()
            {
                return new getNetInterfaces_argsStandardScheme();
            }
        }

        private static class getNetInterfaces_argsStandardScheme
            extends StandardScheme<getNetInterfaces_args>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot,
                getNetInterfaces_args struct) throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                getNetInterfaces_args struct) throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getNetInterfaces_argsTupleSchemeFactory implements SchemeFactory
        {
            public getNetInterfaces_argsTupleScheme getScheme()
            {
                return new getNetInterfaces_argsTupleScheme();
            }
        }

        private static class getNetInterfaces_argsTupleScheme
            extends TupleScheme<getNetInterfaces_args>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot,
                getNetInterfaces_args struct) throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot,
                getNetInterfaces_args struct) throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class getNetInterfaces_result implements
        org.apache.thrift.TBase<getNetInterfaces_result, getNetInterfaces_result._Fields>,
        java.io.Serializable, Cloneable, Comparable<getNetInterfaces_result>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("getNetInterfaces_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC =
            new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST,
                (short) 0);

        private static final org.apache.thrift.protocol.TField RE_FIELD_DESC =
            new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT,
                (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new getNetInterfaces_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getNetInterfaces_resultTupleSchemeFactory());
        }

        public List<NetInterface> success; // required

        public RimpException re; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            SUCCESS((short) 0, "success"),
            RE((short) 1, "re");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // RE
                        return RE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
                org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                    new org.apache.thrift.meta_data.StructMetaData(
                        org.apache.thrift.protocol.TType.STRUCT, NetInterface.class))));
            tmpMap.put(_Fields.RE,
                new org.apache.thrift.meta_data.FieldMetaData("re",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData
                .addStructMetaDataMap(getNetInterfaces_result.class, metaDataMap);
        }

        public getNetInterfaces_result()
        {
        }

        public getNetInterfaces_result(List<NetInterface> success, RimpException re)
        {
            this();
            this.success = success;
            this.re = re;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getNetInterfaces_result(getNetInterfaces_result other)
        {
            if (other.isSetSuccess())
            {
                List<NetInterface> __this__success =
                    new ArrayList<NetInterface>(other.success.size());
                for (NetInterface other_element : other.success)
                {
                    __this__success.add(new NetInterface(other_element));
                }
                this.success = __this__success;
            }
            if (other.isSetRe())
            {
                this.re = new RimpException(other.re);
            }
        }

        public getNetInterfaces_result deepCopy()
        {
            return new getNetInterfaces_result(this);
        }

        @Override
        public void clear()
        {
            this.success = null;
            this.re = null;
        }

        public int getSuccessSize()
        {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<NetInterface> getSuccessIterator()
        {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(NetInterface elem)
        {
            if (this.success == null)
            {
                this.success = new ArrayList<NetInterface>();
            }
            this.success.add(elem);
        }

        public List<NetInterface> getSuccess()
        {
            return this.success;
        }

        public getNetInterfaces_result setSuccess(List<NetInterface> success)
        {
            this.success = success;
            return this;
        }

        public void unsetSuccess()
        {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess()
        {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value)
        {
            if (!value)
            {
                this.success = null;
            }
        }

        public RimpException getRe()
        {
            return this.re;
        }

        public getNetInterfaces_result setRe(RimpException re)
        {
            this.re = re;
            return this;
        }

        public void unsetRe()
        {
            this.re = null;
        }

        /** Returns true if field re is set (has been assigned a value) and false otherwise */
        public boolean isSetRe()
        {
            return this.re != null;
        }

        public void setReIsSet(boolean value)
        {
            if (!value)
            {
                this.re = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case SUCCESS:
                    if (value == null)
                    {
                        unsetSuccess();
                    }
                    else
                    {
                        setSuccess((List<NetInterface>) value);
                    }
                    break;

                case RE:
                    if (value == null)
                    {
                        unsetRe();
                    }
                    else
                    {
                        setRe((RimpException) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case SUCCESS:
                    return getSuccess();

                case RE:
                    return getRe();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case SUCCESS:
                    return isSetSuccess();
                case RE:
                    return isSetRe();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof getNetInterfaces_result)
                return this.equals((getNetInterfaces_result) that);
            return false;
        }

        public boolean equals(getNetInterfaces_result that)
        {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success)
            {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_re = true && this.isSetRe();
            boolean that_present_re = true && that.isSetRe();
            if (this_present_re || that_present_re)
            {
                if (!(this_present_re && that_present_re))
                    return false;
                if (!this.re.equals(that.re))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            boolean present_re = true && (isSetRe());
            list.add(present_re);
            if (present_re)
                list.add(re);

            return list.hashCode();
        }

        @Override
        public int compareTo(getNetInterfaces_result other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetSuccess())
            {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetRe())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("getNetInterfaces_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.success);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("re:");
            if (this.re == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.re);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class getNetInterfaces_resultStandardSchemeFactory implements SchemeFactory
        {
            public getNetInterfaces_resultStandardScheme getScheme()
            {
                return new getNetInterfaces_resultStandardScheme();
            }
        }

        private static class getNetInterfaces_resultStandardScheme
            extends StandardScheme<getNetInterfaces_result>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot,
                getNetInterfaces_result struct) throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST)
                            {
                                {
                                    org.apache.thrift.protocol.TList _list26 =
                                        iprot.readListBegin();
                                    struct.success = new ArrayList<NetInterface>(_list26.size);
                                    NetInterface _elem27;
                                    for (int _i28 = 0; _i28 < _list26.size; ++_i28)
                                    {
                                        _elem27 = new NetInterface();
                                        _elem27.read(iprot);
                                        struct.success.add(_elem27);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        case 1: // RE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT)
                            {
                                struct.re = new RimpException();
                                struct.re.read(iprot);
                                struct.setReIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                getNetInterfaces_result struct) throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null)
                {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(
                            org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                        for (NetInterface _iter29 : struct.success)
                        {
                            _iter29.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.re != null)
                {
                    oprot.writeFieldBegin(RE_FIELD_DESC);
                    struct.re.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getNetInterfaces_resultTupleSchemeFactory implements SchemeFactory
        {
            public getNetInterfaces_resultTupleScheme getScheme()
            {
                return new getNetInterfaces_resultTupleScheme();
            }
        }

        private static class getNetInterfaces_resultTupleScheme
            extends TupleScheme<getNetInterfaces_result>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot,
                getNetInterfaces_result struct) throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess())
                {
                    optionals.set(0);
                }
                if (struct.isSetRe())
                {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess())
                {
                    {
                        oprot.writeI32(struct.success.size());
                        for (NetInterface _iter30 : struct.success)
                        {
                            _iter30.write(oprot);
                        }
                    }
                }
                if (struct.isSetRe())
                {
                    struct.re.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot,
                getNetInterfaces_result struct) throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0))
                {
                    {
                        org.apache.thrift.protocol.TList _list31 =
                            new org.apache.thrift.protocol.TList(
                                org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.success = new ArrayList<NetInterface>(_list31.size);
                        NetInterface _elem32;
                        for (int _i33 = 0; _i33 < _list31.size; ++_i33)
                        {
                            _elem32 = new NetInterface();
                            _elem32.read(iprot);
                            struct.success.add(_elem32);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1))
                {
                    struct.re = new RimpException();
                    struct.re.read(iprot);
                    struct.setReIsSet(true);
                }
            }
        }

    }

    public static class copyFromRepositoryToDatastore_args implements
        org.apache.thrift.TBase<copyFromRepositoryToDatastore_args, copyFromRepositoryToDatastore_args._Fields>,
        java.io.Serializable, Cloneable, Comparable<copyFromRepositoryToDatastore_args>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("copyFromRepositoryToDatastore_args");

        private static final org.apache.thrift.protocol.TField VIRTUAL_IMAGE_REPOSITORY_PATH_FIELD_DESC =
            new org.apache.thrift.protocol.TField("virtualImageRepositoryPath",
                org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final org.apache.thrift.protocol.TField DATASTORE_PATH_FIELD_DESC =
            new org.apache.thrift.protocol.TField("datastorePath",
                org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final org.apache.thrift.protocol.TField VIRTUAL_MACHINE_UUID_FIELD_DESC =
            new org.apache.thrift.protocol.TField("virtualMachineUUID",
                org.apache.thrift.protocol.TType.STRING, (short) 3);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class,
                new copyFromRepositoryToDatastore_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class,
                new copyFromRepositoryToDatastore_argsTupleSchemeFactory());
        }

        public String virtualImageRepositoryPath; // required

        public String datastorePath; // required

        public String virtualMachineUUID; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            VIRTUAL_IMAGE_REPOSITORY_PATH((short) 1, "virtualImageRepositoryPath"),
            DATASTORE_PATH((short) 2, "datastorePath"),
            VIRTUAL_MACHINE_UUID((short) 3, "virtualMachineUUID");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // VIRTUAL_IMAGE_REPOSITORY_PATH
                        return VIRTUAL_IMAGE_REPOSITORY_PATH;
                    case 2: // DATASTORE_PATH
                        return DATASTORE_PATH;
                    case 3: // VIRTUAL_MACHINE_UUID
                        return VIRTUAL_MACHINE_UUID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.VIRTUAL_IMAGE_REPOSITORY_PATH,
                new org.apache.thrift.meta_data.FieldMetaData("virtualImageRepositoryPath",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.DATASTORE_PATH,
                new org.apache.thrift.meta_data.FieldMetaData("datastorePath",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.VIRTUAL_MACHINE_UUID,
                new org.apache.thrift.meta_data.FieldMetaData("virtualMachineUUID",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData
                .addStructMetaDataMap(copyFromRepositoryToDatastore_args.class, metaDataMap);
        }

        public copyFromRepositoryToDatastore_args()
        {
        }

        public copyFromRepositoryToDatastore_args(String virtualImageRepositoryPath,
            String datastorePath, String virtualMachineUUID)
        {
            this();
            this.virtualImageRepositoryPath = virtualImageRepositoryPath;
            this.datastorePath = datastorePath;
            this.virtualMachineUUID = virtualMachineUUID;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public copyFromRepositoryToDatastore_args(copyFromRepositoryToDatastore_args other)
        {
            if (other.isSetVirtualImageRepositoryPath())
            {
                this.virtualImageRepositoryPath = other.virtualImageRepositoryPath;
            }
            if (other.isSetDatastorePath())
            {
                this.datastorePath = other.datastorePath;
            }
            if (other.isSetVirtualMachineUUID())
            {
                this.virtualMachineUUID = other.virtualMachineUUID;
            }
        }

        public copyFromRepositoryToDatastore_args deepCopy()
        {
            return new copyFromRepositoryToDatastore_args(this);
        }

        @Override
        public void clear()
        {
            this.virtualImageRepositoryPath = null;
            this.datastorePath = null;
            this.virtualMachineUUID = null;
        }

        public String getVirtualImageRepositoryPath()
        {
            return this.virtualImageRepositoryPath;
        }

        public copyFromRepositoryToDatastore_args setVirtualImageRepositoryPath(
            String virtualImageRepositoryPath)
        {
            this.virtualImageRepositoryPath = virtualImageRepositoryPath;
            return this;
        }

        public void unsetVirtualImageRepositoryPath()
        {
            this.virtualImageRepositoryPath = null;
        }

        /** Returns true if field virtualImageRepositoryPath is set (has been assigned a value) and false otherwise */
        public boolean isSetVirtualImageRepositoryPath()
        {
            return this.virtualImageRepositoryPath != null;
        }

        public void setVirtualImageRepositoryPathIsSet(boolean value)
        {
            if (!value)
            {
                this.virtualImageRepositoryPath = null;
            }
        }

        public String getDatastorePath()
        {
            return this.datastorePath;
        }

        public copyFromRepositoryToDatastore_args setDatastorePath(String datastorePath)
        {
            this.datastorePath = datastorePath;
            return this;
        }

        public void unsetDatastorePath()
        {
            this.datastorePath = null;
        }

        /** Returns true if field datastorePath is set (has been assigned a value) and false otherwise */
        public boolean isSetDatastorePath()
        {
            return this.datastorePath != null;
        }

        public void setDatastorePathIsSet(boolean value)
        {
            if (!value)
            {
                this.datastorePath = null;
            }
        }

        public String getVirtualMachineUUID()
        {
            return this.virtualMachineUUID;
        }

        public copyFromRepositoryToDatastore_args setVirtualMachineUUID(String virtualMachineUUID)
        {
            this.virtualMachineUUID = virtualMachineUUID;
            return this;
        }

        public void unsetVirtualMachineUUID()
        {
            this.virtualMachineUUID = null;
        }

        /** Returns true if field virtualMachineUUID is set (has been assigned a value) and false otherwise */
        public boolean isSetVirtualMachineUUID()
        {
            return this.virtualMachineUUID != null;
        }

        public void setVirtualMachineUUIDIsSet(boolean value)
        {
            if (!value)
            {
                this.virtualMachineUUID = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case VIRTUAL_IMAGE_REPOSITORY_PATH:
                    if (value == null)
                    {
                        unsetVirtualImageRepositoryPath();
                    }
                    else
                    {
                        setVirtualImageRepositoryPath((String) value);
                    }
                    break;

                case DATASTORE_PATH:
                    if (value == null)
                    {
                        unsetDatastorePath();
                    }
                    else
                    {
                        setDatastorePath((String) value);
                    }
                    break;

                case VIRTUAL_MACHINE_UUID:
                    if (value == null)
                    {
                        unsetVirtualMachineUUID();
                    }
                    else
                    {
                        setVirtualMachineUUID((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case VIRTUAL_IMAGE_REPOSITORY_PATH:
                    return getVirtualImageRepositoryPath();

                case DATASTORE_PATH:
                    return getDatastorePath();

                case VIRTUAL_MACHINE_UUID:
                    return getVirtualMachineUUID();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case VIRTUAL_IMAGE_REPOSITORY_PATH:
                    return isSetVirtualImageRepositoryPath();
                case DATASTORE_PATH:
                    return isSetDatastorePath();
                case VIRTUAL_MACHINE_UUID:
                    return isSetVirtualMachineUUID();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof copyFromRepositoryToDatastore_args)
                return this.equals((copyFromRepositoryToDatastore_args) that);
            return false;
        }

        public boolean equals(copyFromRepositoryToDatastore_args that)
        {
            if (that == null)
                return false;

            boolean this_present_virtualImageRepositoryPath =
                true && this.isSetVirtualImageRepositoryPath();
            boolean that_present_virtualImageRepositoryPath =
                true && that.isSetVirtualImageRepositoryPath();
            if (this_present_virtualImageRepositoryPath || that_present_virtualImageRepositoryPath)
            {
                if (!(this_present_virtualImageRepositoryPath
                    && that_present_virtualImageRepositoryPath))
                    return false;
                if (!this.virtualImageRepositoryPath.equals(that.virtualImageRepositoryPath))
                    return false;
            }

            boolean this_present_datastorePath = true && this.isSetDatastorePath();
            boolean that_present_datastorePath = true && that.isSetDatastorePath();
            if (this_present_datastorePath || that_present_datastorePath)
            {
                if (!(this_present_datastorePath && that_present_datastorePath))
                    return false;
                if (!this.datastorePath.equals(that.datastorePath))
                    return false;
            }

            boolean this_present_virtualMachineUUID = true && this.isSetVirtualMachineUUID();
            boolean that_present_virtualMachineUUID = true && that.isSetVirtualMachineUUID();
            if (this_present_virtualMachineUUID || that_present_virtualMachineUUID)
            {
                if (!(this_present_virtualMachineUUID && that_present_virtualMachineUUID))
                    return false;
                if (!this.virtualMachineUUID.equals(that.virtualMachineUUID))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_virtualImageRepositoryPath =
                true && (isSetVirtualImageRepositoryPath());
            list.add(present_virtualImageRepositoryPath);
            if (present_virtualImageRepositoryPath)
                list.add(virtualImageRepositoryPath);

            boolean present_datastorePath = true && (isSetDatastorePath());
            list.add(present_datastorePath);
            if (present_datastorePath)
                list.add(datastorePath);

            boolean present_virtualMachineUUID = true && (isSetVirtualMachineUUID());
            list.add(present_virtualMachineUUID);
            if (present_virtualMachineUUID)
                list.add(virtualMachineUUID);

            return list.hashCode();
        }

        @Override
        public int compareTo(copyFromRepositoryToDatastore_args other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetVirtualImageRepositoryPath())
                .compareTo(other.isSetVirtualImageRepositoryPath());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetVirtualImageRepositoryPath())
            {
                lastComparison = org.apache.thrift.TBaseHelper
                    .compareTo(this.virtualImageRepositoryPath, other.virtualImageRepositoryPath);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            lastComparison =
                Boolean.valueOf(isSetDatastorePath()).compareTo(other.isSetDatastorePath());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetDatastorePath())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datastorePath,
                    other.datastorePath);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetVirtualMachineUUID())
                .compareTo(other.isSetVirtualMachineUUID());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetVirtualMachineUUID())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.virtualMachineUUID,
                    other.virtualMachineUUID);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("copyFromRepositoryToDatastore_args(");
            boolean first = true;

            sb.append("virtualImageRepositoryPath:");
            if (this.virtualImageRepositoryPath == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.virtualImageRepositoryPath);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("datastorePath:");
            if (this.datastorePath == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.datastorePath);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("virtualMachineUUID:");
            if (this.virtualMachineUUID == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.virtualMachineUUID);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class copyFromRepositoryToDatastore_argsStandardSchemeFactory
            implements SchemeFactory
        {
            public copyFromRepositoryToDatastore_argsStandardScheme getScheme()
            {
                return new copyFromRepositoryToDatastore_argsStandardScheme();
            }
        }

        private static class copyFromRepositoryToDatastore_argsStandardScheme
            extends StandardScheme<copyFromRepositoryToDatastore_args>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot,
                copyFromRepositoryToDatastore_args struct) throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // VIRTUAL_IMAGE_REPOSITORY_PATH
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.virtualImageRepositoryPath = iprot.readString();
                                struct.setVirtualImageRepositoryPathIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        case 2: // DATASTORE_PATH
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.datastorePath = iprot.readString();
                                struct.setDatastorePathIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        case 3: // VIRTUAL_MACHINE_UUID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.virtualMachineUUID = iprot.readString();
                                struct.setVirtualMachineUUIDIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                copyFromRepositoryToDatastore_args struct) throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.virtualImageRepositoryPath != null)
                {
                    oprot.writeFieldBegin(VIRTUAL_IMAGE_REPOSITORY_PATH_FIELD_DESC);
                    oprot.writeString(struct.virtualImageRepositoryPath);
                    oprot.writeFieldEnd();
                }
                if (struct.datastorePath != null)
                {
                    oprot.writeFieldBegin(DATASTORE_PATH_FIELD_DESC);
                    oprot.writeString(struct.datastorePath);
                    oprot.writeFieldEnd();
                }
                if (struct.virtualMachineUUID != null)
                {
                    oprot.writeFieldBegin(VIRTUAL_MACHINE_UUID_FIELD_DESC);
                    oprot.writeString(struct.virtualMachineUUID);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class copyFromRepositoryToDatastore_argsTupleSchemeFactory
            implements SchemeFactory
        {
            public copyFromRepositoryToDatastore_argsTupleScheme getScheme()
            {
                return new copyFromRepositoryToDatastore_argsTupleScheme();
            }
        }

        private static class copyFromRepositoryToDatastore_argsTupleScheme
            extends TupleScheme<copyFromRepositoryToDatastore_args>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot,
                copyFromRepositoryToDatastore_args struct) throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetVirtualImageRepositoryPath())
                {
                    optionals.set(0);
                }
                if (struct.isSetDatastorePath())
                {
                    optionals.set(1);
                }
                if (struct.isSetVirtualMachineUUID())
                {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetVirtualImageRepositoryPath())
                {
                    oprot.writeString(struct.virtualImageRepositoryPath);
                }
                if (struct.isSetDatastorePath())
                {
                    oprot.writeString(struct.datastorePath);
                }
                if (struct.isSetVirtualMachineUUID())
                {
                    oprot.writeString(struct.virtualMachineUUID);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot,
                copyFromRepositoryToDatastore_args struct) throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0))
                {
                    struct.virtualImageRepositoryPath = iprot.readString();
                    struct.setVirtualImageRepositoryPathIsSet(true);
                }
                if (incoming.get(1))
                {
                    struct.datastorePath = iprot.readString();
                    struct.setDatastorePathIsSet(true);
                }
                if (incoming.get(2))
                {
                    struct.virtualMachineUUID = iprot.readString();
                    struct.setVirtualMachineUUIDIsSet(true);
                }
            }
        }

    }

    public static class copyFromRepositoryToDatastore_result implements
        org.apache.thrift.TBase<copyFromRepositoryToDatastore_result, copyFromRepositoryToDatastore_result._Fields>,
        java.io.Serializable, Cloneable, Comparable<copyFromRepositoryToDatastore_result>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("copyFromRepositoryToDatastore_result");

        private static final org.apache.thrift.protocol.TField RE_FIELD_DESC =
            new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT,
                (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class,
                new copyFromRepositoryToDatastore_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class,
                new copyFromRepositoryToDatastore_resultTupleSchemeFactory());
        }

        public RimpException re; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            RE((short) 1, "re");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // RE
                        return RE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.RE,
                new org.apache.thrift.meta_data.FieldMetaData("re",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData
                .addStructMetaDataMap(copyFromRepositoryToDatastore_result.class, metaDataMap);
        }

        public copyFromRepositoryToDatastore_result()
        {
        }

        public copyFromRepositoryToDatastore_result(RimpException re)
        {
            this();
            this.re = re;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public copyFromRepositoryToDatastore_result(copyFromRepositoryToDatastore_result other)
        {
            if (other.isSetRe())
            {
                this.re = new RimpException(other.re);
            }
        }

        public copyFromRepositoryToDatastore_result deepCopy()
        {
            return new copyFromRepositoryToDatastore_result(this);
        }

        @Override
        public void clear()
        {
            this.re = null;
        }

        public RimpException getRe()
        {
            return this.re;
        }

        public copyFromRepositoryToDatastore_result setRe(RimpException re)
        {
            this.re = re;
            return this;
        }

        public void unsetRe()
        {
            this.re = null;
        }

        /** Returns true if field re is set (has been assigned a value) and false otherwise */
        public boolean isSetRe()
        {
            return this.re != null;
        }

        public void setReIsSet(boolean value)
        {
            if (!value)
            {
                this.re = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case RE:
                    if (value == null)
                    {
                        unsetRe();
                    }
                    else
                    {
                        setRe((RimpException) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case RE:
                    return getRe();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case RE:
                    return isSetRe();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof copyFromRepositoryToDatastore_result)
                return this.equals((copyFromRepositoryToDatastore_result) that);
            return false;
        }

        public boolean equals(copyFromRepositoryToDatastore_result that)
        {
            if (that == null)
                return false;

            boolean this_present_re = true && this.isSetRe();
            boolean that_present_re = true && that.isSetRe();
            if (this_present_re || that_present_re)
            {
                if (!(this_present_re && that_present_re))
                    return false;
                if (!this.re.equals(that.re))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_re = true && (isSetRe());
            list.add(present_re);
            if (present_re)
                list.add(re);

            return list.hashCode();
        }

        @Override
        public int compareTo(copyFromRepositoryToDatastore_result other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetRe())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("copyFromRepositoryToDatastore_result(");
            boolean first = true;

            sb.append("re:");
            if (this.re == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.re);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class copyFromRepositoryToDatastore_resultStandardSchemeFactory
            implements SchemeFactory
        {
            public copyFromRepositoryToDatastore_resultStandardScheme getScheme()
            {
                return new copyFromRepositoryToDatastore_resultStandardScheme();
            }
        }

        private static class copyFromRepositoryToDatastore_resultStandardScheme
            extends StandardScheme<copyFromRepositoryToDatastore_result>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot,
                copyFromRepositoryToDatastore_result struct) throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // RE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT)
                            {
                                struct.re = new RimpException();
                                struct.re.read(iprot);
                                struct.setReIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                copyFromRepositoryToDatastore_result struct) throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.re != null)
                {
                    oprot.writeFieldBegin(RE_FIELD_DESC);
                    struct.re.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class copyFromRepositoryToDatastore_resultTupleSchemeFactory
            implements SchemeFactory
        {
            public copyFromRepositoryToDatastore_resultTupleScheme getScheme()
            {
                return new copyFromRepositoryToDatastore_resultTupleScheme();
            }
        }

        private static class copyFromRepositoryToDatastore_resultTupleScheme
            extends TupleScheme<copyFromRepositoryToDatastore_result>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot,
                copyFromRepositoryToDatastore_result struct) throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetRe())
                {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetRe())
                {
                    struct.re.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot,
                copyFromRepositoryToDatastore_result struct) throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0))
                {
                    struct.re = new RimpException();
                    struct.re.read(iprot);
                    struct.setReIsSet(true);
                }
            }
        }

    }

    public static class deleteVirtualImageFromDatastore_args implements
        org.apache.thrift.TBase<deleteVirtualImageFromDatastore_args, deleteVirtualImageFromDatastore_args._Fields>,
        java.io.Serializable, Cloneable, Comparable<deleteVirtualImageFromDatastore_args>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("deleteVirtualImageFromDatastore_args");

        private static final org.apache.thrift.protocol.TField DATASTORE_PATH_FIELD_DESC =
            new org.apache.thrift.protocol.TField("datastorePath",
                org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final org.apache.thrift.protocol.TField VIRTUAL_MACHINE_UUID_FIELD_DESC =
            new org.apache.thrift.protocol.TField("virtualMachineUUID",
                org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class,
                new deleteVirtualImageFromDatastore_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class,
                new deleteVirtualImageFromDatastore_argsTupleSchemeFactory());
        }

        public String datastorePath; // required

        public String virtualMachineUUID; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            DATASTORE_PATH((short) 1, "datastorePath"),
            VIRTUAL_MACHINE_UUID((short) 2, "virtualMachineUUID");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // DATASTORE_PATH
                        return DATASTORE_PATH;
                    case 2: // VIRTUAL_MACHINE_UUID
                        return VIRTUAL_MACHINE_UUID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.DATASTORE_PATH,
                new org.apache.thrift.meta_data.FieldMetaData("datastorePath",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.VIRTUAL_MACHINE_UUID,
                new org.apache.thrift.meta_data.FieldMetaData("virtualMachineUUID",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData
                .addStructMetaDataMap(deleteVirtualImageFromDatastore_args.class, metaDataMap);
        }

        public deleteVirtualImageFromDatastore_args()
        {
        }

        public deleteVirtualImageFromDatastore_args(String datastorePath, String virtualMachineUUID)
        {
            this();
            this.datastorePath = datastorePath;
            this.virtualMachineUUID = virtualMachineUUID;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public deleteVirtualImageFromDatastore_args(deleteVirtualImageFromDatastore_args other)
        {
            if (other.isSetDatastorePath())
            {
                this.datastorePath = other.datastorePath;
            }
            if (other.isSetVirtualMachineUUID())
            {
                this.virtualMachineUUID = other.virtualMachineUUID;
            }
        }

        public deleteVirtualImageFromDatastore_args deepCopy()
        {
            return new deleteVirtualImageFromDatastore_args(this);
        }

        @Override
        public void clear()
        {
            this.datastorePath = null;
            this.virtualMachineUUID = null;
        }

        public String getDatastorePath()
        {
            return this.datastorePath;
        }

        public deleteVirtualImageFromDatastore_args setDatastorePath(String datastorePath)
        {
            this.datastorePath = datastorePath;
            return this;
        }

        public void unsetDatastorePath()
        {
            this.datastorePath = null;
        }

        /** Returns true if field datastorePath is set (has been assigned a value) and false otherwise */
        public boolean isSetDatastorePath()
        {
            return this.datastorePath != null;
        }

        public void setDatastorePathIsSet(boolean value)
        {
            if (!value)
            {
                this.datastorePath = null;
            }
        }

        public String getVirtualMachineUUID()
        {
            return this.virtualMachineUUID;
        }

        public deleteVirtualImageFromDatastore_args setVirtualMachineUUID(String virtualMachineUUID)
        {
            this.virtualMachineUUID = virtualMachineUUID;
            return this;
        }

        public void unsetVirtualMachineUUID()
        {
            this.virtualMachineUUID = null;
        }

        /** Returns true if field virtualMachineUUID is set (has been assigned a value) and false otherwise */
        public boolean isSetVirtualMachineUUID()
        {
            return this.virtualMachineUUID != null;
        }

        public void setVirtualMachineUUIDIsSet(boolean value)
        {
            if (!value)
            {
                this.virtualMachineUUID = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case DATASTORE_PATH:
                    if (value == null)
                    {
                        unsetDatastorePath();
                    }
                    else
                    {
                        setDatastorePath((String) value);
                    }
                    break;

                case VIRTUAL_MACHINE_UUID:
                    if (value == null)
                    {
                        unsetVirtualMachineUUID();
                    }
                    else
                    {
                        setVirtualMachineUUID((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case DATASTORE_PATH:
                    return getDatastorePath();

                case VIRTUAL_MACHINE_UUID:
                    return getVirtualMachineUUID();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case DATASTORE_PATH:
                    return isSetDatastorePath();
                case VIRTUAL_MACHINE_UUID:
                    return isSetVirtualMachineUUID();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof deleteVirtualImageFromDatastore_args)
                return this.equals((deleteVirtualImageFromDatastore_args) that);
            return false;
        }

        public boolean equals(deleteVirtualImageFromDatastore_args that)
        {
            if (that == null)
                return false;

            boolean this_present_datastorePath = true && this.isSetDatastorePath();
            boolean that_present_datastorePath = true && that.isSetDatastorePath();
            if (this_present_datastorePath || that_present_datastorePath)
            {
                if (!(this_present_datastorePath && that_present_datastorePath))
                    return false;
                if (!this.datastorePath.equals(that.datastorePath))
                    return false;
            }

            boolean this_present_virtualMachineUUID = true && this.isSetVirtualMachineUUID();
            boolean that_present_virtualMachineUUID = true && that.isSetVirtualMachineUUID();
            if (this_present_virtualMachineUUID || that_present_virtualMachineUUID)
            {
                if (!(this_present_virtualMachineUUID && that_present_virtualMachineUUID))
                    return false;
                if (!this.virtualMachineUUID.equals(that.virtualMachineUUID))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_datastorePath = true && (isSetDatastorePath());
            list.add(present_datastorePath);
            if (present_datastorePath)
                list.add(datastorePath);

            boolean present_virtualMachineUUID = true && (isSetVirtualMachineUUID());
            list.add(present_virtualMachineUUID);
            if (present_virtualMachineUUID)
                list.add(virtualMachineUUID);

            return list.hashCode();
        }

        @Override
        public int compareTo(deleteVirtualImageFromDatastore_args other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison =
                Boolean.valueOf(isSetDatastorePath()).compareTo(other.isSetDatastorePath());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetDatastorePath())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datastorePath,
                    other.datastorePath);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetVirtualMachineUUID())
                .compareTo(other.isSetVirtualMachineUUID());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetVirtualMachineUUID())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.virtualMachineUUID,
                    other.virtualMachineUUID);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("deleteVirtualImageFromDatastore_args(");
            boolean first = true;

            sb.append("datastorePath:");
            if (this.datastorePath == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.datastorePath);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("virtualMachineUUID:");
            if (this.virtualMachineUUID == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.virtualMachineUUID);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class deleteVirtualImageFromDatastore_argsStandardSchemeFactory
            implements SchemeFactory
        {
            public deleteVirtualImageFromDatastore_argsStandardScheme getScheme()
            {
                return new deleteVirtualImageFromDatastore_argsStandardScheme();
            }
        }

        private static class deleteVirtualImageFromDatastore_argsStandardScheme
            extends StandardScheme<deleteVirtualImageFromDatastore_args>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot,
                deleteVirtualImageFromDatastore_args struct) throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // DATASTORE_PATH
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.datastorePath = iprot.readString();
                                struct.setDatastorePathIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        case 2: // VIRTUAL_MACHINE_UUID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.virtualMachineUUID = iprot.readString();
                                struct.setVirtualMachineUUIDIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                deleteVirtualImageFromDatastore_args struct) throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.datastorePath != null)
                {
                    oprot.writeFieldBegin(DATASTORE_PATH_FIELD_DESC);
                    oprot.writeString(struct.datastorePath);
                    oprot.writeFieldEnd();
                }
                if (struct.virtualMachineUUID != null)
                {
                    oprot.writeFieldBegin(VIRTUAL_MACHINE_UUID_FIELD_DESC);
                    oprot.writeString(struct.virtualMachineUUID);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class deleteVirtualImageFromDatastore_argsTupleSchemeFactory
            implements SchemeFactory
        {
            public deleteVirtualImageFromDatastore_argsTupleScheme getScheme()
            {
                return new deleteVirtualImageFromDatastore_argsTupleScheme();
            }
        }

        private static class deleteVirtualImageFromDatastore_argsTupleScheme
            extends TupleScheme<deleteVirtualImageFromDatastore_args>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot,
                deleteVirtualImageFromDatastore_args struct) throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetDatastorePath())
                {
                    optionals.set(0);
                }
                if (struct.isSetVirtualMachineUUID())
                {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetDatastorePath())
                {
                    oprot.writeString(struct.datastorePath);
                }
                if (struct.isSetVirtualMachineUUID())
                {
                    oprot.writeString(struct.virtualMachineUUID);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot,
                deleteVirtualImageFromDatastore_args struct) throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0))
                {
                    struct.datastorePath = iprot.readString();
                    struct.setDatastorePathIsSet(true);
                }
                if (incoming.get(1))
                {
                    struct.virtualMachineUUID = iprot.readString();
                    struct.setVirtualMachineUUIDIsSet(true);
                }
            }
        }

    }

    public static class deleteVirtualImageFromDatastore_result implements
        org.apache.thrift.TBase<deleteVirtualImageFromDatastore_result, deleteVirtualImageFromDatastore_result._Fields>,
        java.io.Serializable, Cloneable, Comparable<deleteVirtualImageFromDatastore_result>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("deleteVirtualImageFromDatastore_result");

        private static final org.apache.thrift.protocol.TField RE_FIELD_DESC =
            new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT,
                (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class,
                new deleteVirtualImageFromDatastore_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class,
                new deleteVirtualImageFromDatastore_resultTupleSchemeFactory());
        }

        public RimpException re; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            RE((short) 1, "re");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // RE
                        return RE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.RE,
                new org.apache.thrift.meta_data.FieldMetaData("re",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData
                .addStructMetaDataMap(deleteVirtualImageFromDatastore_result.class, metaDataMap);
        }

        public deleteVirtualImageFromDatastore_result()
        {
        }

        public deleteVirtualImageFromDatastore_result(RimpException re)
        {
            this();
            this.re = re;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public deleteVirtualImageFromDatastore_result(deleteVirtualImageFromDatastore_result other)
        {
            if (other.isSetRe())
            {
                this.re = new RimpException(other.re);
            }
        }

        public deleteVirtualImageFromDatastore_result deepCopy()
        {
            return new deleteVirtualImageFromDatastore_result(this);
        }

        @Override
        public void clear()
        {
            this.re = null;
        }

        public RimpException getRe()
        {
            return this.re;
        }

        public deleteVirtualImageFromDatastore_result setRe(RimpException re)
        {
            this.re = re;
            return this;
        }

        public void unsetRe()
        {
            this.re = null;
        }

        /** Returns true if field re is set (has been assigned a value) and false otherwise */
        public boolean isSetRe()
        {
            return this.re != null;
        }

        public void setReIsSet(boolean value)
        {
            if (!value)
            {
                this.re = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case RE:
                    if (value == null)
                    {
                        unsetRe();
                    }
                    else
                    {
                        setRe((RimpException) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case RE:
                    return getRe();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case RE:
                    return isSetRe();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof deleteVirtualImageFromDatastore_result)
                return this.equals((deleteVirtualImageFromDatastore_result) that);
            return false;
        }

        public boolean equals(deleteVirtualImageFromDatastore_result that)
        {
            if (that == null)
                return false;

            boolean this_present_re = true && this.isSetRe();
            boolean that_present_re = true && that.isSetRe();
            if (this_present_re || that_present_re)
            {
                if (!(this_present_re && that_present_re))
                    return false;
                if (!this.re.equals(that.re))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_re = true && (isSetRe());
            list.add(present_re);
            if (present_re)
                list.add(re);

            return list.hashCode();
        }

        @Override
        public int compareTo(deleteVirtualImageFromDatastore_result other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetRe())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("deleteVirtualImageFromDatastore_result(");
            boolean first = true;

            sb.append("re:");
            if (this.re == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.re);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class deleteVirtualImageFromDatastore_resultStandardSchemeFactory
            implements SchemeFactory
        {
            public deleteVirtualImageFromDatastore_resultStandardScheme getScheme()
            {
                return new deleteVirtualImageFromDatastore_resultStandardScheme();
            }
        }

        private static class deleteVirtualImageFromDatastore_resultStandardScheme
            extends StandardScheme<deleteVirtualImageFromDatastore_result>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot,
                deleteVirtualImageFromDatastore_result struct) throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // RE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT)
                            {
                                struct.re = new RimpException();
                                struct.re.read(iprot);
                                struct.setReIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                deleteVirtualImageFromDatastore_result struct) throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.re != null)
                {
                    oprot.writeFieldBegin(RE_FIELD_DESC);
                    struct.re.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class deleteVirtualImageFromDatastore_resultTupleSchemeFactory
            implements SchemeFactory
        {
            public deleteVirtualImageFromDatastore_resultTupleScheme getScheme()
            {
                return new deleteVirtualImageFromDatastore_resultTupleScheme();
            }
        }

        private static class deleteVirtualImageFromDatastore_resultTupleScheme
            extends TupleScheme<deleteVirtualImageFromDatastore_result>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot,
                deleteVirtualImageFromDatastore_result struct) throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetRe())
                {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetRe())
                {
                    struct.re.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot,
                deleteVirtualImageFromDatastore_result struct) throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0))
                {
                    struct.re = new RimpException();
                    struct.re.read(iprot);
                    struct.setReIsSet(true);
                }
            }
        }

    }

    public static class copyFromDatastoreToRepository_args implements
        org.apache.thrift.TBase<copyFromDatastoreToRepository_args, copyFromDatastoreToRepository_args._Fields>,
        java.io.Serializable, Cloneable, Comparable<copyFromDatastoreToRepository_args>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("copyFromDatastoreToRepository_args");

        private static final org.apache.thrift.protocol.TField VIRTUAL_MACHINE_UUID_FIELD_DESC =
            new org.apache.thrift.protocol.TField("virtualMachineUUID",
                org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final org.apache.thrift.protocol.TField SNAPSHOT_FIELD_DESC =
            new org.apache.thrift.protocol.TField("snapshot",
                org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final org.apache.thrift.protocol.TField DESTINATION_REPOSITORY_PATH_FIELD_DESC =
            new org.apache.thrift.protocol.TField("destinationRepositoryPath",
                org.apache.thrift.protocol.TType.STRING, (short) 3);

        private static final org.apache.thrift.protocol.TField SOURCE_DATASTORE_PATH_FIELD_DESC =
            new org.apache.thrift.protocol.TField("sourceDatastorePath",
                org.apache.thrift.protocol.TType.STRING, (short) 4);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class,
                new copyFromDatastoreToRepository_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class,
                new copyFromDatastoreToRepository_argsTupleSchemeFactory());
        }

        public String virtualMachineUUID; // required

        public String snapshot; // required

        public String destinationRepositoryPath; // required

        public String sourceDatastorePath; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            VIRTUAL_MACHINE_UUID((short) 1, "virtualMachineUUID"),
            SNAPSHOT((short) 2, "snapshot"),
            DESTINATION_REPOSITORY_PATH((short) 3, "destinationRepositoryPath"),
            SOURCE_DATASTORE_PATH((short) 4, "sourceDatastorePath");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // VIRTUAL_MACHINE_UUID
                        return VIRTUAL_MACHINE_UUID;
                    case 2: // SNAPSHOT
                        return SNAPSHOT;
                    case 3: // DESTINATION_REPOSITORY_PATH
                        return DESTINATION_REPOSITORY_PATH;
                    case 4: // SOURCE_DATASTORE_PATH
                        return SOURCE_DATASTORE_PATH;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.VIRTUAL_MACHINE_UUID,
                new org.apache.thrift.meta_data.FieldMetaData("virtualMachineUUID",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.SNAPSHOT,
                new org.apache.thrift.meta_data.FieldMetaData("snapshot",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.DESTINATION_REPOSITORY_PATH,
                new org.apache.thrift.meta_data.FieldMetaData("destinationRepositoryPath",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.SOURCE_DATASTORE_PATH,
                new org.apache.thrift.meta_data.FieldMetaData("sourceDatastorePath",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData
                .addStructMetaDataMap(copyFromDatastoreToRepository_args.class, metaDataMap);
        }

        public copyFromDatastoreToRepository_args()
        {
        }

        public copyFromDatastoreToRepository_args(String virtualMachineUUID, String snapshot,
            String destinationRepositoryPath, String sourceDatastorePath)
        {
            this();
            this.virtualMachineUUID = virtualMachineUUID;
            this.snapshot = snapshot;
            this.destinationRepositoryPath = destinationRepositoryPath;
            this.sourceDatastorePath = sourceDatastorePath;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public copyFromDatastoreToRepository_args(copyFromDatastoreToRepository_args other)
        {
            if (other.isSetVirtualMachineUUID())
            {
                this.virtualMachineUUID = other.virtualMachineUUID;
            }
            if (other.isSetSnapshot())
            {
                this.snapshot = other.snapshot;
            }
            if (other.isSetDestinationRepositoryPath())
            {
                this.destinationRepositoryPath = other.destinationRepositoryPath;
            }
            if (other.isSetSourceDatastorePath())
            {
                this.sourceDatastorePath = other.sourceDatastorePath;
            }
        }

        public copyFromDatastoreToRepository_args deepCopy()
        {
            return new copyFromDatastoreToRepository_args(this);
        }

        @Override
        public void clear()
        {
            this.virtualMachineUUID = null;
            this.snapshot = null;
            this.destinationRepositoryPath = null;
            this.sourceDatastorePath = null;
        }

        public String getVirtualMachineUUID()
        {
            return this.virtualMachineUUID;
        }

        public copyFromDatastoreToRepository_args setVirtualMachineUUID(String virtualMachineUUID)
        {
            this.virtualMachineUUID = virtualMachineUUID;
            return this;
        }

        public void unsetVirtualMachineUUID()
        {
            this.virtualMachineUUID = null;
        }

        /** Returns true if field virtualMachineUUID is set (has been assigned a value) and false otherwise */
        public boolean isSetVirtualMachineUUID()
        {
            return this.virtualMachineUUID != null;
        }

        public void setVirtualMachineUUIDIsSet(boolean value)
        {
            if (!value)
            {
                this.virtualMachineUUID = null;
            }
        }

        public String getSnapshot()
        {
            return this.snapshot;
        }

        public copyFromDatastoreToRepository_args setSnapshot(String snapshot)
        {
            this.snapshot = snapshot;
            return this;
        }

        public void unsetSnapshot()
        {
            this.snapshot = null;
        }

        /** Returns true if field snapshot is set (has been assigned a value) and false otherwise */
        public boolean isSetSnapshot()
        {
            return this.snapshot != null;
        }

        public void setSnapshotIsSet(boolean value)
        {
            if (!value)
            {
                this.snapshot = null;
            }
        }

        public String getDestinationRepositoryPath()
        {
            return this.destinationRepositoryPath;
        }

        public copyFromDatastoreToRepository_args setDestinationRepositoryPath(
            String destinationRepositoryPath)
        {
            this.destinationRepositoryPath = destinationRepositoryPath;
            return this;
        }

        public void unsetDestinationRepositoryPath()
        {
            this.destinationRepositoryPath = null;
        }

        /** Returns true if field destinationRepositoryPath is set (has been assigned a value) and false otherwise */
        public boolean isSetDestinationRepositoryPath()
        {
            return this.destinationRepositoryPath != null;
        }

        public void setDestinationRepositoryPathIsSet(boolean value)
        {
            if (!value)
            {
                this.destinationRepositoryPath = null;
            }
        }

        public String getSourceDatastorePath()
        {
            return this.sourceDatastorePath;
        }

        public copyFromDatastoreToRepository_args setSourceDatastorePath(String sourceDatastorePath)
        {
            this.sourceDatastorePath = sourceDatastorePath;
            return this;
        }

        public void unsetSourceDatastorePath()
        {
            this.sourceDatastorePath = null;
        }

        /** Returns true if field sourceDatastorePath is set (has been assigned a value) and false otherwise */
        public boolean isSetSourceDatastorePath()
        {
            return this.sourceDatastorePath != null;
        }

        public void setSourceDatastorePathIsSet(boolean value)
        {
            if (!value)
            {
                this.sourceDatastorePath = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case VIRTUAL_MACHINE_UUID:
                    if (value == null)
                    {
                        unsetVirtualMachineUUID();
                    }
                    else
                    {
                        setVirtualMachineUUID((String) value);
                    }
                    break;

                case SNAPSHOT:
                    if (value == null)
                    {
                        unsetSnapshot();
                    }
                    else
                    {
                        setSnapshot((String) value);
                    }
                    break;

                case DESTINATION_REPOSITORY_PATH:
                    if (value == null)
                    {
                        unsetDestinationRepositoryPath();
                    }
                    else
                    {
                        setDestinationRepositoryPath((String) value);
                    }
                    break;

                case SOURCE_DATASTORE_PATH:
                    if (value == null)
                    {
                        unsetSourceDatastorePath();
                    }
                    else
                    {
                        setSourceDatastorePath((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case VIRTUAL_MACHINE_UUID:
                    return getVirtualMachineUUID();

                case SNAPSHOT:
                    return getSnapshot();

                case DESTINATION_REPOSITORY_PATH:
                    return getDestinationRepositoryPath();

                case SOURCE_DATASTORE_PATH:
                    return getSourceDatastorePath();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case VIRTUAL_MACHINE_UUID:
                    return isSetVirtualMachineUUID();
                case SNAPSHOT:
                    return isSetSnapshot();
                case DESTINATION_REPOSITORY_PATH:
                    return isSetDestinationRepositoryPath();
                case SOURCE_DATASTORE_PATH:
                    return isSetSourceDatastorePath();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof copyFromDatastoreToRepository_args)
                return this.equals((copyFromDatastoreToRepository_args) that);
            return false;
        }

        public boolean equals(copyFromDatastoreToRepository_args that)
        {
            if (that == null)
                return false;

            boolean this_present_virtualMachineUUID = true && this.isSetVirtualMachineUUID();
            boolean that_present_virtualMachineUUID = true && that.isSetVirtualMachineUUID();
            if (this_present_virtualMachineUUID || that_present_virtualMachineUUID)
            {
                if (!(this_present_virtualMachineUUID && that_present_virtualMachineUUID))
                    return false;
                if (!this.virtualMachineUUID.equals(that.virtualMachineUUID))
                    return false;
            }

            boolean this_present_snapshot = true && this.isSetSnapshot();
            boolean that_present_snapshot = true && that.isSetSnapshot();
            if (this_present_snapshot || that_present_snapshot)
            {
                if (!(this_present_snapshot && that_present_snapshot))
                    return false;
                if (!this.snapshot.equals(that.snapshot))
                    return false;
            }

            boolean this_present_destinationRepositoryPath =
                true && this.isSetDestinationRepositoryPath();
            boolean that_present_destinationRepositoryPath =
                true && that.isSetDestinationRepositoryPath();
            if (this_present_destinationRepositoryPath || that_present_destinationRepositoryPath)
            {
                if (!(this_present_destinationRepositoryPath
                    && that_present_destinationRepositoryPath))
                    return false;
                if (!this.destinationRepositoryPath.equals(that.destinationRepositoryPath))
                    return false;
            }

            boolean this_present_sourceDatastorePath = true && this.isSetSourceDatastorePath();
            boolean that_present_sourceDatastorePath = true && that.isSetSourceDatastorePath();
            if (this_present_sourceDatastorePath || that_present_sourceDatastorePath)
            {
                if (!(this_present_sourceDatastorePath && that_present_sourceDatastorePath))
                    return false;
                if (!this.sourceDatastorePath.equals(that.sourceDatastorePath))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_virtualMachineUUID = true && (isSetVirtualMachineUUID());
            list.add(present_virtualMachineUUID);
            if (present_virtualMachineUUID)
                list.add(virtualMachineUUID);

            boolean present_snapshot = true && (isSetSnapshot());
            list.add(present_snapshot);
            if (present_snapshot)
                list.add(snapshot);

            boolean present_destinationRepositoryPath = true && (isSetDestinationRepositoryPath());
            list.add(present_destinationRepositoryPath);
            if (present_destinationRepositoryPath)
                list.add(destinationRepositoryPath);

            boolean present_sourceDatastorePath = true && (isSetSourceDatastorePath());
            list.add(present_sourceDatastorePath);
            if (present_sourceDatastorePath)
                list.add(sourceDatastorePath);

            return list.hashCode();
        }

        @Override
        public int compareTo(copyFromDatastoreToRepository_args other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetVirtualMachineUUID())
                .compareTo(other.isSetVirtualMachineUUID());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetVirtualMachineUUID())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.virtualMachineUUID,
                    other.virtualMachineUUID);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSnapshot()).compareTo(other.isSetSnapshot());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetSnapshot())
            {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.snapshot, other.snapshot);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetDestinationRepositoryPath())
                .compareTo(other.isSetDestinationRepositoryPath());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetDestinationRepositoryPath())
            {
                lastComparison = org.apache.thrift.TBaseHelper
                    .compareTo(this.destinationRepositoryPath, other.destinationRepositoryPath);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSourceDatastorePath())
                .compareTo(other.isSetSourceDatastorePath());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetSourceDatastorePath())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceDatastorePath,
                    other.sourceDatastorePath);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("copyFromDatastoreToRepository_args(");
            boolean first = true;

            sb.append("virtualMachineUUID:");
            if (this.virtualMachineUUID == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.virtualMachineUUID);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("snapshot:");
            if (this.snapshot == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.snapshot);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("destinationRepositoryPath:");
            if (this.destinationRepositoryPath == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.destinationRepositoryPath);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("sourceDatastorePath:");
            if (this.sourceDatastorePath == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.sourceDatastorePath);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class copyFromDatastoreToRepository_argsStandardSchemeFactory
            implements SchemeFactory
        {
            public copyFromDatastoreToRepository_argsStandardScheme getScheme()
            {
                return new copyFromDatastoreToRepository_argsStandardScheme();
            }
        }

        private static class copyFromDatastoreToRepository_argsStandardScheme
            extends StandardScheme<copyFromDatastoreToRepository_args>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot,
                copyFromDatastoreToRepository_args struct) throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // VIRTUAL_MACHINE_UUID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.virtualMachineUUID = iprot.readString();
                                struct.setVirtualMachineUUIDIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        case 2: // SNAPSHOT
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.snapshot = iprot.readString();
                                struct.setSnapshotIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        case 3: // DESTINATION_REPOSITORY_PATH
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.destinationRepositoryPath = iprot.readString();
                                struct.setDestinationRepositoryPathIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        case 4: // SOURCE_DATASTORE_PATH
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.sourceDatastorePath = iprot.readString();
                                struct.setSourceDatastorePathIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                copyFromDatastoreToRepository_args struct) throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.virtualMachineUUID != null)
                {
                    oprot.writeFieldBegin(VIRTUAL_MACHINE_UUID_FIELD_DESC);
                    oprot.writeString(struct.virtualMachineUUID);
                    oprot.writeFieldEnd();
                }
                if (struct.snapshot != null)
                {
                    oprot.writeFieldBegin(SNAPSHOT_FIELD_DESC);
                    oprot.writeString(struct.snapshot);
                    oprot.writeFieldEnd();
                }
                if (struct.destinationRepositoryPath != null)
                {
                    oprot.writeFieldBegin(DESTINATION_REPOSITORY_PATH_FIELD_DESC);
                    oprot.writeString(struct.destinationRepositoryPath);
                    oprot.writeFieldEnd();
                }
                if (struct.sourceDatastorePath != null)
                {
                    oprot.writeFieldBegin(SOURCE_DATASTORE_PATH_FIELD_DESC);
                    oprot.writeString(struct.sourceDatastorePath);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class copyFromDatastoreToRepository_argsTupleSchemeFactory
            implements SchemeFactory
        {
            public copyFromDatastoreToRepository_argsTupleScheme getScheme()
            {
                return new copyFromDatastoreToRepository_argsTupleScheme();
            }
        }

        private static class copyFromDatastoreToRepository_argsTupleScheme
            extends TupleScheme<copyFromDatastoreToRepository_args>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot,
                copyFromDatastoreToRepository_args struct) throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetVirtualMachineUUID())
                {
                    optionals.set(0);
                }
                if (struct.isSetSnapshot())
                {
                    optionals.set(1);
                }
                if (struct.isSetDestinationRepositoryPath())
                {
                    optionals.set(2);
                }
                if (struct.isSetSourceDatastorePath())
                {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetVirtualMachineUUID())
                {
                    oprot.writeString(struct.virtualMachineUUID);
                }
                if (struct.isSetSnapshot())
                {
                    oprot.writeString(struct.snapshot);
                }
                if (struct.isSetDestinationRepositoryPath())
                {
                    oprot.writeString(struct.destinationRepositoryPath);
                }
                if (struct.isSetSourceDatastorePath())
                {
                    oprot.writeString(struct.sourceDatastorePath);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot,
                copyFromDatastoreToRepository_args struct) throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0))
                {
                    struct.virtualMachineUUID = iprot.readString();
                    struct.setVirtualMachineUUIDIsSet(true);
                }
                if (incoming.get(1))
                {
                    struct.snapshot = iprot.readString();
                    struct.setSnapshotIsSet(true);
                }
                if (incoming.get(2))
                {
                    struct.destinationRepositoryPath = iprot.readString();
                    struct.setDestinationRepositoryPathIsSet(true);
                }
                if (incoming.get(3))
                {
                    struct.sourceDatastorePath = iprot.readString();
                    struct.setSourceDatastorePathIsSet(true);
                }
            }
        }

    }

    public static class copyFromDatastoreToRepository_result implements
        org.apache.thrift.TBase<copyFromDatastoreToRepository_result, copyFromDatastoreToRepository_result._Fields>,
        java.io.Serializable, Cloneable, Comparable<copyFromDatastoreToRepository_result>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("copyFromDatastoreToRepository_result");

        private static final org.apache.thrift.protocol.TField RE_FIELD_DESC =
            new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT,
                (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class,
                new copyFromDatastoreToRepository_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class,
                new copyFromDatastoreToRepository_resultTupleSchemeFactory());
        }

        public RimpException re; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            RE((short) 1, "re");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // RE
                        return RE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.RE,
                new org.apache.thrift.meta_data.FieldMetaData("re",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData
                .addStructMetaDataMap(copyFromDatastoreToRepository_result.class, metaDataMap);
        }

        public copyFromDatastoreToRepository_result()
        {
        }

        public copyFromDatastoreToRepository_result(RimpException re)
        {
            this();
            this.re = re;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public copyFromDatastoreToRepository_result(copyFromDatastoreToRepository_result other)
        {
            if (other.isSetRe())
            {
                this.re = new RimpException(other.re);
            }
        }

        public copyFromDatastoreToRepository_result deepCopy()
        {
            return new copyFromDatastoreToRepository_result(this);
        }

        @Override
        public void clear()
        {
            this.re = null;
        }

        public RimpException getRe()
        {
            return this.re;
        }

        public copyFromDatastoreToRepository_result setRe(RimpException re)
        {
            this.re = re;
            return this;
        }

        public void unsetRe()
        {
            this.re = null;
        }

        /** Returns true if field re is set (has been assigned a value) and false otherwise */
        public boolean isSetRe()
        {
            return this.re != null;
        }

        public void setReIsSet(boolean value)
        {
            if (!value)
            {
                this.re = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case RE:
                    if (value == null)
                    {
                        unsetRe();
                    }
                    else
                    {
                        setRe((RimpException) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case RE:
                    return getRe();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case RE:
                    return isSetRe();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof copyFromDatastoreToRepository_result)
                return this.equals((copyFromDatastoreToRepository_result) that);
            return false;
        }

        public boolean equals(copyFromDatastoreToRepository_result that)
        {
            if (that == null)
                return false;

            boolean this_present_re = true && this.isSetRe();
            boolean that_present_re = true && that.isSetRe();
            if (this_present_re || that_present_re)
            {
                if (!(this_present_re && that_present_re))
                    return false;
                if (!this.re.equals(that.re))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_re = true && (isSetRe());
            list.add(present_re);
            if (present_re)
                list.add(re);

            return list.hashCode();
        }

        @Override
        public int compareTo(copyFromDatastoreToRepository_result other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetRe())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("copyFromDatastoreToRepository_result(");
            boolean first = true;

            sb.append("re:");
            if (this.re == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.re);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class copyFromDatastoreToRepository_resultStandardSchemeFactory
            implements SchemeFactory
        {
            public copyFromDatastoreToRepository_resultStandardScheme getScheme()
            {
                return new copyFromDatastoreToRepository_resultStandardScheme();
            }
        }

        private static class copyFromDatastoreToRepository_resultStandardScheme
            extends StandardScheme<copyFromDatastoreToRepository_result>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot,
                copyFromDatastoreToRepository_result struct) throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // RE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT)
                            {
                                struct.re = new RimpException();
                                struct.re.read(iprot);
                                struct.setReIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                copyFromDatastoreToRepository_result struct) throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.re != null)
                {
                    oprot.writeFieldBegin(RE_FIELD_DESC);
                    struct.re.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class copyFromDatastoreToRepository_resultTupleSchemeFactory
            implements SchemeFactory
        {
            public copyFromDatastoreToRepository_resultTupleScheme getScheme()
            {
                return new copyFromDatastoreToRepository_resultTupleScheme();
            }
        }

        private static class copyFromDatastoreToRepository_resultTupleScheme
            extends TupleScheme<copyFromDatastoreToRepository_result>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot,
                copyFromDatastoreToRepository_result struct) throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetRe())
                {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetRe())
                {
                    struct.re.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot,
                copyFromDatastoreToRepository_result struct) throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0))
                {
                    struct.re = new RimpException();
                    struct.re.read(iprot);
                    struct.setReIsSet(true);
                }
            }
        }

    }

    public static class instanceDisk_args
        implements org.apache.thrift.TBase<instanceDisk_args, instanceDisk_args._Fields>,
        java.io.Serializable, Cloneable, Comparable<instanceDisk_args>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("instanceDisk_args");

        private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC =
            new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.STRING,
                (short) 1);

        private static final org.apache.thrift.protocol.TField DESTINATION_FIELD_DESC =
            new org.apache.thrift.protocol.TField("destination",
                org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new instanceDisk_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new instanceDisk_argsTupleSchemeFactory());
        }

        public String source; // required

        public String destination; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            SOURCE((short) 1, "source"),
            DESTINATION((short) 2, "destination");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // SOURCE
                        return SOURCE;
                    case 2: // DESTINATION
                        return DESTINATION;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SOURCE,
                new org.apache.thrift.meta_data.FieldMetaData("source",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.DESTINATION,
                new org.apache.thrift.meta_data.FieldMetaData("destination",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(instanceDisk_args.class,
                metaDataMap);
        }

        public instanceDisk_args()
        {
        }

        public instanceDisk_args(String source, String destination)
        {
            this();
            this.source = source;
            this.destination = destination;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public instanceDisk_args(instanceDisk_args other)
        {
            if (other.isSetSource())
            {
                this.source = other.source;
            }
            if (other.isSetDestination())
            {
                this.destination = other.destination;
            }
        }

        public instanceDisk_args deepCopy()
        {
            return new instanceDisk_args(this);
        }

        @Override
        public void clear()
        {
            this.source = null;
            this.destination = null;
        }

        public String getSource()
        {
            return this.source;
        }

        public instanceDisk_args setSource(String source)
        {
            this.source = source;
            return this;
        }

        public void unsetSource()
        {
            this.source = null;
        }

        /** Returns true if field source is set (has been assigned a value) and false otherwise */
        public boolean isSetSource()
        {
            return this.source != null;
        }

        public void setSourceIsSet(boolean value)
        {
            if (!value)
            {
                this.source = null;
            }
        }

        public String getDestination()
        {
            return this.destination;
        }

        public instanceDisk_args setDestination(String destination)
        {
            this.destination = destination;
            return this;
        }

        public void unsetDestination()
        {
            this.destination = null;
        }

        /** Returns true if field destination is set (has been assigned a value) and false otherwise */
        public boolean isSetDestination()
        {
            return this.destination != null;
        }

        public void setDestinationIsSet(boolean value)
        {
            if (!value)
            {
                this.destination = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case SOURCE:
                    if (value == null)
                    {
                        unsetSource();
                    }
                    else
                    {
                        setSource((String) value);
                    }
                    break;

                case DESTINATION:
                    if (value == null)
                    {
                        unsetDestination();
                    }
                    else
                    {
                        setDestination((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case SOURCE:
                    return getSource();

                case DESTINATION:
                    return getDestination();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case SOURCE:
                    return isSetSource();
                case DESTINATION:
                    return isSetDestination();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof instanceDisk_args)
                return this.equals((instanceDisk_args) that);
            return false;
        }

        public boolean equals(instanceDisk_args that)
        {
            if (that == null)
                return false;

            boolean this_present_source = true && this.isSetSource();
            boolean that_present_source = true && that.isSetSource();
            if (this_present_source || that_present_source)
            {
                if (!(this_present_source && that_present_source))
                    return false;
                if (!this.source.equals(that.source))
                    return false;
            }

            boolean this_present_destination = true && this.isSetDestination();
            boolean that_present_destination = true && that.isSetDestination();
            if (this_present_destination || that_present_destination)
            {
                if (!(this_present_destination && that_present_destination))
                    return false;
                if (!this.destination.equals(that.destination))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_source = true && (isSetSource());
            list.add(present_source);
            if (present_source)
                list.add(source);

            boolean present_destination = true && (isSetDestination());
            list.add(present_destination);
            if (present_destination)
                list.add(destination);

            return list.hashCode();
        }

        @Override
        public int compareTo(instanceDisk_args other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetSource())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            lastComparison =
                Boolean.valueOf(isSetDestination()).compareTo(other.isSetDestination());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetDestination())
            {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.destination, other.destination);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("instanceDisk_args(");
            boolean first = true;

            sb.append("source:");
            if (this.source == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.source);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("destination:");
            if (this.destination == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.destination);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class instanceDisk_argsStandardSchemeFactory implements SchemeFactory
        {
            public instanceDisk_argsStandardScheme getScheme()
            {
                return new instanceDisk_argsStandardScheme();
            }
        }

        private static class instanceDisk_argsStandardScheme
            extends StandardScheme<instanceDisk_args>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, instanceDisk_args struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // SOURCE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.source = iprot.readString();
                                struct.setSourceIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        case 2: // DESTINATION
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.destination = iprot.readString();
                                struct.setDestinationIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, instanceDisk_args struct)
                throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.source != null)
                {
                    oprot.writeFieldBegin(SOURCE_FIELD_DESC);
                    oprot.writeString(struct.source);
                    oprot.writeFieldEnd();
                }
                if (struct.destination != null)
                {
                    oprot.writeFieldBegin(DESTINATION_FIELD_DESC);
                    oprot.writeString(struct.destination);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class instanceDisk_argsTupleSchemeFactory implements SchemeFactory
        {
            public instanceDisk_argsTupleScheme getScheme()
            {
                return new instanceDisk_argsTupleScheme();
            }
        }

        private static class instanceDisk_argsTupleScheme extends TupleScheme<instanceDisk_args>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, instanceDisk_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSource())
                {
                    optionals.set(0);
                }
                if (struct.isSetDestination())
                {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSource())
                {
                    oprot.writeString(struct.source);
                }
                if (struct.isSetDestination())
                {
                    oprot.writeString(struct.destination);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, instanceDisk_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0))
                {
                    struct.source = iprot.readString();
                    struct.setSourceIsSet(true);
                }
                if (incoming.get(1))
                {
                    struct.destination = iprot.readString();
                    struct.setDestinationIsSet(true);
                }
            }
        }

    }

    public static class instanceDisk_result
        implements org.apache.thrift.TBase<instanceDisk_result, instanceDisk_result._Fields>,
        java.io.Serializable, Cloneable, Comparable<instanceDisk_result>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("instanceDisk_result");

        private static final org.apache.thrift.protocol.TField RE_FIELD_DESC =
            new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT,
                (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new instanceDisk_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new instanceDisk_resultTupleSchemeFactory());
        }

        public RimpException re; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            RE((short) 1, "re");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // RE
                        return RE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.RE,
                new org.apache.thrift.meta_data.FieldMetaData("re",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData
                .addStructMetaDataMap(instanceDisk_result.class, metaDataMap);
        }

        public instanceDisk_result()
        {
        }

        public instanceDisk_result(RimpException re)
        {
            this();
            this.re = re;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public instanceDisk_result(instanceDisk_result other)
        {
            if (other.isSetRe())
            {
                this.re = new RimpException(other.re);
            }
        }

        public instanceDisk_result deepCopy()
        {
            return new instanceDisk_result(this);
        }

        @Override
        public void clear()
        {
            this.re = null;
        }

        public RimpException getRe()
        {
            return this.re;
        }

        public instanceDisk_result setRe(RimpException re)
        {
            this.re = re;
            return this;
        }

        public void unsetRe()
        {
            this.re = null;
        }

        /** Returns true if field re is set (has been assigned a value) and false otherwise */
        public boolean isSetRe()
        {
            return this.re != null;
        }

        public void setReIsSet(boolean value)
        {
            if (!value)
            {
                this.re = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case RE:
                    if (value == null)
                    {
                        unsetRe();
                    }
                    else
                    {
                        setRe((RimpException) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case RE:
                    return getRe();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case RE:
                    return isSetRe();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof instanceDisk_result)
                return this.equals((instanceDisk_result) that);
            return false;
        }

        public boolean equals(instanceDisk_result that)
        {
            if (that == null)
                return false;

            boolean this_present_re = true && this.isSetRe();
            boolean that_present_re = true && that.isSetRe();
            if (this_present_re || that_present_re)
            {
                if (!(this_present_re && that_present_re))
                    return false;
                if (!this.re.equals(that.re))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_re = true && (isSetRe());
            list.add(present_re);
            if (present_re)
                list.add(re);

            return list.hashCode();
        }

        @Override
        public int compareTo(instanceDisk_result other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetRe())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("instanceDisk_result(");
            boolean first = true;

            sb.append("re:");
            if (this.re == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.re);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class instanceDisk_resultStandardSchemeFactory implements SchemeFactory
        {
            public instanceDisk_resultStandardScheme getScheme()
            {
                return new instanceDisk_resultStandardScheme();
            }
        }

        private static class instanceDisk_resultStandardScheme
            extends StandardScheme<instanceDisk_result>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, instanceDisk_result struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // RE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT)
                            {
                                struct.re = new RimpException();
                                struct.re.read(iprot);
                                struct.setReIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                instanceDisk_result struct) throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.re != null)
                {
                    oprot.writeFieldBegin(RE_FIELD_DESC);
                    struct.re.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class instanceDisk_resultTupleSchemeFactory implements SchemeFactory
        {
            public instanceDisk_resultTupleScheme getScheme()
            {
                return new instanceDisk_resultTupleScheme();
            }
        }

        private static class instanceDisk_resultTupleScheme extends TupleScheme<instanceDisk_result>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, instanceDisk_result struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetRe())
                {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetRe())
                {
                    struct.re.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, instanceDisk_result struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0))
                {
                    struct.re = new RimpException();
                    struct.re.read(iprot);
                    struct.setReIsSet(true);
                }
            }
        }

    }

    public static class renameDisk_args
        implements org.apache.thrift.TBase<renameDisk_args, renameDisk_args._Fields>,
        java.io.Serializable, Cloneable, Comparable<renameDisk_args>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("renameDisk_args");

        private static final org.apache.thrift.protocol.TField OLD_PATH_FIELD_DESC =
            new org.apache.thrift.protocol.TField("oldPath",
                org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final org.apache.thrift.protocol.TField NEW_PATH_FIELD_DESC =
            new org.apache.thrift.protocol.TField("newPath",
                org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new renameDisk_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new renameDisk_argsTupleSchemeFactory());
        }

        public String oldPath; // required

        public String newPath; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            OLD_PATH((short) 1, "oldPath"),
            NEW_PATH((short) 2, "newPath");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // OLD_PATH
                        return OLD_PATH;
                    case 2: // NEW_PATH
                        return NEW_PATH;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.OLD_PATH,
                new org.apache.thrift.meta_data.FieldMetaData("oldPath",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.NEW_PATH,
                new org.apache.thrift.meta_data.FieldMetaData("newPath",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(renameDisk_args.class,
                metaDataMap);
        }

        public renameDisk_args()
        {
        }

        public renameDisk_args(String oldPath, String newPath)
        {
            this();
            this.oldPath = oldPath;
            this.newPath = newPath;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public renameDisk_args(renameDisk_args other)
        {
            if (other.isSetOldPath())
            {
                this.oldPath = other.oldPath;
            }
            if (other.isSetNewPath())
            {
                this.newPath = other.newPath;
            }
        }

        public renameDisk_args deepCopy()
        {
            return new renameDisk_args(this);
        }

        @Override
        public void clear()
        {
            this.oldPath = null;
            this.newPath = null;
        }

        public String getOldPath()
        {
            return this.oldPath;
        }

        public renameDisk_args setOldPath(String oldPath)
        {
            this.oldPath = oldPath;
            return this;
        }

        public void unsetOldPath()
        {
            this.oldPath = null;
        }

        /** Returns true if field oldPath is set (has been assigned a value) and false otherwise */
        public boolean isSetOldPath()
        {
            return this.oldPath != null;
        }

        public void setOldPathIsSet(boolean value)
        {
            if (!value)
            {
                this.oldPath = null;
            }
        }

        public String getNewPath()
        {
            return this.newPath;
        }

        public renameDisk_args setNewPath(String newPath)
        {
            this.newPath = newPath;
            return this;
        }

        public void unsetNewPath()
        {
            this.newPath = null;
        }

        /** Returns true if field newPath is set (has been assigned a value) and false otherwise */
        public boolean isSetNewPath()
        {
            return this.newPath != null;
        }

        public void setNewPathIsSet(boolean value)
        {
            if (!value)
            {
                this.newPath = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case OLD_PATH:
                    if (value == null)
                    {
                        unsetOldPath();
                    }
                    else
                    {
                        setOldPath((String) value);
                    }
                    break;

                case NEW_PATH:
                    if (value == null)
                    {
                        unsetNewPath();
                    }
                    else
                    {
                        setNewPath((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case OLD_PATH:
                    return getOldPath();

                case NEW_PATH:
                    return getNewPath();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case OLD_PATH:
                    return isSetOldPath();
                case NEW_PATH:
                    return isSetNewPath();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof renameDisk_args)
                return this.equals((renameDisk_args) that);
            return false;
        }

        public boolean equals(renameDisk_args that)
        {
            if (that == null)
                return false;

            boolean this_present_oldPath = true && this.isSetOldPath();
            boolean that_present_oldPath = true && that.isSetOldPath();
            if (this_present_oldPath || that_present_oldPath)
            {
                if (!(this_present_oldPath && that_present_oldPath))
                    return false;
                if (!this.oldPath.equals(that.oldPath))
                    return false;
            }

            boolean this_present_newPath = true && this.isSetNewPath();
            boolean that_present_newPath = true && that.isSetNewPath();
            if (this_present_newPath || that_present_newPath)
            {
                if (!(this_present_newPath && that_present_newPath))
                    return false;
                if (!this.newPath.equals(that.newPath))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_oldPath = true && (isSetOldPath());
            list.add(present_oldPath);
            if (present_oldPath)
                list.add(oldPath);

            boolean present_newPath = true && (isSetNewPath());
            list.add(present_newPath);
            if (present_newPath)
                list.add(newPath);

            return list.hashCode();
        }

        @Override
        public int compareTo(renameDisk_args other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetOldPath()).compareTo(other.isSetOldPath());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetOldPath())
            {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.oldPath, other.oldPath);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetNewPath()).compareTo(other.isSetNewPath());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetNewPath())
            {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.newPath, other.newPath);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("renameDisk_args(");
            boolean first = true;

            sb.append("oldPath:");
            if (this.oldPath == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.oldPath);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("newPath:");
            if (this.newPath == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.newPath);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class renameDisk_argsStandardSchemeFactory implements SchemeFactory
        {
            public renameDisk_argsStandardScheme getScheme()
            {
                return new renameDisk_argsStandardScheme();
            }
        }

        private static class renameDisk_argsStandardScheme extends StandardScheme<renameDisk_args>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, renameDisk_args struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // OLD_PATH
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.oldPath = iprot.readString();
                                struct.setOldPathIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        case 2: // NEW_PATH
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.newPath = iprot.readString();
                                struct.setNewPathIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, renameDisk_args struct)
                throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.oldPath != null)
                {
                    oprot.writeFieldBegin(OLD_PATH_FIELD_DESC);
                    oprot.writeString(struct.oldPath);
                    oprot.writeFieldEnd();
                }
                if (struct.newPath != null)
                {
                    oprot.writeFieldBegin(NEW_PATH_FIELD_DESC);
                    oprot.writeString(struct.newPath);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class renameDisk_argsTupleSchemeFactory implements SchemeFactory
        {
            public renameDisk_argsTupleScheme getScheme()
            {
                return new renameDisk_argsTupleScheme();
            }
        }

        private static class renameDisk_argsTupleScheme extends TupleScheme<renameDisk_args>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, renameDisk_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetOldPath())
                {
                    optionals.set(0);
                }
                if (struct.isSetNewPath())
                {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetOldPath())
                {
                    oprot.writeString(struct.oldPath);
                }
                if (struct.isSetNewPath())
                {
                    oprot.writeString(struct.newPath);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, renameDisk_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0))
                {
                    struct.oldPath = iprot.readString();
                    struct.setOldPathIsSet(true);
                }
                if (incoming.get(1))
                {
                    struct.newPath = iprot.readString();
                    struct.setNewPathIsSet(true);
                }
            }
        }

    }

    public static class renameDisk_result
        implements org.apache.thrift.TBase<renameDisk_result, renameDisk_result._Fields>,
        java.io.Serializable, Cloneable, Comparable<renameDisk_result>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("renameDisk_result");

        private static final org.apache.thrift.protocol.TField RE_FIELD_DESC =
            new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT,
                (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new renameDisk_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new renameDisk_resultTupleSchemeFactory());
        }

        public RimpException re; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            RE((short) 1, "re");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // RE
                        return RE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.RE,
                new org.apache.thrift.meta_data.FieldMetaData("re",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(renameDisk_result.class,
                metaDataMap);
        }

        public renameDisk_result()
        {
        }

        public renameDisk_result(RimpException re)
        {
            this();
            this.re = re;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public renameDisk_result(renameDisk_result other)
        {
            if (other.isSetRe())
            {
                this.re = new RimpException(other.re);
            }
        }

        public renameDisk_result deepCopy()
        {
            return new renameDisk_result(this);
        }

        @Override
        public void clear()
        {
            this.re = null;
        }

        public RimpException getRe()
        {
            return this.re;
        }

        public renameDisk_result setRe(RimpException re)
        {
            this.re = re;
            return this;
        }

        public void unsetRe()
        {
            this.re = null;
        }

        /** Returns true if field re is set (has been assigned a value) and false otherwise */
        public boolean isSetRe()
        {
            return this.re != null;
        }

        public void setReIsSet(boolean value)
        {
            if (!value)
            {
                this.re = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case RE:
                    if (value == null)
                    {
                        unsetRe();
                    }
                    else
                    {
                        setRe((RimpException) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case RE:
                    return getRe();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case RE:
                    return isSetRe();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof renameDisk_result)
                return this.equals((renameDisk_result) that);
            return false;
        }

        public boolean equals(renameDisk_result that)
        {
            if (that == null)
                return false;

            boolean this_present_re = true && this.isSetRe();
            boolean that_present_re = true && that.isSetRe();
            if (this_present_re || that_present_re)
            {
                if (!(this_present_re && that_present_re))
                    return false;
                if (!this.re.equals(that.re))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_re = true && (isSetRe());
            list.add(present_re);
            if (present_re)
                list.add(re);

            return list.hashCode();
        }

        @Override
        public int compareTo(renameDisk_result other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetRe())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("renameDisk_result(");
            boolean first = true;

            sb.append("re:");
            if (this.re == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.re);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class renameDisk_resultStandardSchemeFactory implements SchemeFactory
        {
            public renameDisk_resultStandardScheme getScheme()
            {
                return new renameDisk_resultStandardScheme();
            }
        }

        private static class renameDisk_resultStandardScheme
            extends StandardScheme<renameDisk_result>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, renameDisk_result struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // RE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT)
                            {
                                struct.re = new RimpException();
                                struct.re.read(iprot);
                                struct.setReIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, renameDisk_result struct)
                throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.re != null)
                {
                    oprot.writeFieldBegin(RE_FIELD_DESC);
                    struct.re.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class renameDisk_resultTupleSchemeFactory implements SchemeFactory
        {
            public renameDisk_resultTupleScheme getScheme()
            {
                return new renameDisk_resultTupleScheme();
            }
        }

        private static class renameDisk_resultTupleScheme extends TupleScheme<renameDisk_result>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, renameDisk_result struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetRe())
                {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetRe())
                {
                    struct.re.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, renameDisk_result struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0))
                {
                    struct.re = new RimpException();
                    struct.re.read(iprot);
                    struct.setReIsSet(true);
                }
            }
        }

    }

    public static class createVLAN_args
        implements org.apache.thrift.TBase<createVLAN_args, createVLAN_args._Fields>,
        java.io.Serializable, Cloneable, Comparable<createVLAN_args>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("createVLAN_args");

        private static final org.apache.thrift.protocol.TField VLAN_TAG_FIELD_DESC =
            new org.apache.thrift.protocol.TField("vlanTag", org.apache.thrift.protocol.TType.I32,
                (short) 1);

        private static final org.apache.thrift.protocol.TField VLAN_INTERFACE_FIELD_DESC =
            new org.apache.thrift.protocol.TField("vlanInterface",
                org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final org.apache.thrift.protocol.TField BRIDGE_INTERFACE_FIELD_DESC =
            new org.apache.thrift.protocol.TField("bridgeInterface",
                org.apache.thrift.protocol.TType.STRING, (short) 3);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new createVLAN_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new createVLAN_argsTupleSchemeFactory());
        }

        public int vlanTag; // required

        public String vlanInterface; // required

        public String bridgeInterface; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            VLAN_TAG((short) 1, "vlanTag"),
            VLAN_INTERFACE((short) 2, "vlanInterface"),
            BRIDGE_INTERFACE((short) 3, "bridgeInterface");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // VLAN_TAG
                        return VLAN_TAG;
                    case 2: // VLAN_INTERFACE
                        return VLAN_INTERFACE;
                    case 3: // BRIDGE_INTERFACE
                        return BRIDGE_INTERFACE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __VLANTAG_ISSET_ID = 0;

        private byte __isset_bitfield = 0;

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.VLAN_TAG,
                new org.apache.thrift.meta_data.FieldMetaData("vlanTag",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.VLAN_INTERFACE,
                new org.apache.thrift.meta_data.FieldMetaData("vlanInterface",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.BRIDGE_INTERFACE,
                new org.apache.thrift.meta_data.FieldMetaData("bridgeInterface",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createVLAN_args.class,
                metaDataMap);
        }

        public createVLAN_args()
        {
        }

        public createVLAN_args(int vlanTag, String vlanInterface, String bridgeInterface)
        {
            this();
            this.vlanTag = vlanTag;
            setVlanTagIsSet(true);
            this.vlanInterface = vlanInterface;
            this.bridgeInterface = bridgeInterface;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public createVLAN_args(createVLAN_args other)
        {
            __isset_bitfield = other.__isset_bitfield;
            this.vlanTag = other.vlanTag;
            if (other.isSetVlanInterface())
            {
                this.vlanInterface = other.vlanInterface;
            }
            if (other.isSetBridgeInterface())
            {
                this.bridgeInterface = other.bridgeInterface;
            }
        }

        public createVLAN_args deepCopy()
        {
            return new createVLAN_args(this);
        }

        @Override
        public void clear()
        {
            setVlanTagIsSet(false);
            this.vlanTag = 0;
            this.vlanInterface = null;
            this.bridgeInterface = null;
        }

        public int getVlanTag()
        {
            return this.vlanTag;
        }

        public createVLAN_args setVlanTag(int vlanTag)
        {
            this.vlanTag = vlanTag;
            setVlanTagIsSet(true);
            return this;
        }

        public void unsetVlanTag()
        {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VLANTAG_ISSET_ID);
        }

        /** Returns true if field vlanTag is set (has been assigned a value) and false otherwise */
        public boolean isSetVlanTag()
        {
            return EncodingUtils.testBit(__isset_bitfield, __VLANTAG_ISSET_ID);
        }

        public void setVlanTagIsSet(boolean value)
        {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VLANTAG_ISSET_ID, value);
        }

        public String getVlanInterface()
        {
            return this.vlanInterface;
        }

        public createVLAN_args setVlanInterface(String vlanInterface)
        {
            this.vlanInterface = vlanInterface;
            return this;
        }

        public void unsetVlanInterface()
        {
            this.vlanInterface = null;
        }

        /** Returns true if field vlanInterface is set (has been assigned a value) and false otherwise */
        public boolean isSetVlanInterface()
        {
            return this.vlanInterface != null;
        }

        public void setVlanInterfaceIsSet(boolean value)
        {
            if (!value)
            {
                this.vlanInterface = null;
            }
        }

        public String getBridgeInterface()
        {
            return this.bridgeInterface;
        }

        public createVLAN_args setBridgeInterface(String bridgeInterface)
        {
            this.bridgeInterface = bridgeInterface;
            return this;
        }

        public void unsetBridgeInterface()
        {
            this.bridgeInterface = null;
        }

        /** Returns true if field bridgeInterface is set (has been assigned a value) and false otherwise */
        public boolean isSetBridgeInterface()
        {
            return this.bridgeInterface != null;
        }

        public void setBridgeInterfaceIsSet(boolean value)
        {
            if (!value)
            {
                this.bridgeInterface = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case VLAN_TAG:
                    if (value == null)
                    {
                        unsetVlanTag();
                    }
                    else
                    {
                        setVlanTag((Integer) value);
                    }
                    break;

                case VLAN_INTERFACE:
                    if (value == null)
                    {
                        unsetVlanInterface();
                    }
                    else
                    {
                        setVlanInterface((String) value);
                    }
                    break;

                case BRIDGE_INTERFACE:
                    if (value == null)
                    {
                        unsetBridgeInterface();
                    }
                    else
                    {
                        setBridgeInterface((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case VLAN_TAG:
                    return Integer.valueOf(getVlanTag());

                case VLAN_INTERFACE:
                    return getVlanInterface();

                case BRIDGE_INTERFACE:
                    return getBridgeInterface();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case VLAN_TAG:
                    return isSetVlanTag();
                case VLAN_INTERFACE:
                    return isSetVlanInterface();
                case BRIDGE_INTERFACE:
                    return isSetBridgeInterface();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof createVLAN_args)
                return this.equals((createVLAN_args) that);
            return false;
        }

        public boolean equals(createVLAN_args that)
        {
            if (that == null)
                return false;

            boolean this_present_vlanTag = true;
            boolean that_present_vlanTag = true;
            if (this_present_vlanTag || that_present_vlanTag)
            {
                if (!(this_present_vlanTag && that_present_vlanTag))
                    return false;
                if (this.vlanTag != that.vlanTag)
                    return false;
            }

            boolean this_present_vlanInterface = true && this.isSetVlanInterface();
            boolean that_present_vlanInterface = true && that.isSetVlanInterface();
            if (this_present_vlanInterface || that_present_vlanInterface)
            {
                if (!(this_present_vlanInterface && that_present_vlanInterface))
                    return false;
                if (!this.vlanInterface.equals(that.vlanInterface))
                    return false;
            }

            boolean this_present_bridgeInterface = true && this.isSetBridgeInterface();
            boolean that_present_bridgeInterface = true && that.isSetBridgeInterface();
            if (this_present_bridgeInterface || that_present_bridgeInterface)
            {
                if (!(this_present_bridgeInterface && that_present_bridgeInterface))
                    return false;
                if (!this.bridgeInterface.equals(that.bridgeInterface))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_vlanTag = true;
            list.add(present_vlanTag);
            if (present_vlanTag)
                list.add(vlanTag);

            boolean present_vlanInterface = true && (isSetVlanInterface());
            list.add(present_vlanInterface);
            if (present_vlanInterface)
                list.add(vlanInterface);

            boolean present_bridgeInterface = true && (isSetBridgeInterface());
            list.add(present_bridgeInterface);
            if (present_bridgeInterface)
                list.add(bridgeInterface);

            return list.hashCode();
        }

        @Override
        public int compareTo(createVLAN_args other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetVlanTag()).compareTo(other.isSetVlanTag());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetVlanTag())
            {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.vlanTag, other.vlanTag);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            lastComparison =
                Boolean.valueOf(isSetVlanInterface()).compareTo(other.isSetVlanInterface());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetVlanInterface())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vlanInterface,
                    other.vlanInterface);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            lastComparison =
                Boolean.valueOf(isSetBridgeInterface()).compareTo(other.isSetBridgeInterface());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetBridgeInterface())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bridgeInterface,
                    other.bridgeInterface);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("createVLAN_args(");
            boolean first = true;

            sb.append("vlanTag:");
            sb.append(this.vlanTag);
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("vlanInterface:");
            if (this.vlanInterface == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.vlanInterface);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("bridgeInterface:");
            if (this.bridgeInterface == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.bridgeInterface);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class createVLAN_argsStandardSchemeFactory implements SchemeFactory
        {
            public createVLAN_argsStandardScheme getScheme()
            {
                return new createVLAN_argsStandardScheme();
            }
        }

        private static class createVLAN_argsStandardScheme extends StandardScheme<createVLAN_args>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, createVLAN_args struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // VLAN_TAG
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32)
                            {
                                struct.vlanTag = iprot.readI32();
                                struct.setVlanTagIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        case 2: // VLAN_INTERFACE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.vlanInterface = iprot.readString();
                                struct.setVlanInterfaceIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        case 3: // BRIDGE_INTERFACE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.bridgeInterface = iprot.readString();
                                struct.setBridgeInterfaceIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, createVLAN_args struct)
                throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(VLAN_TAG_FIELD_DESC);
                oprot.writeI32(struct.vlanTag);
                oprot.writeFieldEnd();
                if (struct.vlanInterface != null)
                {
                    oprot.writeFieldBegin(VLAN_INTERFACE_FIELD_DESC);
                    oprot.writeString(struct.vlanInterface);
                    oprot.writeFieldEnd();
                }
                if (struct.bridgeInterface != null)
                {
                    oprot.writeFieldBegin(BRIDGE_INTERFACE_FIELD_DESC);
                    oprot.writeString(struct.bridgeInterface);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class createVLAN_argsTupleSchemeFactory implements SchemeFactory
        {
            public createVLAN_argsTupleScheme getScheme()
            {
                return new createVLAN_argsTupleScheme();
            }
        }

        private static class createVLAN_argsTupleScheme extends TupleScheme<createVLAN_args>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, createVLAN_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetVlanTag())
                {
                    optionals.set(0);
                }
                if (struct.isSetVlanInterface())
                {
                    optionals.set(1);
                }
                if (struct.isSetBridgeInterface())
                {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetVlanTag())
                {
                    oprot.writeI32(struct.vlanTag);
                }
                if (struct.isSetVlanInterface())
                {
                    oprot.writeString(struct.vlanInterface);
                }
                if (struct.isSetBridgeInterface())
                {
                    oprot.writeString(struct.bridgeInterface);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, createVLAN_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0))
                {
                    struct.vlanTag = iprot.readI32();
                    struct.setVlanTagIsSet(true);
                }
                if (incoming.get(1))
                {
                    struct.vlanInterface = iprot.readString();
                    struct.setVlanInterfaceIsSet(true);
                }
                if (incoming.get(2))
                {
                    struct.bridgeInterface = iprot.readString();
                    struct.setBridgeInterfaceIsSet(true);
                }
            }
        }

    }

    public static class createVLAN_result
        implements org.apache.thrift.TBase<createVLAN_result, createVLAN_result._Fields>,
        java.io.Serializable, Cloneable, Comparable<createVLAN_result>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("createVLAN_result");

        private static final org.apache.thrift.protocol.TField VE_FIELD_DESC =
            new org.apache.thrift.protocol.TField("ve", org.apache.thrift.protocol.TType.STRUCT,
                (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new createVLAN_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new createVLAN_resultTupleSchemeFactory());
        }

        public VLanException ve; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            VE((short) 1, "ve");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // VE
                        return VE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.VE,
                new org.apache.thrift.meta_data.FieldMetaData("ve",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createVLAN_result.class,
                metaDataMap);
        }

        public createVLAN_result()
        {
        }

        public createVLAN_result(VLanException ve)
        {
            this();
            this.ve = ve;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public createVLAN_result(createVLAN_result other)
        {
            if (other.isSetVe())
            {
                this.ve = new VLanException(other.ve);
            }
        }

        public createVLAN_result deepCopy()
        {
            return new createVLAN_result(this);
        }

        @Override
        public void clear()
        {
            this.ve = null;
        }

        public VLanException getVe()
        {
            return this.ve;
        }

        public createVLAN_result setVe(VLanException ve)
        {
            this.ve = ve;
            return this;
        }

        public void unsetVe()
        {
            this.ve = null;
        }

        /** Returns true if field ve is set (has been assigned a value) and false otherwise */
        public boolean isSetVe()
        {
            return this.ve != null;
        }

        public void setVeIsSet(boolean value)
        {
            if (!value)
            {
                this.ve = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case VE:
                    if (value == null)
                    {
                        unsetVe();
                    }
                    else
                    {
                        setVe((VLanException) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case VE:
                    return getVe();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case VE:
                    return isSetVe();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof createVLAN_result)
                return this.equals((createVLAN_result) that);
            return false;
        }

        public boolean equals(createVLAN_result that)
        {
            if (that == null)
                return false;

            boolean this_present_ve = true && this.isSetVe();
            boolean that_present_ve = true && that.isSetVe();
            if (this_present_ve || that_present_ve)
            {
                if (!(this_present_ve && that_present_ve))
                    return false;
                if (!this.ve.equals(that.ve))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_ve = true && (isSetVe());
            list.add(present_ve);
            if (present_ve)
                list.add(ve);

            return list.hashCode();
        }

        @Override
        public int compareTo(createVLAN_result other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetVe()).compareTo(other.isSetVe());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetVe())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ve, other.ve);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("createVLAN_result(");
            boolean first = true;

            sb.append("ve:");
            if (this.ve == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.ve);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class createVLAN_resultStandardSchemeFactory implements SchemeFactory
        {
            public createVLAN_resultStandardScheme getScheme()
            {
                return new createVLAN_resultStandardScheme();
            }
        }

        private static class createVLAN_resultStandardScheme
            extends StandardScheme<createVLAN_result>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, createVLAN_result struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // VE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT)
                            {
                                struct.ve = new VLanException();
                                struct.ve.read(iprot);
                                struct.setVeIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, createVLAN_result struct)
                throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ve != null)
                {
                    oprot.writeFieldBegin(VE_FIELD_DESC);
                    struct.ve.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class createVLAN_resultTupleSchemeFactory implements SchemeFactory
        {
            public createVLAN_resultTupleScheme getScheme()
            {
                return new createVLAN_resultTupleScheme();
            }
        }

        private static class createVLAN_resultTupleScheme extends TupleScheme<createVLAN_result>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, createVLAN_result struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetVe())
                {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetVe())
                {
                    struct.ve.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, createVLAN_result struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0))
                {
                    struct.ve = new VLanException();
                    struct.ve.read(iprot);
                    struct.setVeIsSet(true);
                }
            }
        }

    }

    public static class deleteVLAN_args
        implements org.apache.thrift.TBase<deleteVLAN_args, deleteVLAN_args._Fields>,
        java.io.Serializable, Cloneable, Comparable<deleteVLAN_args>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("deleteVLAN_args");

        private static final org.apache.thrift.protocol.TField VLAN_TAG_FIELD_DESC =
            new org.apache.thrift.protocol.TField("vlanTag", org.apache.thrift.protocol.TType.I32,
                (short) 1);

        private static final org.apache.thrift.protocol.TField VLAN_INTERFACE_FIELD_DESC =
            new org.apache.thrift.protocol.TField("vlanInterface",
                org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final org.apache.thrift.protocol.TField BRIDGE_INTERFACE_FIELD_DESC =
            new org.apache.thrift.protocol.TField("bridgeInterface",
                org.apache.thrift.protocol.TType.STRING, (short) 3);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new deleteVLAN_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new deleteVLAN_argsTupleSchemeFactory());
        }

        public int vlanTag; // required

        public String vlanInterface; // required

        public String bridgeInterface; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            VLAN_TAG((short) 1, "vlanTag"),
            VLAN_INTERFACE((short) 2, "vlanInterface"),
            BRIDGE_INTERFACE((short) 3, "bridgeInterface");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // VLAN_TAG
                        return VLAN_TAG;
                    case 2: // VLAN_INTERFACE
                        return VLAN_INTERFACE;
                    case 3: // BRIDGE_INTERFACE
                        return BRIDGE_INTERFACE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __VLANTAG_ISSET_ID = 0;

        private byte __isset_bitfield = 0;

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.VLAN_TAG,
                new org.apache.thrift.meta_data.FieldMetaData("vlanTag",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.I32)));
            tmpMap.put(_Fields.VLAN_INTERFACE,
                new org.apache.thrift.meta_data.FieldMetaData("vlanInterface",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.BRIDGE_INTERFACE,
                new org.apache.thrift.meta_data.FieldMetaData("bridgeInterface",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteVLAN_args.class,
                metaDataMap);
        }

        public deleteVLAN_args()
        {
        }

        public deleteVLAN_args(int vlanTag, String vlanInterface, String bridgeInterface)
        {
            this();
            this.vlanTag = vlanTag;
            setVlanTagIsSet(true);
            this.vlanInterface = vlanInterface;
            this.bridgeInterface = bridgeInterface;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public deleteVLAN_args(deleteVLAN_args other)
        {
            __isset_bitfield = other.__isset_bitfield;
            this.vlanTag = other.vlanTag;
            if (other.isSetVlanInterface())
            {
                this.vlanInterface = other.vlanInterface;
            }
            if (other.isSetBridgeInterface())
            {
                this.bridgeInterface = other.bridgeInterface;
            }
        }

        public deleteVLAN_args deepCopy()
        {
            return new deleteVLAN_args(this);
        }

        @Override
        public void clear()
        {
            setVlanTagIsSet(false);
            this.vlanTag = 0;
            this.vlanInterface = null;
            this.bridgeInterface = null;
        }

        public int getVlanTag()
        {
            return this.vlanTag;
        }

        public deleteVLAN_args setVlanTag(int vlanTag)
        {
            this.vlanTag = vlanTag;
            setVlanTagIsSet(true);
            return this;
        }

        public void unsetVlanTag()
        {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VLANTAG_ISSET_ID);
        }

        /** Returns true if field vlanTag is set (has been assigned a value) and false otherwise */
        public boolean isSetVlanTag()
        {
            return EncodingUtils.testBit(__isset_bitfield, __VLANTAG_ISSET_ID);
        }

        public void setVlanTagIsSet(boolean value)
        {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VLANTAG_ISSET_ID, value);
        }

        public String getVlanInterface()
        {
            return this.vlanInterface;
        }

        public deleteVLAN_args setVlanInterface(String vlanInterface)
        {
            this.vlanInterface = vlanInterface;
            return this;
        }

        public void unsetVlanInterface()
        {
            this.vlanInterface = null;
        }

        /** Returns true if field vlanInterface is set (has been assigned a value) and false otherwise */
        public boolean isSetVlanInterface()
        {
            return this.vlanInterface != null;
        }

        public void setVlanInterfaceIsSet(boolean value)
        {
            if (!value)
            {
                this.vlanInterface = null;
            }
        }

        public String getBridgeInterface()
        {
            return this.bridgeInterface;
        }

        public deleteVLAN_args setBridgeInterface(String bridgeInterface)
        {
            this.bridgeInterface = bridgeInterface;
            return this;
        }

        public void unsetBridgeInterface()
        {
            this.bridgeInterface = null;
        }

        /** Returns true if field bridgeInterface is set (has been assigned a value) and false otherwise */
        public boolean isSetBridgeInterface()
        {
            return this.bridgeInterface != null;
        }

        public void setBridgeInterfaceIsSet(boolean value)
        {
            if (!value)
            {
                this.bridgeInterface = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case VLAN_TAG:
                    if (value == null)
                    {
                        unsetVlanTag();
                    }
                    else
                    {
                        setVlanTag((Integer) value);
                    }
                    break;

                case VLAN_INTERFACE:
                    if (value == null)
                    {
                        unsetVlanInterface();
                    }
                    else
                    {
                        setVlanInterface((String) value);
                    }
                    break;

                case BRIDGE_INTERFACE:
                    if (value == null)
                    {
                        unsetBridgeInterface();
                    }
                    else
                    {
                        setBridgeInterface((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case VLAN_TAG:
                    return Integer.valueOf(getVlanTag());

                case VLAN_INTERFACE:
                    return getVlanInterface();

                case BRIDGE_INTERFACE:
                    return getBridgeInterface();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case VLAN_TAG:
                    return isSetVlanTag();
                case VLAN_INTERFACE:
                    return isSetVlanInterface();
                case BRIDGE_INTERFACE:
                    return isSetBridgeInterface();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof deleteVLAN_args)
                return this.equals((deleteVLAN_args) that);
            return false;
        }

        public boolean equals(deleteVLAN_args that)
        {
            if (that == null)
                return false;

            boolean this_present_vlanTag = true;
            boolean that_present_vlanTag = true;
            if (this_present_vlanTag || that_present_vlanTag)
            {
                if (!(this_present_vlanTag && that_present_vlanTag))
                    return false;
                if (this.vlanTag != that.vlanTag)
                    return false;
            }

            boolean this_present_vlanInterface = true && this.isSetVlanInterface();
            boolean that_present_vlanInterface = true && that.isSetVlanInterface();
            if (this_present_vlanInterface || that_present_vlanInterface)
            {
                if (!(this_present_vlanInterface && that_present_vlanInterface))
                    return false;
                if (!this.vlanInterface.equals(that.vlanInterface))
                    return false;
            }

            boolean this_present_bridgeInterface = true && this.isSetBridgeInterface();
            boolean that_present_bridgeInterface = true && that.isSetBridgeInterface();
            if (this_present_bridgeInterface || that_present_bridgeInterface)
            {
                if (!(this_present_bridgeInterface && that_present_bridgeInterface))
                    return false;
                if (!this.bridgeInterface.equals(that.bridgeInterface))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_vlanTag = true;
            list.add(present_vlanTag);
            if (present_vlanTag)
                list.add(vlanTag);

            boolean present_vlanInterface = true && (isSetVlanInterface());
            list.add(present_vlanInterface);
            if (present_vlanInterface)
                list.add(vlanInterface);

            boolean present_bridgeInterface = true && (isSetBridgeInterface());
            list.add(present_bridgeInterface);
            if (present_bridgeInterface)
                list.add(bridgeInterface);

            return list.hashCode();
        }

        @Override
        public int compareTo(deleteVLAN_args other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetVlanTag()).compareTo(other.isSetVlanTag());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetVlanTag())
            {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.vlanTag, other.vlanTag);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            lastComparison =
                Boolean.valueOf(isSetVlanInterface()).compareTo(other.isSetVlanInterface());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetVlanInterface())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vlanInterface,
                    other.vlanInterface);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            lastComparison =
                Boolean.valueOf(isSetBridgeInterface()).compareTo(other.isSetBridgeInterface());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetBridgeInterface())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bridgeInterface,
                    other.bridgeInterface);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("deleteVLAN_args(");
            boolean first = true;

            sb.append("vlanTag:");
            sb.append(this.vlanTag);
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("vlanInterface:");
            if (this.vlanInterface == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.vlanInterface);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("bridgeInterface:");
            if (this.bridgeInterface == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.bridgeInterface);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class deleteVLAN_argsStandardSchemeFactory implements SchemeFactory
        {
            public deleteVLAN_argsStandardScheme getScheme()
            {
                return new deleteVLAN_argsStandardScheme();
            }
        }

        private static class deleteVLAN_argsStandardScheme extends StandardScheme<deleteVLAN_args>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, deleteVLAN_args struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // VLAN_TAG
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32)
                            {
                                struct.vlanTag = iprot.readI32();
                                struct.setVlanTagIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        case 2: // VLAN_INTERFACE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.vlanInterface = iprot.readString();
                                struct.setVlanInterfaceIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        case 3: // BRIDGE_INTERFACE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.bridgeInterface = iprot.readString();
                                struct.setBridgeInterfaceIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, deleteVLAN_args struct)
                throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(VLAN_TAG_FIELD_DESC);
                oprot.writeI32(struct.vlanTag);
                oprot.writeFieldEnd();
                if (struct.vlanInterface != null)
                {
                    oprot.writeFieldBegin(VLAN_INTERFACE_FIELD_DESC);
                    oprot.writeString(struct.vlanInterface);
                    oprot.writeFieldEnd();
                }
                if (struct.bridgeInterface != null)
                {
                    oprot.writeFieldBegin(BRIDGE_INTERFACE_FIELD_DESC);
                    oprot.writeString(struct.bridgeInterface);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class deleteVLAN_argsTupleSchemeFactory implements SchemeFactory
        {
            public deleteVLAN_argsTupleScheme getScheme()
            {
                return new deleteVLAN_argsTupleScheme();
            }
        }

        private static class deleteVLAN_argsTupleScheme extends TupleScheme<deleteVLAN_args>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, deleteVLAN_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetVlanTag())
                {
                    optionals.set(0);
                }
                if (struct.isSetVlanInterface())
                {
                    optionals.set(1);
                }
                if (struct.isSetBridgeInterface())
                {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetVlanTag())
                {
                    oprot.writeI32(struct.vlanTag);
                }
                if (struct.isSetVlanInterface())
                {
                    oprot.writeString(struct.vlanInterface);
                }
                if (struct.isSetBridgeInterface())
                {
                    oprot.writeString(struct.bridgeInterface);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, deleteVLAN_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0))
                {
                    struct.vlanTag = iprot.readI32();
                    struct.setVlanTagIsSet(true);
                }
                if (incoming.get(1))
                {
                    struct.vlanInterface = iprot.readString();
                    struct.setVlanInterfaceIsSet(true);
                }
                if (incoming.get(2))
                {
                    struct.bridgeInterface = iprot.readString();
                    struct.setBridgeInterfaceIsSet(true);
                }
            }
        }

    }

    public static class deleteVLAN_result
        implements org.apache.thrift.TBase<deleteVLAN_result, deleteVLAN_result._Fields>,
        java.io.Serializable, Cloneable, Comparable<deleteVLAN_result>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("deleteVLAN_result");

        private static final org.apache.thrift.protocol.TField VE_FIELD_DESC =
            new org.apache.thrift.protocol.TField("ve", org.apache.thrift.protocol.TType.STRUCT,
                (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new deleteVLAN_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new deleteVLAN_resultTupleSchemeFactory());
        }

        public VLanException ve; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            VE((short) 1, "ve");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // VE
                        return VE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.VE,
                new org.apache.thrift.meta_data.FieldMetaData("ve",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteVLAN_result.class,
                metaDataMap);
        }

        public deleteVLAN_result()
        {
        }

        public deleteVLAN_result(VLanException ve)
        {
            this();
            this.ve = ve;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public deleteVLAN_result(deleteVLAN_result other)
        {
            if (other.isSetVe())
            {
                this.ve = new VLanException(other.ve);
            }
        }

        public deleteVLAN_result deepCopy()
        {
            return new deleteVLAN_result(this);
        }

        @Override
        public void clear()
        {
            this.ve = null;
        }

        public VLanException getVe()
        {
            return this.ve;
        }

        public deleteVLAN_result setVe(VLanException ve)
        {
            this.ve = ve;
            return this;
        }

        public void unsetVe()
        {
            this.ve = null;
        }

        /** Returns true if field ve is set (has been assigned a value) and false otherwise */
        public boolean isSetVe()
        {
            return this.ve != null;
        }

        public void setVeIsSet(boolean value)
        {
            if (!value)
            {
                this.ve = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case VE:
                    if (value == null)
                    {
                        unsetVe();
                    }
                    else
                    {
                        setVe((VLanException) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case VE:
                    return getVe();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case VE:
                    return isSetVe();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof deleteVLAN_result)
                return this.equals((deleteVLAN_result) that);
            return false;
        }

        public boolean equals(deleteVLAN_result that)
        {
            if (that == null)
                return false;

            boolean this_present_ve = true && this.isSetVe();
            boolean that_present_ve = true && that.isSetVe();
            if (this_present_ve || that_present_ve)
            {
                if (!(this_present_ve && that_present_ve))
                    return false;
                if (!this.ve.equals(that.ve))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_ve = true && (isSetVe());
            list.add(present_ve);
            if (present_ve)
                list.add(ve);

            return list.hashCode();
        }

        @Override
        public int compareTo(deleteVLAN_result other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetVe()).compareTo(other.isSetVe());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetVe())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ve, other.ve);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("deleteVLAN_result(");
            boolean first = true;

            sb.append("ve:");
            if (this.ve == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.ve);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class deleteVLAN_resultStandardSchemeFactory implements SchemeFactory
        {
            public deleteVLAN_resultStandardScheme getScheme()
            {
                return new deleteVLAN_resultStandardScheme();
            }
        }

        private static class deleteVLAN_resultStandardScheme
            extends StandardScheme<deleteVLAN_result>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, deleteVLAN_result struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // VE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT)
                            {
                                struct.ve = new VLanException();
                                struct.ve.read(iprot);
                                struct.setVeIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, deleteVLAN_result struct)
                throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ve != null)
                {
                    oprot.writeFieldBegin(VE_FIELD_DESC);
                    struct.ve.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class deleteVLAN_resultTupleSchemeFactory implements SchemeFactory
        {
            public deleteVLAN_resultTupleScheme getScheme()
            {
                return new deleteVLAN_resultTupleScheme();
            }
        }

        private static class deleteVLAN_resultTupleScheme extends TupleScheme<deleteVLAN_result>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, deleteVLAN_result struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetVe())
                {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetVe())
                {
                    struct.ve.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, deleteVLAN_result struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0))
                {
                    struct.ve = new VLanException();
                    struct.ve.read(iprot);
                    struct.setVeIsSet(true);
                }
            }
        }

    }

    public static class checkVLANConfiguration_args implements
        org.apache.thrift.TBase<checkVLANConfiguration_args, checkVLANConfiguration_args._Fields>,
        java.io.Serializable, Cloneable, Comparable<checkVLANConfiguration_args>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("checkVLANConfiguration_args");

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class,
                new checkVLANConfiguration_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new checkVLANConfiguration_argsTupleSchemeFactory());
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData
                .addStructMetaDataMap(checkVLANConfiguration_args.class, metaDataMap);
        }

        public checkVLANConfiguration_args()
        {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public checkVLANConfiguration_args(checkVLANConfiguration_args other)
        {
        }

        public checkVLANConfiguration_args deepCopy()
        {
            return new checkVLANConfiguration_args(this);
        }

        @Override
        public void clear()
        {
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof checkVLANConfiguration_args)
                return this.equals((checkVLANConfiguration_args) that);
            return false;
        }

        public boolean equals(checkVLANConfiguration_args that)
        {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(checkVLANConfiguration_args other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("checkVLANConfiguration_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class checkVLANConfiguration_argsStandardSchemeFactory
            implements SchemeFactory
        {
            public checkVLANConfiguration_argsStandardScheme getScheme()
            {
                return new checkVLANConfiguration_argsStandardScheme();
            }
        }

        private static class checkVLANConfiguration_argsStandardScheme
            extends StandardScheme<checkVLANConfiguration_args>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot,
                checkVLANConfiguration_args struct) throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                checkVLANConfiguration_args struct) throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class checkVLANConfiguration_argsTupleSchemeFactory implements SchemeFactory
        {
            public checkVLANConfiguration_argsTupleScheme getScheme()
            {
                return new checkVLANConfiguration_argsTupleScheme();
            }
        }

        private static class checkVLANConfiguration_argsTupleScheme
            extends TupleScheme<checkVLANConfiguration_args>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot,
                checkVLANConfiguration_args struct) throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot,
                checkVLANConfiguration_args struct) throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class checkVLANConfiguration_result implements
        org.apache.thrift.TBase<checkVLANConfiguration_result, checkVLANConfiguration_result._Fields>,
        java.io.Serializable, Cloneable, Comparable<checkVLANConfiguration_result>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("checkVLANConfiguration_result");

        private static final org.apache.thrift.protocol.TField VE_FIELD_DESC =
            new org.apache.thrift.protocol.TField("ve", org.apache.thrift.protocol.TType.STRUCT,
                (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class,
                new checkVLANConfiguration_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new checkVLANConfiguration_resultTupleSchemeFactory());
        }

        public VLanException ve; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            VE((short) 1, "ve");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // VE
                        return VE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.VE,
                new org.apache.thrift.meta_data.FieldMetaData("ve",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData
                .addStructMetaDataMap(checkVLANConfiguration_result.class, metaDataMap);
        }

        public checkVLANConfiguration_result()
        {
        }

        public checkVLANConfiguration_result(VLanException ve)
        {
            this();
            this.ve = ve;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public checkVLANConfiguration_result(checkVLANConfiguration_result other)
        {
            if (other.isSetVe())
            {
                this.ve = new VLanException(other.ve);
            }
        }

        public checkVLANConfiguration_result deepCopy()
        {
            return new checkVLANConfiguration_result(this);
        }

        @Override
        public void clear()
        {
            this.ve = null;
        }

        public VLanException getVe()
        {
            return this.ve;
        }

        public checkVLANConfiguration_result setVe(VLanException ve)
        {
            this.ve = ve;
            return this;
        }

        public void unsetVe()
        {
            this.ve = null;
        }

        /** Returns true if field ve is set (has been assigned a value) and false otherwise */
        public boolean isSetVe()
        {
            return this.ve != null;
        }

        public void setVeIsSet(boolean value)
        {
            if (!value)
            {
                this.ve = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case VE:
                    if (value == null)
                    {
                        unsetVe();
                    }
                    else
                    {
                        setVe((VLanException) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case VE:
                    return getVe();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case VE:
                    return isSetVe();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof checkVLANConfiguration_result)
                return this.equals((checkVLANConfiguration_result) that);
            return false;
        }

        public boolean equals(checkVLANConfiguration_result that)
        {
            if (that == null)
                return false;

            boolean this_present_ve = true && this.isSetVe();
            boolean that_present_ve = true && that.isSetVe();
            if (this_present_ve || that_present_ve)
            {
                if (!(this_present_ve && that_present_ve))
                    return false;
                if (!this.ve.equals(that.ve))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_ve = true && (isSetVe());
            list.add(present_ve);
            if (present_ve)
                list.add(ve);

            return list.hashCode();
        }

        @Override
        public int compareTo(checkVLANConfiguration_result other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetVe()).compareTo(other.isSetVe());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetVe())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ve, other.ve);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("checkVLANConfiguration_result(");
            boolean first = true;

            sb.append("ve:");
            if (this.ve == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.ve);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class checkVLANConfiguration_resultStandardSchemeFactory
            implements SchemeFactory
        {
            public checkVLANConfiguration_resultStandardScheme getScheme()
            {
                return new checkVLANConfiguration_resultStandardScheme();
            }
        }

        private static class checkVLANConfiguration_resultStandardScheme
            extends StandardScheme<checkVLANConfiguration_result>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot,
                checkVLANConfiguration_result struct) throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // VE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT)
                            {
                                struct.ve = new VLanException();
                                struct.ve.read(iprot);
                                struct.setVeIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                checkVLANConfiguration_result struct) throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.ve != null)
                {
                    oprot.writeFieldBegin(VE_FIELD_DESC);
                    struct.ve.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class checkVLANConfiguration_resultTupleSchemeFactory
            implements SchemeFactory
        {
            public checkVLANConfiguration_resultTupleScheme getScheme()
            {
                return new checkVLANConfiguration_resultTupleScheme();
            }
        }

        private static class checkVLANConfiguration_resultTupleScheme
            extends TupleScheme<checkVLANConfiguration_result>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot,
                checkVLANConfiguration_result struct) throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetVe())
                {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetVe())
                {
                    struct.ve.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot,
                checkVLANConfiguration_result struct) throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0))
                {
                    struct.ve = new VLanException();
                    struct.ve.read(iprot);
                    struct.setVeIsSet(true);
                }
            }
        }

    }

    public static class getInitiatorIQN_args
        implements org.apache.thrift.TBase<getInitiatorIQN_args, getInitiatorIQN_args._Fields>,
        java.io.Serializable, Cloneable, Comparable<getInitiatorIQN_args>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("getInitiatorIQN_args");

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new getInitiatorIQN_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getInitiatorIQN_argsTupleSchemeFactory());
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData
                .addStructMetaDataMap(getInitiatorIQN_args.class, metaDataMap);
        }

        public getInitiatorIQN_args()
        {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getInitiatorIQN_args(getInitiatorIQN_args other)
        {
        }

        public getInitiatorIQN_args deepCopy()
        {
            return new getInitiatorIQN_args(this);
        }

        @Override
        public void clear()
        {
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof getInitiatorIQN_args)
                return this.equals((getInitiatorIQN_args) that);
            return false;
        }

        public boolean equals(getInitiatorIQN_args that)
        {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(getInitiatorIQN_args other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("getInitiatorIQN_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class getInitiatorIQN_argsStandardSchemeFactory implements SchemeFactory
        {
            public getInitiatorIQN_argsStandardScheme getScheme()
            {
                return new getInitiatorIQN_argsStandardScheme();
            }
        }

        private static class getInitiatorIQN_argsStandardScheme
            extends StandardScheme<getInitiatorIQN_args>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot,
                getInitiatorIQN_args struct) throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                getInitiatorIQN_args struct) throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getInitiatorIQN_argsTupleSchemeFactory implements SchemeFactory
        {
            public getInitiatorIQN_argsTupleScheme getScheme()
            {
                return new getInitiatorIQN_argsTupleScheme();
            }
        }

        private static class getInitiatorIQN_argsTupleScheme
            extends TupleScheme<getInitiatorIQN_args>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot,
                getInitiatorIQN_args struct) throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getInitiatorIQN_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class getInitiatorIQN_result
        implements org.apache.thrift.TBase<getInitiatorIQN_result, getInitiatorIQN_result._Fields>,
        java.io.Serializable, Cloneable, Comparable<getInitiatorIQN_result>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("getInitiatorIQN_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC =
            new org.apache.thrift.protocol.TField("success",
                org.apache.thrift.protocol.TType.STRING, (short) 0);

        private static final org.apache.thrift.protocol.TField SE_FIELD_DESC =
            new org.apache.thrift.protocol.TField("se", org.apache.thrift.protocol.TType.STRUCT,
                (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new getInitiatorIQN_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getInitiatorIQN_resultTupleSchemeFactory());
        }

        public String success; // required

        public StorageException se; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            SUCCESS((short) 0, "success"),
            SE((short) 1, "se");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // SE
                        return SE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS,
                new org.apache.thrift.meta_data.FieldMetaData("success",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.SE,
                new org.apache.thrift.meta_data.FieldMetaData("se",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData
                .addStructMetaDataMap(getInitiatorIQN_result.class, metaDataMap);
        }

        public getInitiatorIQN_result()
        {
        }

        public getInitiatorIQN_result(String success, StorageException se)
        {
            this();
            this.success = success;
            this.se = se;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getInitiatorIQN_result(getInitiatorIQN_result other)
        {
            if (other.isSetSuccess())
            {
                this.success = other.success;
            }
            if (other.isSetSe())
            {
                this.se = new StorageException(other.se);
            }
        }

        public getInitiatorIQN_result deepCopy()
        {
            return new getInitiatorIQN_result(this);
        }

        @Override
        public void clear()
        {
            this.success = null;
            this.se = null;
        }

        public String getSuccess()
        {
            return this.success;
        }

        public getInitiatorIQN_result setSuccess(String success)
        {
            this.success = success;
            return this;
        }

        public void unsetSuccess()
        {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess()
        {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value)
        {
            if (!value)
            {
                this.success = null;
            }
        }

        public StorageException getSe()
        {
            return this.se;
        }

        public getInitiatorIQN_result setSe(StorageException se)
        {
            this.se = se;
            return this;
        }

        public void unsetSe()
        {
            this.se = null;
        }

        /** Returns true if field se is set (has been assigned a value) and false otherwise */
        public boolean isSetSe()
        {
            return this.se != null;
        }

        public void setSeIsSet(boolean value)
        {
            if (!value)
            {
                this.se = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case SUCCESS:
                    if (value == null)
                    {
                        unsetSuccess();
                    }
                    else
                    {
                        setSuccess((String) value);
                    }
                    break;

                case SE:
                    if (value == null)
                    {
                        unsetSe();
                    }
                    else
                    {
                        setSe((StorageException) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case SUCCESS:
                    return getSuccess();

                case SE:
                    return getSe();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case SUCCESS:
                    return isSetSuccess();
                case SE:
                    return isSetSe();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof getInitiatorIQN_result)
                return this.equals((getInitiatorIQN_result) that);
            return false;
        }

        public boolean equals(getInitiatorIQN_result that)
        {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success)
            {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_se = true && this.isSetSe();
            boolean that_present_se = true && that.isSetSe();
            if (this_present_se || that_present_se)
            {
                if (!(this_present_se && that_present_se))
                    return false;
                if (!this.se.equals(that.se))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            boolean present_se = true && (isSetSe());
            list.add(present_se);
            if (present_se)
                list.add(se);

            return list.hashCode();
        }

        @Override
        public int compareTo(getInitiatorIQN_result other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetSuccess())
            {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetSe()).compareTo(other.isSetSe());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetSe())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.se, other.se);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("getInitiatorIQN_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.success);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("se:");
            if (this.se == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.se);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class getInitiatorIQN_resultStandardSchemeFactory implements SchemeFactory
        {
            public getInitiatorIQN_resultStandardScheme getScheme()
            {
                return new getInitiatorIQN_resultStandardScheme();
            }
        }

        private static class getInitiatorIQN_resultStandardScheme
            extends StandardScheme<getInitiatorIQN_result>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot,
                getInitiatorIQN_result struct) throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.success = iprot.readString();
                                struct.setSuccessIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        case 1: // SE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT)
                            {
                                struct.se = new StorageException();
                                struct.se.read(iprot);
                                struct.setSeIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                getInitiatorIQN_result struct) throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null)
                {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeString(struct.success);
                    oprot.writeFieldEnd();
                }
                if (struct.se != null)
                {
                    oprot.writeFieldBegin(SE_FIELD_DESC);
                    struct.se.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getInitiatorIQN_resultTupleSchemeFactory implements SchemeFactory
        {
            public getInitiatorIQN_resultTupleScheme getScheme()
            {
                return new getInitiatorIQN_resultTupleScheme();
            }
        }

        private static class getInitiatorIQN_resultTupleScheme
            extends TupleScheme<getInitiatorIQN_result>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot,
                getInitiatorIQN_result struct) throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess())
                {
                    optionals.set(0);
                }
                if (struct.isSetSe())
                {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess())
                {
                    oprot.writeString(struct.success);
                }
                if (struct.isSetSe())
                {
                    struct.se.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot,
                getInitiatorIQN_result struct) throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0))
                {
                    struct.success = iprot.readString();
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1))
                {
                    struct.se = new StorageException();
                    struct.se.read(iprot);
                    struct.setSeIsSet(true);
                }
            }
        }

    }

    public static class rescanISCSI_args
        implements org.apache.thrift.TBase<rescanISCSI_args, rescanISCSI_args._Fields>,
        java.io.Serializable, Cloneable, Comparable<rescanISCSI_args>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("rescanISCSI_args");

        private static final org.apache.thrift.protocol.TField TARGETS_FIELD_DESC =
            new org.apache.thrift.protocol.TField("targets", org.apache.thrift.protocol.TType.LIST,
                (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new rescanISCSI_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new rescanISCSI_argsTupleSchemeFactory());
        }

        public List<String> targets; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            TARGETS((short) 1, "targets");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // TARGETS
                        return TARGETS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.TARGETS, new org.apache.thrift.meta_data.FieldMetaData("targets",
                org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rescanISCSI_args.class,
                metaDataMap);
        }

        public rescanISCSI_args()
        {
        }

        public rescanISCSI_args(List<String> targets)
        {
            this();
            this.targets = targets;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public rescanISCSI_args(rescanISCSI_args other)
        {
            if (other.isSetTargets())
            {
                List<String> __this__targets = new ArrayList<String>(other.targets);
                this.targets = __this__targets;
            }
        }

        public rescanISCSI_args deepCopy()
        {
            return new rescanISCSI_args(this);
        }

        @Override
        public void clear()
        {
            this.targets = null;
        }

        public int getTargetsSize()
        {
            return (this.targets == null) ? 0 : this.targets.size();
        }

        public java.util.Iterator<String> getTargetsIterator()
        {
            return (this.targets == null) ? null : this.targets.iterator();
        }

        public void addToTargets(String elem)
        {
            if (this.targets == null)
            {
                this.targets = new ArrayList<String>();
            }
            this.targets.add(elem);
        }

        public List<String> getTargets()
        {
            return this.targets;
        }

        public rescanISCSI_args setTargets(List<String> targets)
        {
            this.targets = targets;
            return this;
        }

        public void unsetTargets()
        {
            this.targets = null;
        }

        /** Returns true if field targets is set (has been assigned a value) and false otherwise */
        public boolean isSetTargets()
        {
            return this.targets != null;
        }

        public void setTargetsIsSet(boolean value)
        {
            if (!value)
            {
                this.targets = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case TARGETS:
                    if (value == null)
                    {
                        unsetTargets();
                    }
                    else
                    {
                        setTargets((List<String>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case TARGETS:
                    return getTargets();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case TARGETS:
                    return isSetTargets();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof rescanISCSI_args)
                return this.equals((rescanISCSI_args) that);
            return false;
        }

        public boolean equals(rescanISCSI_args that)
        {
            if (that == null)
                return false;

            boolean this_present_targets = true && this.isSetTargets();
            boolean that_present_targets = true && that.isSetTargets();
            if (this_present_targets || that_present_targets)
            {
                if (!(this_present_targets && that_present_targets))
                    return false;
                if (!this.targets.equals(that.targets))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_targets = true && (isSetTargets());
            list.add(present_targets);
            if (present_targets)
                list.add(targets);

            return list.hashCode();
        }

        @Override
        public int compareTo(rescanISCSI_args other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetTargets()).compareTo(other.isSetTargets());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetTargets())
            {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.targets, other.targets);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("rescanISCSI_args(");
            boolean first = true;

            sb.append("targets:");
            if (this.targets == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.targets);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class rescanISCSI_argsStandardSchemeFactory implements SchemeFactory
        {
            public rescanISCSI_argsStandardScheme getScheme()
            {
                return new rescanISCSI_argsStandardScheme();
            }
        }

        private static class rescanISCSI_argsStandardScheme extends StandardScheme<rescanISCSI_args>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, rescanISCSI_args struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // TARGETS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST)
                            {
                                {
                                    org.apache.thrift.protocol.TList _list34 =
                                        iprot.readListBegin();
                                    struct.targets = new ArrayList<String>(_list34.size);
                                    String _elem35;
                                    for (int _i36 = 0; _i36 < _list34.size; ++_i36)
                                    {
                                        _elem35 = iprot.readString();
                                        struct.targets.add(_elem35);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setTargetsIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, rescanISCSI_args struct)
                throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.targets != null)
                {
                    oprot.writeFieldBegin(TARGETS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(
                            org.apache.thrift.protocol.TType.STRING, struct.targets.size()));
                        for (String _iter37 : struct.targets)
                        {
                            oprot.writeString(_iter37);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class rescanISCSI_argsTupleSchemeFactory implements SchemeFactory
        {
            public rescanISCSI_argsTupleScheme getScheme()
            {
                return new rescanISCSI_argsTupleScheme();
            }
        }

        private static class rescanISCSI_argsTupleScheme extends TupleScheme<rescanISCSI_args>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, rescanISCSI_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetTargets())
                {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetTargets())
                {
                    {
                        oprot.writeI32(struct.targets.size());
                        for (String _iter38 : struct.targets)
                        {
                            oprot.writeString(_iter38);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, rescanISCSI_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0))
                {
                    {
                        org.apache.thrift.protocol.TList _list39 =
                            new org.apache.thrift.protocol.TList(
                                org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                        struct.targets = new ArrayList<String>(_list39.size);
                        String _elem40;
                        for (int _i41 = 0; _i41 < _list39.size; ++_i41)
                        {
                            _elem40 = iprot.readString();
                            struct.targets.add(_elem40);
                        }
                    }
                    struct.setTargetsIsSet(true);
                }
            }
        }

    }

    public static class rescanISCSI_result
        implements org.apache.thrift.TBase<rescanISCSI_result, rescanISCSI_result._Fields>,
        java.io.Serializable, Cloneable, Comparable<rescanISCSI_result>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("rescanISCSI_result");

        private static final org.apache.thrift.protocol.TField SE_FIELD_DESC =
            new org.apache.thrift.protocol.TField("se", org.apache.thrift.protocol.TType.STRUCT,
                (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new rescanISCSI_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new rescanISCSI_resultTupleSchemeFactory());
        }

        public StorageException se; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            SE((short) 1, "se");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // SE
                        return SE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SE,
                new org.apache.thrift.meta_data.FieldMetaData("se",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rescanISCSI_result.class,
                metaDataMap);
        }

        public rescanISCSI_result()
        {
        }

        public rescanISCSI_result(StorageException se)
        {
            this();
            this.se = se;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public rescanISCSI_result(rescanISCSI_result other)
        {
            if (other.isSetSe())
            {
                this.se = new StorageException(other.se);
            }
        }

        public rescanISCSI_result deepCopy()
        {
            return new rescanISCSI_result(this);
        }

        @Override
        public void clear()
        {
            this.se = null;
        }

        public StorageException getSe()
        {
            return this.se;
        }

        public rescanISCSI_result setSe(StorageException se)
        {
            this.se = se;
            return this;
        }

        public void unsetSe()
        {
            this.se = null;
        }

        /** Returns true if field se is set (has been assigned a value) and false otherwise */
        public boolean isSetSe()
        {
            return this.se != null;
        }

        public void setSeIsSet(boolean value)
        {
            if (!value)
            {
                this.se = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case SE:
                    if (value == null)
                    {
                        unsetSe();
                    }
                    else
                    {
                        setSe((StorageException) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case SE:
                    return getSe();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case SE:
                    return isSetSe();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof rescanISCSI_result)
                return this.equals((rescanISCSI_result) that);
            return false;
        }

        public boolean equals(rescanISCSI_result that)
        {
            if (that == null)
                return false;

            boolean this_present_se = true && this.isSetSe();
            boolean that_present_se = true && that.isSetSe();
            if (this_present_se || that_present_se)
            {
                if (!(this_present_se && that_present_se))
                    return false;
                if (!this.se.equals(that.se))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_se = true && (isSetSe());
            list.add(present_se);
            if (present_se)
                list.add(se);

            return list.hashCode();
        }

        @Override
        public int compareTo(rescanISCSI_result other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSe()).compareTo(other.isSetSe());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetSe())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.se, other.se);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("rescanISCSI_result(");
            boolean first = true;

            sb.append("se:");
            if (this.se == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.se);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class rescanISCSI_resultStandardSchemeFactory implements SchemeFactory
        {
            public rescanISCSI_resultStandardScheme getScheme()
            {
                return new rescanISCSI_resultStandardScheme();
            }
        }

        private static class rescanISCSI_resultStandardScheme
            extends StandardScheme<rescanISCSI_result>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, rescanISCSI_result struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // SE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT)
                            {
                                struct.se = new StorageException();
                                struct.se.read(iprot);
                                struct.setSeIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, rescanISCSI_result struct)
                throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.se != null)
                {
                    oprot.writeFieldBegin(SE_FIELD_DESC);
                    struct.se.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class rescanISCSI_resultTupleSchemeFactory implements SchemeFactory
        {
            public rescanISCSI_resultTupleScheme getScheme()
            {
                return new rescanISCSI_resultTupleScheme();
            }
        }

        private static class rescanISCSI_resultTupleScheme extends TupleScheme<rescanISCSI_result>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, rescanISCSI_result struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSe())
                {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSe())
                {
                    struct.se.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, rescanISCSI_result struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0))
                {
                    struct.se = new StorageException();
                    struct.se.read(iprot);
                    struct.setSeIsSet(true);
                }
            }
        }

    }

    public static class getNodeInfo_args
        implements org.apache.thrift.TBase<getNodeInfo_args, getNodeInfo_args._Fields>,
        java.io.Serializable, Cloneable, Comparable<getNodeInfo_args>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("getNodeInfo_args");

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new getNodeInfo_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getNodeInfo_argsTupleSchemeFactory());
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNodeInfo_args.class,
                metaDataMap);
        }

        public getNodeInfo_args()
        {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getNodeInfo_args(getNodeInfo_args other)
        {
        }

        public getNodeInfo_args deepCopy()
        {
            return new getNodeInfo_args(this);
        }

        @Override
        public void clear()
        {
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof getNodeInfo_args)
                return this.equals((getNodeInfo_args) that);
            return false;
        }

        public boolean equals(getNodeInfo_args that)
        {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(getNodeInfo_args other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("getNodeInfo_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class getNodeInfo_argsStandardSchemeFactory implements SchemeFactory
        {
            public getNodeInfo_argsStandardScheme getScheme()
            {
                return new getNodeInfo_argsStandardScheme();
            }
        }

        private static class getNodeInfo_argsStandardScheme extends StandardScheme<getNodeInfo_args>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getNodeInfo_args struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getNodeInfo_args struct)
                throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getNodeInfo_argsTupleSchemeFactory implements SchemeFactory
        {
            public getNodeInfo_argsTupleScheme getScheme()
            {
                return new getNodeInfo_argsTupleScheme();
            }
        }

        private static class getNodeInfo_argsTupleScheme extends TupleScheme<getNodeInfo_args>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getNodeInfo_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getNodeInfo_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class getNodeInfo_result
        implements org.apache.thrift.TBase<getNodeInfo_result, getNodeInfo_result._Fields>,
        java.io.Serializable, Cloneable, Comparable<getNodeInfo_result>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("getNodeInfo_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC =
            new org.apache.thrift.protocol.TField("success",
                org.apache.thrift.protocol.TType.STRUCT, (short) 0);

        private static final org.apache.thrift.protocol.TField LIBVIRT_EXCEPTION_FIELD_DESC =
            new org.apache.thrift.protocol.TField("libvirtException",
                org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new getNodeInfo_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getNodeInfo_resultTupleSchemeFactory());
        }

        public NodeInfo success; // required

        public LibvirtException libvirtException; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            SUCCESS((short) 0, "success"),
            LIBVIRT_EXCEPTION((short) 1, "libvirtException");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // LIBVIRT_EXCEPTION
                        return LIBVIRT_EXCEPTION;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS,
                new org.apache.thrift.meta_data.FieldMetaData("success",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(
                        org.apache.thrift.protocol.TType.STRUCT, NodeInfo.class)));
            tmpMap.put(_Fields.LIBVIRT_EXCEPTION,
                new org.apache.thrift.meta_data.FieldMetaData("libvirtException",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNodeInfo_result.class,
                metaDataMap);
        }

        public getNodeInfo_result()
        {
        }

        public getNodeInfo_result(NodeInfo success, LibvirtException libvirtException)
        {
            this();
            this.success = success;
            this.libvirtException = libvirtException;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getNodeInfo_result(getNodeInfo_result other)
        {
            if (other.isSetSuccess())
            {
                this.success = new NodeInfo(other.success);
            }
            if (other.isSetLibvirtException())
            {
                this.libvirtException = new LibvirtException(other.libvirtException);
            }
        }

        public getNodeInfo_result deepCopy()
        {
            return new getNodeInfo_result(this);
        }

        @Override
        public void clear()
        {
            this.success = null;
            this.libvirtException = null;
        }

        public NodeInfo getSuccess()
        {
            return this.success;
        }

        public getNodeInfo_result setSuccess(NodeInfo success)
        {
            this.success = success;
            return this;
        }

        public void unsetSuccess()
        {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess()
        {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value)
        {
            if (!value)
            {
                this.success = null;
            }
        }

        public LibvirtException getLibvirtException()
        {
            return this.libvirtException;
        }

        public getNodeInfo_result setLibvirtException(LibvirtException libvirtException)
        {
            this.libvirtException = libvirtException;
            return this;
        }

        public void unsetLibvirtException()
        {
            this.libvirtException = null;
        }

        /** Returns true if field libvirtException is set (has been assigned a value) and false otherwise */
        public boolean isSetLibvirtException()
        {
            return this.libvirtException != null;
        }

        public void setLibvirtExceptionIsSet(boolean value)
        {
            if (!value)
            {
                this.libvirtException = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case SUCCESS:
                    if (value == null)
                    {
                        unsetSuccess();
                    }
                    else
                    {
                        setSuccess((NodeInfo) value);
                    }
                    break;

                case LIBVIRT_EXCEPTION:
                    if (value == null)
                    {
                        unsetLibvirtException();
                    }
                    else
                    {
                        setLibvirtException((LibvirtException) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case SUCCESS:
                    return getSuccess();

                case LIBVIRT_EXCEPTION:
                    return getLibvirtException();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case SUCCESS:
                    return isSetSuccess();
                case LIBVIRT_EXCEPTION:
                    return isSetLibvirtException();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof getNodeInfo_result)
                return this.equals((getNodeInfo_result) that);
            return false;
        }

        public boolean equals(getNodeInfo_result that)
        {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success)
            {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_libvirtException = true && this.isSetLibvirtException();
            boolean that_present_libvirtException = true && that.isSetLibvirtException();
            if (this_present_libvirtException || that_present_libvirtException)
            {
                if (!(this_present_libvirtException && that_present_libvirtException))
                    return false;
                if (!this.libvirtException.equals(that.libvirtException))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            boolean present_libvirtException = true && (isSetLibvirtException());
            list.add(present_libvirtException);
            if (present_libvirtException)
                list.add(libvirtException);

            return list.hashCode();
        }

        @Override
        public int compareTo(getNodeInfo_result other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetSuccess())
            {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            lastComparison =
                Boolean.valueOf(isSetLibvirtException()).compareTo(other.isSetLibvirtException());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetLibvirtException())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.libvirtException,
                    other.libvirtException);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("getNodeInfo_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.success);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("libvirtException:");
            if (this.libvirtException == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.libvirtException);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
            if (success != null)
            {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class getNodeInfo_resultStandardSchemeFactory implements SchemeFactory
        {
            public getNodeInfo_resultStandardScheme getScheme()
            {
                return new getNodeInfo_resultStandardScheme();
            }
        }

        private static class getNodeInfo_resultStandardScheme
            extends StandardScheme<getNodeInfo_result>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getNodeInfo_result struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT)
                            {
                                struct.success = new NodeInfo();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        case 1: // LIBVIRT_EXCEPTION
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT)
                            {
                                struct.libvirtException = new LibvirtException();
                                struct.libvirtException.read(iprot);
                                struct.setLibvirtExceptionIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getNodeInfo_result struct)
                throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null)
                {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.libvirtException != null)
                {
                    oprot.writeFieldBegin(LIBVIRT_EXCEPTION_FIELD_DESC);
                    struct.libvirtException.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getNodeInfo_resultTupleSchemeFactory implements SchemeFactory
        {
            public getNodeInfo_resultTupleScheme getScheme()
            {
                return new getNodeInfo_resultTupleScheme();
            }
        }

        private static class getNodeInfo_resultTupleScheme extends TupleScheme<getNodeInfo_result>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getNodeInfo_result struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess())
                {
                    optionals.set(0);
                }
                if (struct.isSetLibvirtException())
                {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess())
                {
                    struct.success.write(oprot);
                }
                if (struct.isSetLibvirtException())
                {
                    struct.libvirtException.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getNodeInfo_result struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0))
                {
                    struct.success = new NodeInfo();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1))
                {
                    struct.libvirtException = new LibvirtException();
                    struct.libvirtException.read(iprot);
                    struct.setLibvirtExceptionIsSet(true);
                }
            }
        }

    }

    public static class defineDomain_args
        implements org.apache.thrift.TBase<defineDomain_args, defineDomain_args._Fields>,
        java.io.Serializable, Cloneable, Comparable<defineDomain_args>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("defineDomain_args");

        private static final org.apache.thrift.protocol.TField XML_DESC_FIELD_DESC =
            new org.apache.thrift.protocol.TField("xmlDesc",
                org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new defineDomain_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new defineDomain_argsTupleSchemeFactory());
        }

        public String xmlDesc; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            XML_DESC((short) 1, "xmlDesc");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // XML_DESC
                        return XML_DESC;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.XML_DESC,
                new org.apache.thrift.meta_data.FieldMetaData("xmlDesc",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(defineDomain_args.class,
                metaDataMap);
        }

        public defineDomain_args()
        {
        }

        public defineDomain_args(String xmlDesc)
        {
            this();
            this.xmlDesc = xmlDesc;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public defineDomain_args(defineDomain_args other)
        {
            if (other.isSetXmlDesc())
            {
                this.xmlDesc = other.xmlDesc;
            }
        }

        public defineDomain_args deepCopy()
        {
            return new defineDomain_args(this);
        }

        @Override
        public void clear()
        {
            this.xmlDesc = null;
        }

        public String getXmlDesc()
        {
            return this.xmlDesc;
        }

        public defineDomain_args setXmlDesc(String xmlDesc)
        {
            this.xmlDesc = xmlDesc;
            return this;
        }

        public void unsetXmlDesc()
        {
            this.xmlDesc = null;
        }

        /** Returns true if field xmlDesc is set (has been assigned a value) and false otherwise */
        public boolean isSetXmlDesc()
        {
            return this.xmlDesc != null;
        }

        public void setXmlDescIsSet(boolean value)
        {
            if (!value)
            {
                this.xmlDesc = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case XML_DESC:
                    if (value == null)
                    {
                        unsetXmlDesc();
                    }
                    else
                    {
                        setXmlDesc((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case XML_DESC:
                    return getXmlDesc();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case XML_DESC:
                    return isSetXmlDesc();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof defineDomain_args)
                return this.equals((defineDomain_args) that);
            return false;
        }

        public boolean equals(defineDomain_args that)
        {
            if (that == null)
                return false;

            boolean this_present_xmlDesc = true && this.isSetXmlDesc();
            boolean that_present_xmlDesc = true && that.isSetXmlDesc();
            if (this_present_xmlDesc || that_present_xmlDesc)
            {
                if (!(this_present_xmlDesc && that_present_xmlDesc))
                    return false;
                if (!this.xmlDesc.equals(that.xmlDesc))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_xmlDesc = true && (isSetXmlDesc());
            list.add(present_xmlDesc);
            if (present_xmlDesc)
                list.add(xmlDesc);

            return list.hashCode();
        }

        @Override
        public int compareTo(defineDomain_args other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetXmlDesc()).compareTo(other.isSetXmlDesc());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetXmlDesc())
            {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.xmlDesc, other.xmlDesc);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("defineDomain_args(");
            boolean first = true;

            sb.append("xmlDesc:");
            if (this.xmlDesc == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.xmlDesc);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class defineDomain_argsStandardSchemeFactory implements SchemeFactory
        {
            public defineDomain_argsStandardScheme getScheme()
            {
                return new defineDomain_argsStandardScheme();
            }
        }

        private static class defineDomain_argsStandardScheme
            extends StandardScheme<defineDomain_args>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, defineDomain_args struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // XML_DESC
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.xmlDesc = iprot.readString();
                                struct.setXmlDescIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, defineDomain_args struct)
                throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.xmlDesc != null)
                {
                    oprot.writeFieldBegin(XML_DESC_FIELD_DESC);
                    oprot.writeString(struct.xmlDesc);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class defineDomain_argsTupleSchemeFactory implements SchemeFactory
        {
            public defineDomain_argsTupleScheme getScheme()
            {
                return new defineDomain_argsTupleScheme();
            }
        }

        private static class defineDomain_argsTupleScheme extends TupleScheme<defineDomain_args>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, defineDomain_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetXmlDesc())
                {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetXmlDesc())
                {
                    oprot.writeString(struct.xmlDesc);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, defineDomain_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0))
                {
                    struct.xmlDesc = iprot.readString();
                    struct.setXmlDescIsSet(true);
                }
            }
        }

    }

    public static class defineDomain_result
        implements org.apache.thrift.TBase<defineDomain_result, defineDomain_result._Fields>,
        java.io.Serializable, Cloneable, Comparable<defineDomain_result>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("defineDomain_result");

        private static final org.apache.thrift.protocol.TField LIBVIRT_EXCEPTION_FIELD_DESC =
            new org.apache.thrift.protocol.TField("libvirtException",
                org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new defineDomain_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new defineDomain_resultTupleSchemeFactory());
        }

        public LibvirtException libvirtException; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            LIBVIRT_EXCEPTION((short) 1, "libvirtException");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // LIBVIRT_EXCEPTION
                        return LIBVIRT_EXCEPTION;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.LIBVIRT_EXCEPTION,
                new org.apache.thrift.meta_data.FieldMetaData("libvirtException",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData
                .addStructMetaDataMap(defineDomain_result.class, metaDataMap);
        }

        public defineDomain_result()
        {
        }

        public defineDomain_result(LibvirtException libvirtException)
        {
            this();
            this.libvirtException = libvirtException;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public defineDomain_result(defineDomain_result other)
        {
            if (other.isSetLibvirtException())
            {
                this.libvirtException = new LibvirtException(other.libvirtException);
            }
        }

        public defineDomain_result deepCopy()
        {
            return new defineDomain_result(this);
        }

        @Override
        public void clear()
        {
            this.libvirtException = null;
        }

        public LibvirtException getLibvirtException()
        {
            return this.libvirtException;
        }

        public defineDomain_result setLibvirtException(LibvirtException libvirtException)
        {
            this.libvirtException = libvirtException;
            return this;
        }

        public void unsetLibvirtException()
        {
            this.libvirtException = null;
        }

        /** Returns true if field libvirtException is set (has been assigned a value) and false otherwise */
        public boolean isSetLibvirtException()
        {
            return this.libvirtException != null;
        }

        public void setLibvirtExceptionIsSet(boolean value)
        {
            if (!value)
            {
                this.libvirtException = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    if (value == null)
                    {
                        unsetLibvirtException();
                    }
                    else
                    {
                        setLibvirtException((LibvirtException) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    return getLibvirtException();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    return isSetLibvirtException();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof defineDomain_result)
                return this.equals((defineDomain_result) that);
            return false;
        }

        public boolean equals(defineDomain_result that)
        {
            if (that == null)
                return false;

            boolean this_present_libvirtException = true && this.isSetLibvirtException();
            boolean that_present_libvirtException = true && that.isSetLibvirtException();
            if (this_present_libvirtException || that_present_libvirtException)
            {
                if (!(this_present_libvirtException && that_present_libvirtException))
                    return false;
                if (!this.libvirtException.equals(that.libvirtException))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_libvirtException = true && (isSetLibvirtException());
            list.add(present_libvirtException);
            if (present_libvirtException)
                list.add(libvirtException);

            return list.hashCode();
        }

        @Override
        public int compareTo(defineDomain_result other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison =
                Boolean.valueOf(isSetLibvirtException()).compareTo(other.isSetLibvirtException());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetLibvirtException())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.libvirtException,
                    other.libvirtException);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("defineDomain_result(");
            boolean first = true;

            sb.append("libvirtException:");
            if (this.libvirtException == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.libvirtException);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class defineDomain_resultStandardSchemeFactory implements SchemeFactory
        {
            public defineDomain_resultStandardScheme getScheme()
            {
                return new defineDomain_resultStandardScheme();
            }
        }

        private static class defineDomain_resultStandardScheme
            extends StandardScheme<defineDomain_result>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, defineDomain_result struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // LIBVIRT_EXCEPTION
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT)
                            {
                                struct.libvirtException = new LibvirtException();
                                struct.libvirtException.read(iprot);
                                struct.setLibvirtExceptionIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                defineDomain_result struct) throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.libvirtException != null)
                {
                    oprot.writeFieldBegin(LIBVIRT_EXCEPTION_FIELD_DESC);
                    struct.libvirtException.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class defineDomain_resultTupleSchemeFactory implements SchemeFactory
        {
            public defineDomain_resultTupleScheme getScheme()
            {
                return new defineDomain_resultTupleScheme();
            }
        }

        private static class defineDomain_resultTupleScheme extends TupleScheme<defineDomain_result>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, defineDomain_result struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetLibvirtException())
                {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetLibvirtException())
                {
                    struct.libvirtException.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, defineDomain_result struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0))
                {
                    struct.libvirtException = new LibvirtException();
                    struct.libvirtException.read(iprot);
                    struct.setLibvirtExceptionIsSet(true);
                }
            }
        }

    }

    public static class undefineDomain_args
        implements org.apache.thrift.TBase<undefineDomain_args, undefineDomain_args._Fields>,
        java.io.Serializable, Cloneable, Comparable<undefineDomain_args>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("undefineDomain_args");

        private static final org.apache.thrift.protocol.TField DOMAIN_NAME_FIELD_DESC =
            new org.apache.thrift.protocol.TField("domainName",
                org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new undefineDomain_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new undefineDomain_argsTupleSchemeFactory());
        }

        public String domainName; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            DOMAIN_NAME((short) 1, "domainName");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // DOMAIN_NAME
                        return DOMAIN_NAME;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.DOMAIN_NAME,
                new org.apache.thrift.meta_data.FieldMetaData("domainName",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData
                .addStructMetaDataMap(undefineDomain_args.class, metaDataMap);
        }

        public undefineDomain_args()
        {
        }

        public undefineDomain_args(String domainName)
        {
            this();
            this.domainName = domainName;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public undefineDomain_args(undefineDomain_args other)
        {
            if (other.isSetDomainName())
            {
                this.domainName = other.domainName;
            }
        }

        public undefineDomain_args deepCopy()
        {
            return new undefineDomain_args(this);
        }

        @Override
        public void clear()
        {
            this.domainName = null;
        }

        public String getDomainName()
        {
            return this.domainName;
        }

        public undefineDomain_args setDomainName(String domainName)
        {
            this.domainName = domainName;
            return this;
        }

        public void unsetDomainName()
        {
            this.domainName = null;
        }

        /** Returns true if field domainName is set (has been assigned a value) and false otherwise */
        public boolean isSetDomainName()
        {
            return this.domainName != null;
        }

        public void setDomainNameIsSet(boolean value)
        {
            if (!value)
            {
                this.domainName = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case DOMAIN_NAME:
                    if (value == null)
                    {
                        unsetDomainName();
                    }
                    else
                    {
                        setDomainName((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case DOMAIN_NAME:
                    return getDomainName();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case DOMAIN_NAME:
                    return isSetDomainName();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof undefineDomain_args)
                return this.equals((undefineDomain_args) that);
            return false;
        }

        public boolean equals(undefineDomain_args that)
        {
            if (that == null)
                return false;

            boolean this_present_domainName = true && this.isSetDomainName();
            boolean that_present_domainName = true && that.isSetDomainName();
            if (this_present_domainName || that_present_domainName)
            {
                if (!(this_present_domainName && that_present_domainName))
                    return false;
                if (!this.domainName.equals(that.domainName))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_domainName = true && (isSetDomainName());
            list.add(present_domainName);
            if (present_domainName)
                list.add(domainName);

            return list.hashCode();
        }

        @Override
        public int compareTo(undefineDomain_args other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetDomainName()).compareTo(other.isSetDomainName());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetDomainName())
            {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.domainName, other.domainName);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("undefineDomain_args(");
            boolean first = true;

            sb.append("domainName:");
            if (this.domainName == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.domainName);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class undefineDomain_argsStandardSchemeFactory implements SchemeFactory
        {
            public undefineDomain_argsStandardScheme getScheme()
            {
                return new undefineDomain_argsStandardScheme();
            }
        }

        private static class undefineDomain_argsStandardScheme
            extends StandardScheme<undefineDomain_args>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, undefineDomain_args struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // DOMAIN_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.domainName = iprot.readString();
                                struct.setDomainNameIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                undefineDomain_args struct) throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.domainName != null)
                {
                    oprot.writeFieldBegin(DOMAIN_NAME_FIELD_DESC);
                    oprot.writeString(struct.domainName);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class undefineDomain_argsTupleSchemeFactory implements SchemeFactory
        {
            public undefineDomain_argsTupleScheme getScheme()
            {
                return new undefineDomain_argsTupleScheme();
            }
        }

        private static class undefineDomain_argsTupleScheme extends TupleScheme<undefineDomain_args>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, undefineDomain_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetDomainName())
                {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetDomainName())
                {
                    oprot.writeString(struct.domainName);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, undefineDomain_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0))
                {
                    struct.domainName = iprot.readString();
                    struct.setDomainNameIsSet(true);
                }
            }
        }

    }

    public static class undefineDomain_result
        implements org.apache.thrift.TBase<undefineDomain_result, undefineDomain_result._Fields>,
        java.io.Serializable, Cloneable, Comparable<undefineDomain_result>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("undefineDomain_result");

        private static final org.apache.thrift.protocol.TField LIBVIRT_EXCEPTION_FIELD_DESC =
            new org.apache.thrift.protocol.TField("libvirtException",
                org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new undefineDomain_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new undefineDomain_resultTupleSchemeFactory());
        }

        public LibvirtException libvirtException; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            LIBVIRT_EXCEPTION((short) 1, "libvirtException");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // LIBVIRT_EXCEPTION
                        return LIBVIRT_EXCEPTION;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.LIBVIRT_EXCEPTION,
                new org.apache.thrift.meta_data.FieldMetaData("libvirtException",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData
                .addStructMetaDataMap(undefineDomain_result.class, metaDataMap);
        }

        public undefineDomain_result()
        {
        }

        public undefineDomain_result(LibvirtException libvirtException)
        {
            this();
            this.libvirtException = libvirtException;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public undefineDomain_result(undefineDomain_result other)
        {
            if (other.isSetLibvirtException())
            {
                this.libvirtException = new LibvirtException(other.libvirtException);
            }
        }

        public undefineDomain_result deepCopy()
        {
            return new undefineDomain_result(this);
        }

        @Override
        public void clear()
        {
            this.libvirtException = null;
        }

        public LibvirtException getLibvirtException()
        {
            return this.libvirtException;
        }

        public undefineDomain_result setLibvirtException(LibvirtException libvirtException)
        {
            this.libvirtException = libvirtException;
            return this;
        }

        public void unsetLibvirtException()
        {
            this.libvirtException = null;
        }

        /** Returns true if field libvirtException is set (has been assigned a value) and false otherwise */
        public boolean isSetLibvirtException()
        {
            return this.libvirtException != null;
        }

        public void setLibvirtExceptionIsSet(boolean value)
        {
            if (!value)
            {
                this.libvirtException = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    if (value == null)
                    {
                        unsetLibvirtException();
                    }
                    else
                    {
                        setLibvirtException((LibvirtException) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    return getLibvirtException();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    return isSetLibvirtException();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof undefineDomain_result)
                return this.equals((undefineDomain_result) that);
            return false;
        }

        public boolean equals(undefineDomain_result that)
        {
            if (that == null)
                return false;

            boolean this_present_libvirtException = true && this.isSetLibvirtException();
            boolean that_present_libvirtException = true && that.isSetLibvirtException();
            if (this_present_libvirtException || that_present_libvirtException)
            {
                if (!(this_present_libvirtException && that_present_libvirtException))
                    return false;
                if (!this.libvirtException.equals(that.libvirtException))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_libvirtException = true && (isSetLibvirtException());
            list.add(present_libvirtException);
            if (present_libvirtException)
                list.add(libvirtException);

            return list.hashCode();
        }

        @Override
        public int compareTo(undefineDomain_result other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison =
                Boolean.valueOf(isSetLibvirtException()).compareTo(other.isSetLibvirtException());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetLibvirtException())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.libvirtException,
                    other.libvirtException);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("undefineDomain_result(");
            boolean first = true;

            sb.append("libvirtException:");
            if (this.libvirtException == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.libvirtException);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class undefineDomain_resultStandardSchemeFactory implements SchemeFactory
        {
            public undefineDomain_resultStandardScheme getScheme()
            {
                return new undefineDomain_resultStandardScheme();
            }
        }

        private static class undefineDomain_resultStandardScheme
            extends StandardScheme<undefineDomain_result>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot,
                undefineDomain_result struct) throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // LIBVIRT_EXCEPTION
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT)
                            {
                                struct.libvirtException = new LibvirtException();
                                struct.libvirtException.read(iprot);
                                struct.setLibvirtExceptionIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                undefineDomain_result struct) throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.libvirtException != null)
                {
                    oprot.writeFieldBegin(LIBVIRT_EXCEPTION_FIELD_DESC);
                    struct.libvirtException.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class undefineDomain_resultTupleSchemeFactory implements SchemeFactory
        {
            public undefineDomain_resultTupleScheme getScheme()
            {
                return new undefineDomain_resultTupleScheme();
            }
        }

        private static class undefineDomain_resultTupleScheme
            extends TupleScheme<undefineDomain_result>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot,
                undefineDomain_result struct) throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetLibvirtException())
                {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetLibvirtException())
                {
                    struct.libvirtException.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot,
                undefineDomain_result struct) throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0))
                {
                    struct.libvirtException = new LibvirtException();
                    struct.libvirtException.read(iprot);
                    struct.setLibvirtExceptionIsSet(true);
                }
            }
        }

    }

    public static class existDomain_args
        implements org.apache.thrift.TBase<existDomain_args, existDomain_args._Fields>,
        java.io.Serializable, Cloneable, Comparable<existDomain_args>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("existDomain_args");

        private static final org.apache.thrift.protocol.TField DOMAIN_NAME_FIELD_DESC =
            new org.apache.thrift.protocol.TField("domainName",
                org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new existDomain_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new existDomain_argsTupleSchemeFactory());
        }

        public String domainName; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            DOMAIN_NAME((short) 1, "domainName");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // DOMAIN_NAME
                        return DOMAIN_NAME;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.DOMAIN_NAME,
                new org.apache.thrift.meta_data.FieldMetaData("domainName",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(existDomain_args.class,
                metaDataMap);
        }

        public existDomain_args()
        {
        }

        public existDomain_args(String domainName)
        {
            this();
            this.domainName = domainName;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public existDomain_args(existDomain_args other)
        {
            if (other.isSetDomainName())
            {
                this.domainName = other.domainName;
            }
        }

        public existDomain_args deepCopy()
        {
            return new existDomain_args(this);
        }

        @Override
        public void clear()
        {
            this.domainName = null;
        }

        public String getDomainName()
        {
            return this.domainName;
        }

        public existDomain_args setDomainName(String domainName)
        {
            this.domainName = domainName;
            return this;
        }

        public void unsetDomainName()
        {
            this.domainName = null;
        }

        /** Returns true if field domainName is set (has been assigned a value) and false otherwise */
        public boolean isSetDomainName()
        {
            return this.domainName != null;
        }

        public void setDomainNameIsSet(boolean value)
        {
            if (!value)
            {
                this.domainName = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case DOMAIN_NAME:
                    if (value == null)
                    {
                        unsetDomainName();
                    }
                    else
                    {
                        setDomainName((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case DOMAIN_NAME:
                    return getDomainName();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case DOMAIN_NAME:
                    return isSetDomainName();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof existDomain_args)
                return this.equals((existDomain_args) that);
            return false;
        }

        public boolean equals(existDomain_args that)
        {
            if (that == null)
                return false;

            boolean this_present_domainName = true && this.isSetDomainName();
            boolean that_present_domainName = true && that.isSetDomainName();
            if (this_present_domainName || that_present_domainName)
            {
                if (!(this_present_domainName && that_present_domainName))
                    return false;
                if (!this.domainName.equals(that.domainName))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_domainName = true && (isSetDomainName());
            list.add(present_domainName);
            if (present_domainName)
                list.add(domainName);

            return list.hashCode();
        }

        @Override
        public int compareTo(existDomain_args other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetDomainName()).compareTo(other.isSetDomainName());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetDomainName())
            {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.domainName, other.domainName);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("existDomain_args(");
            boolean first = true;

            sb.append("domainName:");
            if (this.domainName == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.domainName);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class existDomain_argsStandardSchemeFactory implements SchemeFactory
        {
            public existDomain_argsStandardScheme getScheme()
            {
                return new existDomain_argsStandardScheme();
            }
        }

        private static class existDomain_argsStandardScheme extends StandardScheme<existDomain_args>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, existDomain_args struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // DOMAIN_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.domainName = iprot.readString();
                                struct.setDomainNameIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, existDomain_args struct)
                throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.domainName != null)
                {
                    oprot.writeFieldBegin(DOMAIN_NAME_FIELD_DESC);
                    oprot.writeString(struct.domainName);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class existDomain_argsTupleSchemeFactory implements SchemeFactory
        {
            public existDomain_argsTupleScheme getScheme()
            {
                return new existDomain_argsTupleScheme();
            }
        }

        private static class existDomain_argsTupleScheme extends TupleScheme<existDomain_args>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, existDomain_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetDomainName())
                {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetDomainName())
                {
                    oprot.writeString(struct.domainName);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, existDomain_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0))
                {
                    struct.domainName = iprot.readString();
                    struct.setDomainNameIsSet(true);
                }
            }
        }

    }

    public static class existDomain_result
        implements org.apache.thrift.TBase<existDomain_result, existDomain_result._Fields>,
        java.io.Serializable, Cloneable, Comparable<existDomain_result>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("existDomain_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC =
            new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL,
                (short) 0);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new existDomain_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new existDomain_resultTupleSchemeFactory());
        }

        public boolean success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;

        private byte __isset_bitfield = 0;

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS,
                new org.apache.thrift.meta_data.FieldMetaData("success",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.BOOL)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(existDomain_result.class,
                metaDataMap);
        }

        public existDomain_result()
        {
        }

        public existDomain_result(boolean success)
        {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public existDomain_result(existDomain_result other)
        {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        public existDomain_result deepCopy()
        {
            return new existDomain_result(this);
        }

        @Override
        public void clear()
        {
            setSuccessIsSet(false);
            this.success = false;
        }

        public boolean isSuccess()
        {
            return this.success;
        }

        public existDomain_result setSuccess(boolean success)
        {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess()
        {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess()
        {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value)
        {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case SUCCESS:
                    if (value == null)
                    {
                        unsetSuccess();
                    }
                    else
                    {
                        setSuccess((Boolean) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case SUCCESS:
                    return Boolean.valueOf(isSuccess());

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof existDomain_result)
                return this.equals((existDomain_result) that);
            return false;
        }

        public boolean equals(existDomain_result that)
        {
            if (that == null)
                return false;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success)
            {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true;
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(existDomain_result other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetSuccess())
            {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("existDomain_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class existDomain_resultStandardSchemeFactory implements SchemeFactory
        {
            public existDomain_resultStandardScheme getScheme()
            {
                return new existDomain_resultStandardScheme();
            }
        }

        private static class existDomain_resultStandardScheme
            extends StandardScheme<existDomain_result>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, existDomain_result struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL)
                            {
                                struct.success = iprot.readBool();
                                struct.setSuccessIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, existDomain_result struct)
                throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess())
                {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeBool(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class existDomain_resultTupleSchemeFactory implements SchemeFactory
        {
            public existDomain_resultTupleScheme getScheme()
            {
                return new existDomain_resultTupleScheme();
            }
        }

        private static class existDomain_resultTupleScheme extends TupleScheme<existDomain_result>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, existDomain_result struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess())
                {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess())
                {
                    oprot.writeBool(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, existDomain_result struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0))
                {
                    struct.success = iprot.readBool();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class getDomainState_args
        implements org.apache.thrift.TBase<getDomainState_args, getDomainState_args._Fields>,
        java.io.Serializable, Cloneable, Comparable<getDomainState_args>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("getDomainState_args");

        private static final org.apache.thrift.protocol.TField DOMAIN_NAME_FIELD_DESC =
            new org.apache.thrift.protocol.TField("domainName",
                org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new getDomainState_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getDomainState_argsTupleSchemeFactory());
        }

        public String domainName; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            DOMAIN_NAME((short) 1, "domainName");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // DOMAIN_NAME
                        return DOMAIN_NAME;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.DOMAIN_NAME,
                new org.apache.thrift.meta_data.FieldMetaData("domainName",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData
                .addStructMetaDataMap(getDomainState_args.class, metaDataMap);
        }

        public getDomainState_args()
        {
        }

        public getDomainState_args(String domainName)
        {
            this();
            this.domainName = domainName;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getDomainState_args(getDomainState_args other)
        {
            if (other.isSetDomainName())
            {
                this.domainName = other.domainName;
            }
        }

        public getDomainState_args deepCopy()
        {
            return new getDomainState_args(this);
        }

        @Override
        public void clear()
        {
            this.domainName = null;
        }

        public String getDomainName()
        {
            return this.domainName;
        }

        public getDomainState_args setDomainName(String domainName)
        {
            this.domainName = domainName;
            return this;
        }

        public void unsetDomainName()
        {
            this.domainName = null;
        }

        /** Returns true if field domainName is set (has been assigned a value) and false otherwise */
        public boolean isSetDomainName()
        {
            return this.domainName != null;
        }

        public void setDomainNameIsSet(boolean value)
        {
            if (!value)
            {
                this.domainName = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case DOMAIN_NAME:
                    if (value == null)
                    {
                        unsetDomainName();
                    }
                    else
                    {
                        setDomainName((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case DOMAIN_NAME:
                    return getDomainName();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case DOMAIN_NAME:
                    return isSetDomainName();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof getDomainState_args)
                return this.equals((getDomainState_args) that);
            return false;
        }

        public boolean equals(getDomainState_args that)
        {
            if (that == null)
                return false;

            boolean this_present_domainName = true && this.isSetDomainName();
            boolean that_present_domainName = true && that.isSetDomainName();
            if (this_present_domainName || that_present_domainName)
            {
                if (!(this_present_domainName && that_present_domainName))
                    return false;
                if (!this.domainName.equals(that.domainName))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_domainName = true && (isSetDomainName());
            list.add(present_domainName);
            if (present_domainName)
                list.add(domainName);

            return list.hashCode();
        }

        @Override
        public int compareTo(getDomainState_args other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetDomainName()).compareTo(other.isSetDomainName());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetDomainName())
            {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.domainName, other.domainName);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("getDomainState_args(");
            boolean first = true;

            sb.append("domainName:");
            if (this.domainName == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.domainName);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class getDomainState_argsStandardSchemeFactory implements SchemeFactory
        {
            public getDomainState_argsStandardScheme getScheme()
            {
                return new getDomainState_argsStandardScheme();
            }
        }

        private static class getDomainState_argsStandardScheme
            extends StandardScheme<getDomainState_args>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getDomainState_args struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // DOMAIN_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.domainName = iprot.readString();
                                struct.setDomainNameIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                getDomainState_args struct) throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.domainName != null)
                {
                    oprot.writeFieldBegin(DOMAIN_NAME_FIELD_DESC);
                    oprot.writeString(struct.domainName);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getDomainState_argsTupleSchemeFactory implements SchemeFactory
        {
            public getDomainState_argsTupleScheme getScheme()
            {
                return new getDomainState_argsTupleScheme();
            }
        }

        private static class getDomainState_argsTupleScheme extends TupleScheme<getDomainState_args>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getDomainState_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetDomainName())
                {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetDomainName())
                {
                    oprot.writeString(struct.domainName);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getDomainState_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0))
                {
                    struct.domainName = iprot.readString();
                    struct.setDomainNameIsSet(true);
                }
            }
        }

    }

    public static class getDomainState_result
        implements org.apache.thrift.TBase<getDomainState_result, getDomainState_result._Fields>,
        java.io.Serializable, Cloneable, Comparable<getDomainState_result>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("getDomainState_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC =
            new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32,
                (short) 0);

        private static final org.apache.thrift.protocol.TField LIBVIRT_EXCEPTION_FIELD_DESC =
            new org.apache.thrift.protocol.TField("libvirtException",
                org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new getDomainState_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getDomainState_resultTupleSchemeFactory());
        }

        /**
         * @see DomainState
         */
        public DomainState success; // required

        public LibvirtException libvirtException; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            /**
             * @see DomainState
             */
            SUCCESS((short) 0, "success"),
            LIBVIRT_EXCEPTION((short) 1, "libvirtException");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // LIBVIRT_EXCEPTION
                        return LIBVIRT_EXCEPTION;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS,
                new org.apache.thrift.meta_data.FieldMetaData("success",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.EnumMetaData(
                        org.apache.thrift.protocol.TType.ENUM, DomainState.class)));
            tmpMap.put(_Fields.LIBVIRT_EXCEPTION,
                new org.apache.thrift.meta_data.FieldMetaData("libvirtException",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData
                .addStructMetaDataMap(getDomainState_result.class, metaDataMap);
        }

        public getDomainState_result()
        {
        }

        public getDomainState_result(DomainState success, LibvirtException libvirtException)
        {
            this();
            this.success = success;
            this.libvirtException = libvirtException;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getDomainState_result(getDomainState_result other)
        {
            if (other.isSetSuccess())
            {
                this.success = other.success;
            }
            if (other.isSetLibvirtException())
            {
                this.libvirtException = new LibvirtException(other.libvirtException);
            }
        }

        public getDomainState_result deepCopy()
        {
            return new getDomainState_result(this);
        }

        @Override
        public void clear()
        {
            this.success = null;
            this.libvirtException = null;
        }

        /**
         * @see DomainState
         */
        public DomainState getSuccess()
        {
            return this.success;
        }

        /**
         * @see DomainState
         */
        public getDomainState_result setSuccess(DomainState success)
        {
            this.success = success;
            return this;
        }

        public void unsetSuccess()
        {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess()
        {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value)
        {
            if (!value)
            {
                this.success = null;
            }
        }

        public LibvirtException getLibvirtException()
        {
            return this.libvirtException;
        }

        public getDomainState_result setLibvirtException(LibvirtException libvirtException)
        {
            this.libvirtException = libvirtException;
            return this;
        }

        public void unsetLibvirtException()
        {
            this.libvirtException = null;
        }

        /** Returns true if field libvirtException is set (has been assigned a value) and false otherwise */
        public boolean isSetLibvirtException()
        {
            return this.libvirtException != null;
        }

        public void setLibvirtExceptionIsSet(boolean value)
        {
            if (!value)
            {
                this.libvirtException = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case SUCCESS:
                    if (value == null)
                    {
                        unsetSuccess();
                    }
                    else
                    {
                        setSuccess((DomainState) value);
                    }
                    break;

                case LIBVIRT_EXCEPTION:
                    if (value == null)
                    {
                        unsetLibvirtException();
                    }
                    else
                    {
                        setLibvirtException((LibvirtException) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case SUCCESS:
                    return getSuccess();

                case LIBVIRT_EXCEPTION:
                    return getLibvirtException();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case SUCCESS:
                    return isSetSuccess();
                case LIBVIRT_EXCEPTION:
                    return isSetLibvirtException();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof getDomainState_result)
                return this.equals((getDomainState_result) that);
            return false;
        }

        public boolean equals(getDomainState_result that)
        {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success)
            {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_libvirtException = true && this.isSetLibvirtException();
            boolean that_present_libvirtException = true && that.isSetLibvirtException();
            if (this_present_libvirtException || that_present_libvirtException)
            {
                if (!(this_present_libvirtException && that_present_libvirtException))
                    return false;
                if (!this.libvirtException.equals(that.libvirtException))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success.getValue());

            boolean present_libvirtException = true && (isSetLibvirtException());
            list.add(present_libvirtException);
            if (present_libvirtException)
                list.add(libvirtException);

            return list.hashCode();
        }

        @Override
        public int compareTo(getDomainState_result other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetSuccess())
            {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            lastComparison =
                Boolean.valueOf(isSetLibvirtException()).compareTo(other.isSetLibvirtException());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetLibvirtException())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.libvirtException,
                    other.libvirtException);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("getDomainState_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.success);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("libvirtException:");
            if (this.libvirtException == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.libvirtException);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class getDomainState_resultStandardSchemeFactory implements SchemeFactory
        {
            public getDomainState_resultStandardScheme getScheme()
            {
                return new getDomainState_resultStandardScheme();
            }
        }

        private static class getDomainState_resultStandardScheme
            extends StandardScheme<getDomainState_result>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot,
                getDomainState_result struct) throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32)
                            {
                                struct.success =
                                    com.abiquo.aimstub.DomainState.findByValue(iprot.readI32());
                                struct.setSuccessIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        case 1: // LIBVIRT_EXCEPTION
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT)
                            {
                                struct.libvirtException = new LibvirtException();
                                struct.libvirtException.read(iprot);
                                struct.setLibvirtExceptionIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                getDomainState_result struct) throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null)
                {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeI32(struct.success.getValue());
                    oprot.writeFieldEnd();
                }
                if (struct.libvirtException != null)
                {
                    oprot.writeFieldBegin(LIBVIRT_EXCEPTION_FIELD_DESC);
                    struct.libvirtException.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getDomainState_resultTupleSchemeFactory implements SchemeFactory
        {
            public getDomainState_resultTupleScheme getScheme()
            {
                return new getDomainState_resultTupleScheme();
            }
        }

        private static class getDomainState_resultTupleScheme
            extends TupleScheme<getDomainState_result>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot,
                getDomainState_result struct) throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess())
                {
                    optionals.set(0);
                }
                if (struct.isSetLibvirtException())
                {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess())
                {
                    oprot.writeI32(struct.success.getValue());
                }
                if (struct.isSetLibvirtException())
                {
                    struct.libvirtException.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot,
                getDomainState_result struct) throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0))
                {
                    struct.success = com.abiquo.aimstub.DomainState.findByValue(iprot.readI32());
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1))
                {
                    struct.libvirtException = new LibvirtException();
                    struct.libvirtException.read(iprot);
                    struct.setLibvirtExceptionIsSet(true);
                }
            }
        }

    }

    public static class getDomainInfo_args
        implements org.apache.thrift.TBase<getDomainInfo_args, getDomainInfo_args._Fields>,
        java.io.Serializable, Cloneable, Comparable<getDomainInfo_args>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("getDomainInfo_args");

        private static final org.apache.thrift.protocol.TField DOMAIN_NAME_FIELD_DESC =
            new org.apache.thrift.protocol.TField("domainName",
                org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new getDomainInfo_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getDomainInfo_argsTupleSchemeFactory());
        }

        public String domainName; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            DOMAIN_NAME((short) 1, "domainName");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // DOMAIN_NAME
                        return DOMAIN_NAME;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.DOMAIN_NAME,
                new org.apache.thrift.meta_data.FieldMetaData("domainName",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDomainInfo_args.class,
                metaDataMap);
        }

        public getDomainInfo_args()
        {
        }

        public getDomainInfo_args(String domainName)
        {
            this();
            this.domainName = domainName;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getDomainInfo_args(getDomainInfo_args other)
        {
            if (other.isSetDomainName())
            {
                this.domainName = other.domainName;
            }
        }

        public getDomainInfo_args deepCopy()
        {
            return new getDomainInfo_args(this);
        }

        @Override
        public void clear()
        {
            this.domainName = null;
        }

        public String getDomainName()
        {
            return this.domainName;
        }

        public getDomainInfo_args setDomainName(String domainName)
        {
            this.domainName = domainName;
            return this;
        }

        public void unsetDomainName()
        {
            this.domainName = null;
        }

        /** Returns true if field domainName is set (has been assigned a value) and false otherwise */
        public boolean isSetDomainName()
        {
            return this.domainName != null;
        }

        public void setDomainNameIsSet(boolean value)
        {
            if (!value)
            {
                this.domainName = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case DOMAIN_NAME:
                    if (value == null)
                    {
                        unsetDomainName();
                    }
                    else
                    {
                        setDomainName((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case DOMAIN_NAME:
                    return getDomainName();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case DOMAIN_NAME:
                    return isSetDomainName();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof getDomainInfo_args)
                return this.equals((getDomainInfo_args) that);
            return false;
        }

        public boolean equals(getDomainInfo_args that)
        {
            if (that == null)
                return false;

            boolean this_present_domainName = true && this.isSetDomainName();
            boolean that_present_domainName = true && that.isSetDomainName();
            if (this_present_domainName || that_present_domainName)
            {
                if (!(this_present_domainName && that_present_domainName))
                    return false;
                if (!this.domainName.equals(that.domainName))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_domainName = true && (isSetDomainName());
            list.add(present_domainName);
            if (present_domainName)
                list.add(domainName);

            return list.hashCode();
        }

        @Override
        public int compareTo(getDomainInfo_args other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetDomainName()).compareTo(other.isSetDomainName());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetDomainName())
            {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.domainName, other.domainName);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("getDomainInfo_args(");
            boolean first = true;

            sb.append("domainName:");
            if (this.domainName == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.domainName);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class getDomainInfo_argsStandardSchemeFactory implements SchemeFactory
        {
            public getDomainInfo_argsStandardScheme getScheme()
            {
                return new getDomainInfo_argsStandardScheme();
            }
        }

        private static class getDomainInfo_argsStandardScheme
            extends StandardScheme<getDomainInfo_args>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getDomainInfo_args struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // DOMAIN_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.domainName = iprot.readString();
                                struct.setDomainNameIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getDomainInfo_args struct)
                throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.domainName != null)
                {
                    oprot.writeFieldBegin(DOMAIN_NAME_FIELD_DESC);
                    oprot.writeString(struct.domainName);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getDomainInfo_argsTupleSchemeFactory implements SchemeFactory
        {
            public getDomainInfo_argsTupleScheme getScheme()
            {
                return new getDomainInfo_argsTupleScheme();
            }
        }

        private static class getDomainInfo_argsTupleScheme extends TupleScheme<getDomainInfo_args>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getDomainInfo_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetDomainName())
                {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetDomainName())
                {
                    oprot.writeString(struct.domainName);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getDomainInfo_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0))
                {
                    struct.domainName = iprot.readString();
                    struct.setDomainNameIsSet(true);
                }
            }
        }

    }

    public static class getDomainInfo_result
        implements org.apache.thrift.TBase<getDomainInfo_result, getDomainInfo_result._Fields>,
        java.io.Serializable, Cloneable, Comparable<getDomainInfo_result>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("getDomainInfo_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC =
            new org.apache.thrift.protocol.TField("success",
                org.apache.thrift.protocol.TType.STRUCT, (short) 0);

        private static final org.apache.thrift.protocol.TField LIBVIRT_EXCEPTION_FIELD_DESC =
            new org.apache.thrift.protocol.TField("libvirtException",
                org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new getDomainInfo_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getDomainInfo_resultTupleSchemeFactory());
        }

        public DomainInfo success; // required

        public LibvirtException libvirtException; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            SUCCESS((short) 0, "success"),
            LIBVIRT_EXCEPTION((short) 1, "libvirtException");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // LIBVIRT_EXCEPTION
                        return LIBVIRT_EXCEPTION;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS,
                new org.apache.thrift.meta_data.FieldMetaData("success",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(
                        org.apache.thrift.protocol.TType.STRUCT, DomainInfo.class)));
            tmpMap.put(_Fields.LIBVIRT_EXCEPTION,
                new org.apache.thrift.meta_data.FieldMetaData("libvirtException",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData
                .addStructMetaDataMap(getDomainInfo_result.class, metaDataMap);
        }

        public getDomainInfo_result()
        {
        }

        public getDomainInfo_result(DomainInfo success, LibvirtException libvirtException)
        {
            this();
            this.success = success;
            this.libvirtException = libvirtException;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getDomainInfo_result(getDomainInfo_result other)
        {
            if (other.isSetSuccess())
            {
                this.success = new DomainInfo(other.success);
            }
            if (other.isSetLibvirtException())
            {
                this.libvirtException = new LibvirtException(other.libvirtException);
            }
        }

        public getDomainInfo_result deepCopy()
        {
            return new getDomainInfo_result(this);
        }

        @Override
        public void clear()
        {
            this.success = null;
            this.libvirtException = null;
        }

        public DomainInfo getSuccess()
        {
            return this.success;
        }

        public getDomainInfo_result setSuccess(DomainInfo success)
        {
            this.success = success;
            return this;
        }

        public void unsetSuccess()
        {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess()
        {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value)
        {
            if (!value)
            {
                this.success = null;
            }
        }

        public LibvirtException getLibvirtException()
        {
            return this.libvirtException;
        }

        public getDomainInfo_result setLibvirtException(LibvirtException libvirtException)
        {
            this.libvirtException = libvirtException;
            return this;
        }

        public void unsetLibvirtException()
        {
            this.libvirtException = null;
        }

        /** Returns true if field libvirtException is set (has been assigned a value) and false otherwise */
        public boolean isSetLibvirtException()
        {
            return this.libvirtException != null;
        }

        public void setLibvirtExceptionIsSet(boolean value)
        {
            if (!value)
            {
                this.libvirtException = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case SUCCESS:
                    if (value == null)
                    {
                        unsetSuccess();
                    }
                    else
                    {
                        setSuccess((DomainInfo) value);
                    }
                    break;

                case LIBVIRT_EXCEPTION:
                    if (value == null)
                    {
                        unsetLibvirtException();
                    }
                    else
                    {
                        setLibvirtException((LibvirtException) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case SUCCESS:
                    return getSuccess();

                case LIBVIRT_EXCEPTION:
                    return getLibvirtException();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case SUCCESS:
                    return isSetSuccess();
                case LIBVIRT_EXCEPTION:
                    return isSetLibvirtException();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof getDomainInfo_result)
                return this.equals((getDomainInfo_result) that);
            return false;
        }

        public boolean equals(getDomainInfo_result that)
        {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success)
            {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_libvirtException = true && this.isSetLibvirtException();
            boolean that_present_libvirtException = true && that.isSetLibvirtException();
            if (this_present_libvirtException || that_present_libvirtException)
            {
                if (!(this_present_libvirtException && that_present_libvirtException))
                    return false;
                if (!this.libvirtException.equals(that.libvirtException))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            boolean present_libvirtException = true && (isSetLibvirtException());
            list.add(present_libvirtException);
            if (present_libvirtException)
                list.add(libvirtException);

            return list.hashCode();
        }

        @Override
        public int compareTo(getDomainInfo_result other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetSuccess())
            {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            lastComparison =
                Boolean.valueOf(isSetLibvirtException()).compareTo(other.isSetLibvirtException());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetLibvirtException())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.libvirtException,
                    other.libvirtException);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("getDomainInfo_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.success);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("libvirtException:");
            if (this.libvirtException == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.libvirtException);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
            if (success != null)
            {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class getDomainInfo_resultStandardSchemeFactory implements SchemeFactory
        {
            public getDomainInfo_resultStandardScheme getScheme()
            {
                return new getDomainInfo_resultStandardScheme();
            }
        }

        private static class getDomainInfo_resultStandardScheme
            extends StandardScheme<getDomainInfo_result>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot,
                getDomainInfo_result struct) throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT)
                            {
                                struct.success = new DomainInfo();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        case 1: // LIBVIRT_EXCEPTION
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT)
                            {
                                struct.libvirtException = new LibvirtException();
                                struct.libvirtException.read(iprot);
                                struct.setLibvirtExceptionIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                getDomainInfo_result struct) throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null)
                {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.libvirtException != null)
                {
                    oprot.writeFieldBegin(LIBVIRT_EXCEPTION_FIELD_DESC);
                    struct.libvirtException.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getDomainInfo_resultTupleSchemeFactory implements SchemeFactory
        {
            public getDomainInfo_resultTupleScheme getScheme()
            {
                return new getDomainInfo_resultTupleScheme();
            }
        }

        private static class getDomainInfo_resultTupleScheme
            extends TupleScheme<getDomainInfo_result>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot,
                getDomainInfo_result struct) throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess())
                {
                    optionals.set(0);
                }
                if (struct.isSetLibvirtException())
                {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess())
                {
                    struct.success.write(oprot);
                }
                if (struct.isSetLibvirtException())
                {
                    struct.libvirtException.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getDomainInfo_result struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0))
                {
                    struct.success = new DomainInfo();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1))
                {
                    struct.libvirtException = new LibvirtException();
                    struct.libvirtException.read(iprot);
                    struct.setLibvirtExceptionIsSet(true);
                }
            }
        }

    }

    public static class getDomains_args
        implements org.apache.thrift.TBase<getDomains_args, getDomains_args._Fields>,
        java.io.Serializable, Cloneable, Comparable<getDomains_args>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("getDomains_args");

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new getDomains_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getDomains_argsTupleSchemeFactory());
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDomains_args.class,
                metaDataMap);
        }

        public getDomains_args()
        {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getDomains_args(getDomains_args other)
        {
        }

        public getDomains_args deepCopy()
        {
            return new getDomains_args(this);
        }

        @Override
        public void clear()
        {
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof getDomains_args)
                return this.equals((getDomains_args) that);
            return false;
        }

        public boolean equals(getDomains_args that)
        {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(getDomains_args other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("getDomains_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class getDomains_argsStandardSchemeFactory implements SchemeFactory
        {
            public getDomains_argsStandardScheme getScheme()
            {
                return new getDomains_argsStandardScheme();
            }
        }

        private static class getDomains_argsStandardScheme extends StandardScheme<getDomains_args>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getDomains_args struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getDomains_args struct)
                throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getDomains_argsTupleSchemeFactory implements SchemeFactory
        {
            public getDomains_argsTupleScheme getScheme()
            {
                return new getDomains_argsTupleScheme();
            }
        }

        private static class getDomains_argsTupleScheme extends TupleScheme<getDomains_args>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getDomains_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getDomains_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class getDomains_result
        implements org.apache.thrift.TBase<getDomains_result, getDomains_result._Fields>,
        java.io.Serializable, Cloneable, Comparable<getDomains_result>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("getDomains_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC =
            new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST,
                (short) 0);

        private static final org.apache.thrift.protocol.TField LIBVIRT_EXCEPTION_FIELD_DESC =
            new org.apache.thrift.protocol.TField("libvirtException",
                org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new getDomains_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getDomains_resultTupleSchemeFactory());
        }

        public List<DomainInfo> success; // required

        public LibvirtException libvirtException; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            SUCCESS((short) 0, "success"),
            LIBVIRT_EXCEPTION((short) 1, "libvirtException");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // LIBVIRT_EXCEPTION
                        return LIBVIRT_EXCEPTION;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
                org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                    new org.apache.thrift.meta_data.StructMetaData(
                        org.apache.thrift.protocol.TType.STRUCT, DomainInfo.class))));
            tmpMap.put(_Fields.LIBVIRT_EXCEPTION,
                new org.apache.thrift.meta_data.FieldMetaData("libvirtException",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDomains_result.class,
                metaDataMap);
        }

        public getDomains_result()
        {
        }

        public getDomains_result(List<DomainInfo> success, LibvirtException libvirtException)
        {
            this();
            this.success = success;
            this.libvirtException = libvirtException;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getDomains_result(getDomains_result other)
        {
            if (other.isSetSuccess())
            {
                List<DomainInfo> __this__success = new ArrayList<DomainInfo>(other.success.size());
                for (DomainInfo other_element : other.success)
                {
                    __this__success.add(new DomainInfo(other_element));
                }
                this.success = __this__success;
            }
            if (other.isSetLibvirtException())
            {
                this.libvirtException = new LibvirtException(other.libvirtException);
            }
        }

        public getDomains_result deepCopy()
        {
            return new getDomains_result(this);
        }

        @Override
        public void clear()
        {
            this.success = null;
            this.libvirtException = null;
        }

        public int getSuccessSize()
        {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<DomainInfo> getSuccessIterator()
        {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(DomainInfo elem)
        {
            if (this.success == null)
            {
                this.success = new ArrayList<DomainInfo>();
            }
            this.success.add(elem);
        }

        public List<DomainInfo> getSuccess()
        {
            return this.success;
        }

        public getDomains_result setSuccess(List<DomainInfo> success)
        {
            this.success = success;
            return this;
        }

        public void unsetSuccess()
        {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess()
        {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value)
        {
            if (!value)
            {
                this.success = null;
            }
        }

        public LibvirtException getLibvirtException()
        {
            return this.libvirtException;
        }

        public getDomains_result setLibvirtException(LibvirtException libvirtException)
        {
            this.libvirtException = libvirtException;
            return this;
        }

        public void unsetLibvirtException()
        {
            this.libvirtException = null;
        }

        /** Returns true if field libvirtException is set (has been assigned a value) and false otherwise */
        public boolean isSetLibvirtException()
        {
            return this.libvirtException != null;
        }

        public void setLibvirtExceptionIsSet(boolean value)
        {
            if (!value)
            {
                this.libvirtException = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case SUCCESS:
                    if (value == null)
                    {
                        unsetSuccess();
                    }
                    else
                    {
                        setSuccess((List<DomainInfo>) value);
                    }
                    break;

                case LIBVIRT_EXCEPTION:
                    if (value == null)
                    {
                        unsetLibvirtException();
                    }
                    else
                    {
                        setLibvirtException((LibvirtException) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case SUCCESS:
                    return getSuccess();

                case LIBVIRT_EXCEPTION:
                    return getLibvirtException();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case SUCCESS:
                    return isSetSuccess();
                case LIBVIRT_EXCEPTION:
                    return isSetLibvirtException();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof getDomains_result)
                return this.equals((getDomains_result) that);
            return false;
        }

        public boolean equals(getDomains_result that)
        {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success)
            {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_libvirtException = true && this.isSetLibvirtException();
            boolean that_present_libvirtException = true && that.isSetLibvirtException();
            if (this_present_libvirtException || that_present_libvirtException)
            {
                if (!(this_present_libvirtException && that_present_libvirtException))
                    return false;
                if (!this.libvirtException.equals(that.libvirtException))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            boolean present_libvirtException = true && (isSetLibvirtException());
            list.add(present_libvirtException);
            if (present_libvirtException)
                list.add(libvirtException);

            return list.hashCode();
        }

        @Override
        public int compareTo(getDomains_result other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetSuccess())
            {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            lastComparison =
                Boolean.valueOf(isSetLibvirtException()).compareTo(other.isSetLibvirtException());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetLibvirtException())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.libvirtException,
                    other.libvirtException);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("getDomains_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.success);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("libvirtException:");
            if (this.libvirtException == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.libvirtException);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class getDomains_resultStandardSchemeFactory implements SchemeFactory
        {
            public getDomains_resultStandardScheme getScheme()
            {
                return new getDomains_resultStandardScheme();
            }
        }

        private static class getDomains_resultStandardScheme
            extends StandardScheme<getDomains_result>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getDomains_result struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST)
                            {
                                {
                                    org.apache.thrift.protocol.TList _list42 =
                                        iprot.readListBegin();
                                    struct.success = new ArrayList<DomainInfo>(_list42.size);
                                    DomainInfo _elem43;
                                    for (int _i44 = 0; _i44 < _list42.size; ++_i44)
                                    {
                                        _elem43 = new DomainInfo();
                                        _elem43.read(iprot);
                                        struct.success.add(_elem43);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        case 1: // LIBVIRT_EXCEPTION
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT)
                            {
                                struct.libvirtException = new LibvirtException();
                                struct.libvirtException.read(iprot);
                                struct.setLibvirtExceptionIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getDomains_result struct)
                throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null)
                {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(
                            org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                        for (DomainInfo _iter45 : struct.success)
                        {
                            _iter45.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                if (struct.libvirtException != null)
                {
                    oprot.writeFieldBegin(LIBVIRT_EXCEPTION_FIELD_DESC);
                    struct.libvirtException.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getDomains_resultTupleSchemeFactory implements SchemeFactory
        {
            public getDomains_resultTupleScheme getScheme()
            {
                return new getDomains_resultTupleScheme();
            }
        }

        private static class getDomains_resultTupleScheme extends TupleScheme<getDomains_result>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getDomains_result struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess())
                {
                    optionals.set(0);
                }
                if (struct.isSetLibvirtException())
                {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess())
                {
                    {
                        oprot.writeI32(struct.success.size());
                        for (DomainInfo _iter46 : struct.success)
                        {
                            _iter46.write(oprot);
                        }
                    }
                }
                if (struct.isSetLibvirtException())
                {
                    struct.libvirtException.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getDomains_result struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0))
                {
                    {
                        org.apache.thrift.protocol.TList _list47 =
                            new org.apache.thrift.protocol.TList(
                                org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.success = new ArrayList<DomainInfo>(_list47.size);
                        DomainInfo _elem48;
                        for (int _i49 = 0; _i49 < _list47.size; ++_i49)
                        {
                            _elem48 = new DomainInfo();
                            _elem48.read(iprot);
                            struct.success.add(_elem48);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1))
                {
                    struct.libvirtException = new LibvirtException();
                    struct.libvirtException.read(iprot);
                    struct.setLibvirtExceptionIsSet(true);
                }
            }
        }

    }

    public static class powerOn_args
        implements org.apache.thrift.TBase<powerOn_args, powerOn_args._Fields>,
        java.io.Serializable, Cloneable, Comparable<powerOn_args>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("powerOn_args");

        private static final org.apache.thrift.protocol.TField DOMAIN_NAME_FIELD_DESC =
            new org.apache.thrift.protocol.TField("domainName",
                org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new powerOn_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new powerOn_argsTupleSchemeFactory());
        }

        public String domainName; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            DOMAIN_NAME((short) 1, "domainName");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // DOMAIN_NAME
                        return DOMAIN_NAME;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.DOMAIN_NAME,
                new org.apache.thrift.meta_data.FieldMetaData("domainName",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(powerOn_args.class,
                metaDataMap);
        }

        public powerOn_args()
        {
        }

        public powerOn_args(String domainName)
        {
            this();
            this.domainName = domainName;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public powerOn_args(powerOn_args other)
        {
            if (other.isSetDomainName())
            {
                this.domainName = other.domainName;
            }
        }

        public powerOn_args deepCopy()
        {
            return new powerOn_args(this);
        }

        @Override
        public void clear()
        {
            this.domainName = null;
        }

        public String getDomainName()
        {
            return this.domainName;
        }

        public powerOn_args setDomainName(String domainName)
        {
            this.domainName = domainName;
            return this;
        }

        public void unsetDomainName()
        {
            this.domainName = null;
        }

        /** Returns true if field domainName is set (has been assigned a value) and false otherwise */
        public boolean isSetDomainName()
        {
            return this.domainName != null;
        }

        public void setDomainNameIsSet(boolean value)
        {
            if (!value)
            {
                this.domainName = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case DOMAIN_NAME:
                    if (value == null)
                    {
                        unsetDomainName();
                    }
                    else
                    {
                        setDomainName((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case DOMAIN_NAME:
                    return getDomainName();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case DOMAIN_NAME:
                    return isSetDomainName();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof powerOn_args)
                return this.equals((powerOn_args) that);
            return false;
        }

        public boolean equals(powerOn_args that)
        {
            if (that == null)
                return false;

            boolean this_present_domainName = true && this.isSetDomainName();
            boolean that_present_domainName = true && that.isSetDomainName();
            if (this_present_domainName || that_present_domainName)
            {
                if (!(this_present_domainName && that_present_domainName))
                    return false;
                if (!this.domainName.equals(that.domainName))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_domainName = true && (isSetDomainName());
            list.add(present_domainName);
            if (present_domainName)
                list.add(domainName);

            return list.hashCode();
        }

        @Override
        public int compareTo(powerOn_args other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetDomainName()).compareTo(other.isSetDomainName());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetDomainName())
            {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.domainName, other.domainName);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("powerOn_args(");
            boolean first = true;

            sb.append("domainName:");
            if (this.domainName == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.domainName);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class powerOn_argsStandardSchemeFactory implements SchemeFactory
        {
            public powerOn_argsStandardScheme getScheme()
            {
                return new powerOn_argsStandardScheme();
            }
        }

        private static class powerOn_argsStandardScheme extends StandardScheme<powerOn_args>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, powerOn_args struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // DOMAIN_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.domainName = iprot.readString();
                                struct.setDomainNameIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, powerOn_args struct)
                throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.domainName != null)
                {
                    oprot.writeFieldBegin(DOMAIN_NAME_FIELD_DESC);
                    oprot.writeString(struct.domainName);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class powerOn_argsTupleSchemeFactory implements SchemeFactory
        {
            public powerOn_argsTupleScheme getScheme()
            {
                return new powerOn_argsTupleScheme();
            }
        }

        private static class powerOn_argsTupleScheme extends TupleScheme<powerOn_args>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, powerOn_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetDomainName())
                {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetDomainName())
                {
                    oprot.writeString(struct.domainName);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, powerOn_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0))
                {
                    struct.domainName = iprot.readString();
                    struct.setDomainNameIsSet(true);
                }
            }
        }

    }

    public static class powerOn_result
        implements org.apache.thrift.TBase<powerOn_result, powerOn_result._Fields>,
        java.io.Serializable, Cloneable, Comparable<powerOn_result>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("powerOn_result");

        private static final org.apache.thrift.protocol.TField LIBVIRT_EXCEPTION_FIELD_DESC =
            new org.apache.thrift.protocol.TField("libvirtException",
                org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new powerOn_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new powerOn_resultTupleSchemeFactory());
        }

        public LibvirtException libvirtException; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            LIBVIRT_EXCEPTION((short) 1, "libvirtException");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // LIBVIRT_EXCEPTION
                        return LIBVIRT_EXCEPTION;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.LIBVIRT_EXCEPTION,
                new org.apache.thrift.meta_data.FieldMetaData("libvirtException",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(powerOn_result.class,
                metaDataMap);
        }

        public powerOn_result()
        {
        }

        public powerOn_result(LibvirtException libvirtException)
        {
            this();
            this.libvirtException = libvirtException;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public powerOn_result(powerOn_result other)
        {
            if (other.isSetLibvirtException())
            {
                this.libvirtException = new LibvirtException(other.libvirtException);
            }
        }

        public powerOn_result deepCopy()
        {
            return new powerOn_result(this);
        }

        @Override
        public void clear()
        {
            this.libvirtException = null;
        }

        public LibvirtException getLibvirtException()
        {
            return this.libvirtException;
        }

        public powerOn_result setLibvirtException(LibvirtException libvirtException)
        {
            this.libvirtException = libvirtException;
            return this;
        }

        public void unsetLibvirtException()
        {
            this.libvirtException = null;
        }

        /** Returns true if field libvirtException is set (has been assigned a value) and false otherwise */
        public boolean isSetLibvirtException()
        {
            return this.libvirtException != null;
        }

        public void setLibvirtExceptionIsSet(boolean value)
        {
            if (!value)
            {
                this.libvirtException = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    if (value == null)
                    {
                        unsetLibvirtException();
                    }
                    else
                    {
                        setLibvirtException((LibvirtException) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    return getLibvirtException();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    return isSetLibvirtException();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof powerOn_result)
                return this.equals((powerOn_result) that);
            return false;
        }

        public boolean equals(powerOn_result that)
        {
            if (that == null)
                return false;

            boolean this_present_libvirtException = true && this.isSetLibvirtException();
            boolean that_present_libvirtException = true && that.isSetLibvirtException();
            if (this_present_libvirtException || that_present_libvirtException)
            {
                if (!(this_present_libvirtException && that_present_libvirtException))
                    return false;
                if (!this.libvirtException.equals(that.libvirtException))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_libvirtException = true && (isSetLibvirtException());
            list.add(present_libvirtException);
            if (present_libvirtException)
                list.add(libvirtException);

            return list.hashCode();
        }

        @Override
        public int compareTo(powerOn_result other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison =
                Boolean.valueOf(isSetLibvirtException()).compareTo(other.isSetLibvirtException());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetLibvirtException())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.libvirtException,
                    other.libvirtException);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("powerOn_result(");
            boolean first = true;

            sb.append("libvirtException:");
            if (this.libvirtException == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.libvirtException);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class powerOn_resultStandardSchemeFactory implements SchemeFactory
        {
            public powerOn_resultStandardScheme getScheme()
            {
                return new powerOn_resultStandardScheme();
            }
        }

        private static class powerOn_resultStandardScheme extends StandardScheme<powerOn_result>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, powerOn_result struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // LIBVIRT_EXCEPTION
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT)
                            {
                                struct.libvirtException = new LibvirtException();
                                struct.libvirtException.read(iprot);
                                struct.setLibvirtExceptionIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, powerOn_result struct)
                throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.libvirtException != null)
                {
                    oprot.writeFieldBegin(LIBVIRT_EXCEPTION_FIELD_DESC);
                    struct.libvirtException.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class powerOn_resultTupleSchemeFactory implements SchemeFactory
        {
            public powerOn_resultTupleScheme getScheme()
            {
                return new powerOn_resultTupleScheme();
            }
        }

        private static class powerOn_resultTupleScheme extends TupleScheme<powerOn_result>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, powerOn_result struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetLibvirtException())
                {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetLibvirtException())
                {
                    struct.libvirtException.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, powerOn_result struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0))
                {
                    struct.libvirtException = new LibvirtException();
                    struct.libvirtException.read(iprot);
                    struct.setLibvirtExceptionIsSet(true);
                }
            }
        }

    }

    public static class powerOff_args
        implements org.apache.thrift.TBase<powerOff_args, powerOff_args._Fields>,
        java.io.Serializable, Cloneable, Comparable<powerOff_args>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("powerOff_args");

        private static final org.apache.thrift.protocol.TField DOMAIN_NAME_FIELD_DESC =
            new org.apache.thrift.protocol.TField("domainName",
                org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new powerOff_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new powerOff_argsTupleSchemeFactory());
        }

        public String domainName; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            DOMAIN_NAME((short) 1, "domainName");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // DOMAIN_NAME
                        return DOMAIN_NAME;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.DOMAIN_NAME,
                new org.apache.thrift.meta_data.FieldMetaData("domainName",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(powerOff_args.class,
                metaDataMap);
        }

        public powerOff_args()
        {
        }

        public powerOff_args(String domainName)
        {
            this();
            this.domainName = domainName;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public powerOff_args(powerOff_args other)
        {
            if (other.isSetDomainName())
            {
                this.domainName = other.domainName;
            }
        }

        public powerOff_args deepCopy()
        {
            return new powerOff_args(this);
        }

        @Override
        public void clear()
        {
            this.domainName = null;
        }

        public String getDomainName()
        {
            return this.domainName;
        }

        public powerOff_args setDomainName(String domainName)
        {
            this.domainName = domainName;
            return this;
        }

        public void unsetDomainName()
        {
            this.domainName = null;
        }

        /** Returns true if field domainName is set (has been assigned a value) and false otherwise */
        public boolean isSetDomainName()
        {
            return this.domainName != null;
        }

        public void setDomainNameIsSet(boolean value)
        {
            if (!value)
            {
                this.domainName = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case DOMAIN_NAME:
                    if (value == null)
                    {
                        unsetDomainName();
                    }
                    else
                    {
                        setDomainName((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case DOMAIN_NAME:
                    return getDomainName();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case DOMAIN_NAME:
                    return isSetDomainName();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof powerOff_args)
                return this.equals((powerOff_args) that);
            return false;
        }

        public boolean equals(powerOff_args that)
        {
            if (that == null)
                return false;

            boolean this_present_domainName = true && this.isSetDomainName();
            boolean that_present_domainName = true && that.isSetDomainName();
            if (this_present_domainName || that_present_domainName)
            {
                if (!(this_present_domainName && that_present_domainName))
                    return false;
                if (!this.domainName.equals(that.domainName))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_domainName = true && (isSetDomainName());
            list.add(present_domainName);
            if (present_domainName)
                list.add(domainName);

            return list.hashCode();
        }

        @Override
        public int compareTo(powerOff_args other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetDomainName()).compareTo(other.isSetDomainName());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetDomainName())
            {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.domainName, other.domainName);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("powerOff_args(");
            boolean first = true;

            sb.append("domainName:");
            if (this.domainName == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.domainName);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class powerOff_argsStandardSchemeFactory implements SchemeFactory
        {
            public powerOff_argsStandardScheme getScheme()
            {
                return new powerOff_argsStandardScheme();
            }
        }

        private static class powerOff_argsStandardScheme extends StandardScheme<powerOff_args>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, powerOff_args struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // DOMAIN_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.domainName = iprot.readString();
                                struct.setDomainNameIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, powerOff_args struct)
                throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.domainName != null)
                {
                    oprot.writeFieldBegin(DOMAIN_NAME_FIELD_DESC);
                    oprot.writeString(struct.domainName);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class powerOff_argsTupleSchemeFactory implements SchemeFactory
        {
            public powerOff_argsTupleScheme getScheme()
            {
                return new powerOff_argsTupleScheme();
            }
        }

        private static class powerOff_argsTupleScheme extends TupleScheme<powerOff_args>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, powerOff_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetDomainName())
                {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetDomainName())
                {
                    oprot.writeString(struct.domainName);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, powerOff_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0))
                {
                    struct.domainName = iprot.readString();
                    struct.setDomainNameIsSet(true);
                }
            }
        }

    }

    public static class powerOff_result
        implements org.apache.thrift.TBase<powerOff_result, powerOff_result._Fields>,
        java.io.Serializable, Cloneable, Comparable<powerOff_result>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("powerOff_result");

        private static final org.apache.thrift.protocol.TField LIBVIRT_EXCEPTION_FIELD_DESC =
            new org.apache.thrift.protocol.TField("libvirtException",
                org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new powerOff_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new powerOff_resultTupleSchemeFactory());
        }

        public LibvirtException libvirtException; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            LIBVIRT_EXCEPTION((short) 1, "libvirtException");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // LIBVIRT_EXCEPTION
                        return LIBVIRT_EXCEPTION;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.LIBVIRT_EXCEPTION,
                new org.apache.thrift.meta_data.FieldMetaData("libvirtException",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(powerOff_result.class,
                metaDataMap);
        }

        public powerOff_result()
        {
        }

        public powerOff_result(LibvirtException libvirtException)
        {
            this();
            this.libvirtException = libvirtException;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public powerOff_result(powerOff_result other)
        {
            if (other.isSetLibvirtException())
            {
                this.libvirtException = new LibvirtException(other.libvirtException);
            }
        }

        public powerOff_result deepCopy()
        {
            return new powerOff_result(this);
        }

        @Override
        public void clear()
        {
            this.libvirtException = null;
        }

        public LibvirtException getLibvirtException()
        {
            return this.libvirtException;
        }

        public powerOff_result setLibvirtException(LibvirtException libvirtException)
        {
            this.libvirtException = libvirtException;
            return this;
        }

        public void unsetLibvirtException()
        {
            this.libvirtException = null;
        }

        /** Returns true if field libvirtException is set (has been assigned a value) and false otherwise */
        public boolean isSetLibvirtException()
        {
            return this.libvirtException != null;
        }

        public void setLibvirtExceptionIsSet(boolean value)
        {
            if (!value)
            {
                this.libvirtException = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    if (value == null)
                    {
                        unsetLibvirtException();
                    }
                    else
                    {
                        setLibvirtException((LibvirtException) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    return getLibvirtException();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    return isSetLibvirtException();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof powerOff_result)
                return this.equals((powerOff_result) that);
            return false;
        }

        public boolean equals(powerOff_result that)
        {
            if (that == null)
                return false;

            boolean this_present_libvirtException = true && this.isSetLibvirtException();
            boolean that_present_libvirtException = true && that.isSetLibvirtException();
            if (this_present_libvirtException || that_present_libvirtException)
            {
                if (!(this_present_libvirtException && that_present_libvirtException))
                    return false;
                if (!this.libvirtException.equals(that.libvirtException))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_libvirtException = true && (isSetLibvirtException());
            list.add(present_libvirtException);
            if (present_libvirtException)
                list.add(libvirtException);

            return list.hashCode();
        }

        @Override
        public int compareTo(powerOff_result other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison =
                Boolean.valueOf(isSetLibvirtException()).compareTo(other.isSetLibvirtException());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetLibvirtException())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.libvirtException,
                    other.libvirtException);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("powerOff_result(");
            boolean first = true;

            sb.append("libvirtException:");
            if (this.libvirtException == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.libvirtException);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class powerOff_resultStandardSchemeFactory implements SchemeFactory
        {
            public powerOff_resultStandardScheme getScheme()
            {
                return new powerOff_resultStandardScheme();
            }
        }

        private static class powerOff_resultStandardScheme extends StandardScheme<powerOff_result>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, powerOff_result struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // LIBVIRT_EXCEPTION
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT)
                            {
                                struct.libvirtException = new LibvirtException();
                                struct.libvirtException.read(iprot);
                                struct.setLibvirtExceptionIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, powerOff_result struct)
                throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.libvirtException != null)
                {
                    oprot.writeFieldBegin(LIBVIRT_EXCEPTION_FIELD_DESC);
                    struct.libvirtException.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class powerOff_resultTupleSchemeFactory implements SchemeFactory
        {
            public powerOff_resultTupleScheme getScheme()
            {
                return new powerOff_resultTupleScheme();
            }
        }

        private static class powerOff_resultTupleScheme extends TupleScheme<powerOff_result>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, powerOff_result struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetLibvirtException())
                {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetLibvirtException())
                {
                    struct.libvirtException.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, powerOff_result struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0))
                {
                    struct.libvirtException = new LibvirtException();
                    struct.libvirtException.read(iprot);
                    struct.setLibvirtExceptionIsSet(true);
                }
            }
        }

    }

    public static class shutdown_args
        implements org.apache.thrift.TBase<shutdown_args, shutdown_args._Fields>,
        java.io.Serializable, Cloneable, Comparable<shutdown_args>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("shutdown_args");

        private static final org.apache.thrift.protocol.TField DOMAIN_NAME_FIELD_DESC =
            new org.apache.thrift.protocol.TField("domainName",
                org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new shutdown_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new shutdown_argsTupleSchemeFactory());
        }

        public String domainName; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            DOMAIN_NAME((short) 1, "domainName");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // DOMAIN_NAME
                        return DOMAIN_NAME;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.DOMAIN_NAME,
                new org.apache.thrift.meta_data.FieldMetaData("domainName",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(shutdown_args.class,
                metaDataMap);
        }

        public shutdown_args()
        {
        }

        public shutdown_args(String domainName)
        {
            this();
            this.domainName = domainName;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public shutdown_args(shutdown_args other)
        {
            if (other.isSetDomainName())
            {
                this.domainName = other.domainName;
            }
        }

        public shutdown_args deepCopy()
        {
            return new shutdown_args(this);
        }

        @Override
        public void clear()
        {
            this.domainName = null;
        }

        public String getDomainName()
        {
            return this.domainName;
        }

        public shutdown_args setDomainName(String domainName)
        {
            this.domainName = domainName;
            return this;
        }

        public void unsetDomainName()
        {
            this.domainName = null;
        }

        /** Returns true if field domainName is set (has been assigned a value) and false otherwise */
        public boolean isSetDomainName()
        {
            return this.domainName != null;
        }

        public void setDomainNameIsSet(boolean value)
        {
            if (!value)
            {
                this.domainName = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case DOMAIN_NAME:
                    if (value == null)
                    {
                        unsetDomainName();
                    }
                    else
                    {
                        setDomainName((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case DOMAIN_NAME:
                    return getDomainName();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case DOMAIN_NAME:
                    return isSetDomainName();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof shutdown_args)
                return this.equals((shutdown_args) that);
            return false;
        }

        public boolean equals(shutdown_args that)
        {
            if (that == null)
                return false;

            boolean this_present_domainName = true && this.isSetDomainName();
            boolean that_present_domainName = true && that.isSetDomainName();
            if (this_present_domainName || that_present_domainName)
            {
                if (!(this_present_domainName && that_present_domainName))
                    return false;
                if (!this.domainName.equals(that.domainName))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_domainName = true && (isSetDomainName());
            list.add(present_domainName);
            if (present_domainName)
                list.add(domainName);

            return list.hashCode();
        }

        @Override
        public int compareTo(shutdown_args other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetDomainName()).compareTo(other.isSetDomainName());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetDomainName())
            {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.domainName, other.domainName);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("shutdown_args(");
            boolean first = true;

            sb.append("domainName:");
            if (this.domainName == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.domainName);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class shutdown_argsStandardSchemeFactory implements SchemeFactory
        {
            public shutdown_argsStandardScheme getScheme()
            {
                return new shutdown_argsStandardScheme();
            }
        }

        private static class shutdown_argsStandardScheme extends StandardScheme<shutdown_args>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, shutdown_args struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // DOMAIN_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.domainName = iprot.readString();
                                struct.setDomainNameIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, shutdown_args struct)
                throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.domainName != null)
                {
                    oprot.writeFieldBegin(DOMAIN_NAME_FIELD_DESC);
                    oprot.writeString(struct.domainName);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class shutdown_argsTupleSchemeFactory implements SchemeFactory
        {
            public shutdown_argsTupleScheme getScheme()
            {
                return new shutdown_argsTupleScheme();
            }
        }

        private static class shutdown_argsTupleScheme extends TupleScheme<shutdown_args>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, shutdown_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetDomainName())
                {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetDomainName())
                {
                    oprot.writeString(struct.domainName);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, shutdown_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0))
                {
                    struct.domainName = iprot.readString();
                    struct.setDomainNameIsSet(true);
                }
            }
        }

    }

    public static class shutdown_result
        implements org.apache.thrift.TBase<shutdown_result, shutdown_result._Fields>,
        java.io.Serializable, Cloneable, Comparable<shutdown_result>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("shutdown_result");

        private static final org.apache.thrift.protocol.TField LIBVIRT_EXCEPTION_FIELD_DESC =
            new org.apache.thrift.protocol.TField("libvirtException",
                org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new shutdown_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new shutdown_resultTupleSchemeFactory());
        }

        public LibvirtException libvirtException; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            LIBVIRT_EXCEPTION((short) 1, "libvirtException");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // LIBVIRT_EXCEPTION
                        return LIBVIRT_EXCEPTION;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.LIBVIRT_EXCEPTION,
                new org.apache.thrift.meta_data.FieldMetaData("libvirtException",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(shutdown_result.class,
                metaDataMap);
        }

        public shutdown_result()
        {
        }

        public shutdown_result(LibvirtException libvirtException)
        {
            this();
            this.libvirtException = libvirtException;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public shutdown_result(shutdown_result other)
        {
            if (other.isSetLibvirtException())
            {
                this.libvirtException = new LibvirtException(other.libvirtException);
            }
        }

        public shutdown_result deepCopy()
        {
            return new shutdown_result(this);
        }

        @Override
        public void clear()
        {
            this.libvirtException = null;
        }

        public LibvirtException getLibvirtException()
        {
            return this.libvirtException;
        }

        public shutdown_result setLibvirtException(LibvirtException libvirtException)
        {
            this.libvirtException = libvirtException;
            return this;
        }

        public void unsetLibvirtException()
        {
            this.libvirtException = null;
        }

        /** Returns true if field libvirtException is set (has been assigned a value) and false otherwise */
        public boolean isSetLibvirtException()
        {
            return this.libvirtException != null;
        }

        public void setLibvirtExceptionIsSet(boolean value)
        {
            if (!value)
            {
                this.libvirtException = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    if (value == null)
                    {
                        unsetLibvirtException();
                    }
                    else
                    {
                        setLibvirtException((LibvirtException) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    return getLibvirtException();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    return isSetLibvirtException();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof shutdown_result)
                return this.equals((shutdown_result) that);
            return false;
        }

        public boolean equals(shutdown_result that)
        {
            if (that == null)
                return false;

            boolean this_present_libvirtException = true && this.isSetLibvirtException();
            boolean that_present_libvirtException = true && that.isSetLibvirtException();
            if (this_present_libvirtException || that_present_libvirtException)
            {
                if (!(this_present_libvirtException && that_present_libvirtException))
                    return false;
                if (!this.libvirtException.equals(that.libvirtException))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_libvirtException = true && (isSetLibvirtException());
            list.add(present_libvirtException);
            if (present_libvirtException)
                list.add(libvirtException);

            return list.hashCode();
        }

        @Override
        public int compareTo(shutdown_result other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison =
                Boolean.valueOf(isSetLibvirtException()).compareTo(other.isSetLibvirtException());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetLibvirtException())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.libvirtException,
                    other.libvirtException);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("shutdown_result(");
            boolean first = true;

            sb.append("libvirtException:");
            if (this.libvirtException == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.libvirtException);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class shutdown_resultStandardSchemeFactory implements SchemeFactory
        {
            public shutdown_resultStandardScheme getScheme()
            {
                return new shutdown_resultStandardScheme();
            }
        }

        private static class shutdown_resultStandardScheme extends StandardScheme<shutdown_result>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, shutdown_result struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // LIBVIRT_EXCEPTION
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT)
                            {
                                struct.libvirtException = new LibvirtException();
                                struct.libvirtException.read(iprot);
                                struct.setLibvirtExceptionIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, shutdown_result struct)
                throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.libvirtException != null)
                {
                    oprot.writeFieldBegin(LIBVIRT_EXCEPTION_FIELD_DESC);
                    struct.libvirtException.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class shutdown_resultTupleSchemeFactory implements SchemeFactory
        {
            public shutdown_resultTupleScheme getScheme()
            {
                return new shutdown_resultTupleScheme();
            }
        }

        private static class shutdown_resultTupleScheme extends TupleScheme<shutdown_result>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, shutdown_result struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetLibvirtException())
                {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetLibvirtException())
                {
                    struct.libvirtException.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, shutdown_result struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0))
                {
                    struct.libvirtException = new LibvirtException();
                    struct.libvirtException.read(iprot);
                    struct.setLibvirtExceptionIsSet(true);
                }
            }
        }

    }

    public static class reset_args
        implements org.apache.thrift.TBase<reset_args, reset_args._Fields>, java.io.Serializable,
        Cloneable, Comparable<reset_args>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("reset_args");

        private static final org.apache.thrift.protocol.TField DOMAIN_NAME_FIELD_DESC =
            new org.apache.thrift.protocol.TField("domainName",
                org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new reset_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new reset_argsTupleSchemeFactory());
        }

        public String domainName; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            DOMAIN_NAME((short) 1, "domainName");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // DOMAIN_NAME
                        return DOMAIN_NAME;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.DOMAIN_NAME,
                new org.apache.thrift.meta_data.FieldMetaData("domainName",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reset_args.class,
                metaDataMap);
        }

        public reset_args()
        {
        }

        public reset_args(String domainName)
        {
            this();
            this.domainName = domainName;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public reset_args(reset_args other)
        {
            if (other.isSetDomainName())
            {
                this.domainName = other.domainName;
            }
        }

        public reset_args deepCopy()
        {
            return new reset_args(this);
        }

        @Override
        public void clear()
        {
            this.domainName = null;
        }

        public String getDomainName()
        {
            return this.domainName;
        }

        public reset_args setDomainName(String domainName)
        {
            this.domainName = domainName;
            return this;
        }

        public void unsetDomainName()
        {
            this.domainName = null;
        }

        /** Returns true if field domainName is set (has been assigned a value) and false otherwise */
        public boolean isSetDomainName()
        {
            return this.domainName != null;
        }

        public void setDomainNameIsSet(boolean value)
        {
            if (!value)
            {
                this.domainName = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case DOMAIN_NAME:
                    if (value == null)
                    {
                        unsetDomainName();
                    }
                    else
                    {
                        setDomainName((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case DOMAIN_NAME:
                    return getDomainName();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case DOMAIN_NAME:
                    return isSetDomainName();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof reset_args)
                return this.equals((reset_args) that);
            return false;
        }

        public boolean equals(reset_args that)
        {
            if (that == null)
                return false;

            boolean this_present_domainName = true && this.isSetDomainName();
            boolean that_present_domainName = true && that.isSetDomainName();
            if (this_present_domainName || that_present_domainName)
            {
                if (!(this_present_domainName && that_present_domainName))
                    return false;
                if (!this.domainName.equals(that.domainName))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_domainName = true && (isSetDomainName());
            list.add(present_domainName);
            if (present_domainName)
                list.add(domainName);

            return list.hashCode();
        }

        @Override
        public int compareTo(reset_args other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetDomainName()).compareTo(other.isSetDomainName());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetDomainName())
            {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.domainName, other.domainName);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("reset_args(");
            boolean first = true;

            sb.append("domainName:");
            if (this.domainName == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.domainName);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class reset_argsStandardSchemeFactory implements SchemeFactory
        {
            public reset_argsStandardScheme getScheme()
            {
                return new reset_argsStandardScheme();
            }
        }

        private static class reset_argsStandardScheme extends StandardScheme<reset_args>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, reset_args struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // DOMAIN_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.domainName = iprot.readString();
                                struct.setDomainNameIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, reset_args struct)
                throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.domainName != null)
                {
                    oprot.writeFieldBegin(DOMAIN_NAME_FIELD_DESC);
                    oprot.writeString(struct.domainName);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class reset_argsTupleSchemeFactory implements SchemeFactory
        {
            public reset_argsTupleScheme getScheme()
            {
                return new reset_argsTupleScheme();
            }
        }

        private static class reset_argsTupleScheme extends TupleScheme<reset_args>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, reset_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetDomainName())
                {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetDomainName())
                {
                    oprot.writeString(struct.domainName);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, reset_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0))
                {
                    struct.domainName = iprot.readString();
                    struct.setDomainNameIsSet(true);
                }
            }
        }

    }

    public static class reset_result
        implements org.apache.thrift.TBase<reset_result, reset_result._Fields>,
        java.io.Serializable, Cloneable, Comparable<reset_result>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("reset_result");

        private static final org.apache.thrift.protocol.TField LIBVIRT_EXCEPTION_FIELD_DESC =
            new org.apache.thrift.protocol.TField("libvirtException",
                org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new reset_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new reset_resultTupleSchemeFactory());
        }

        public LibvirtException libvirtException; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            LIBVIRT_EXCEPTION((short) 1, "libvirtException");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // LIBVIRT_EXCEPTION
                        return LIBVIRT_EXCEPTION;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.LIBVIRT_EXCEPTION,
                new org.apache.thrift.meta_data.FieldMetaData("libvirtException",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reset_result.class,
                metaDataMap);
        }

        public reset_result()
        {
        }

        public reset_result(LibvirtException libvirtException)
        {
            this();
            this.libvirtException = libvirtException;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public reset_result(reset_result other)
        {
            if (other.isSetLibvirtException())
            {
                this.libvirtException = new LibvirtException(other.libvirtException);
            }
        }

        public reset_result deepCopy()
        {
            return new reset_result(this);
        }

        @Override
        public void clear()
        {
            this.libvirtException = null;
        }

        public LibvirtException getLibvirtException()
        {
            return this.libvirtException;
        }

        public reset_result setLibvirtException(LibvirtException libvirtException)
        {
            this.libvirtException = libvirtException;
            return this;
        }

        public void unsetLibvirtException()
        {
            this.libvirtException = null;
        }

        /** Returns true if field libvirtException is set (has been assigned a value) and false otherwise */
        public boolean isSetLibvirtException()
        {
            return this.libvirtException != null;
        }

        public void setLibvirtExceptionIsSet(boolean value)
        {
            if (!value)
            {
                this.libvirtException = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    if (value == null)
                    {
                        unsetLibvirtException();
                    }
                    else
                    {
                        setLibvirtException((LibvirtException) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    return getLibvirtException();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    return isSetLibvirtException();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof reset_result)
                return this.equals((reset_result) that);
            return false;
        }

        public boolean equals(reset_result that)
        {
            if (that == null)
                return false;

            boolean this_present_libvirtException = true && this.isSetLibvirtException();
            boolean that_present_libvirtException = true && that.isSetLibvirtException();
            if (this_present_libvirtException || that_present_libvirtException)
            {
                if (!(this_present_libvirtException && that_present_libvirtException))
                    return false;
                if (!this.libvirtException.equals(that.libvirtException))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_libvirtException = true && (isSetLibvirtException());
            list.add(present_libvirtException);
            if (present_libvirtException)
                list.add(libvirtException);

            return list.hashCode();
        }

        @Override
        public int compareTo(reset_result other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison =
                Boolean.valueOf(isSetLibvirtException()).compareTo(other.isSetLibvirtException());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetLibvirtException())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.libvirtException,
                    other.libvirtException);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("reset_result(");
            boolean first = true;

            sb.append("libvirtException:");
            if (this.libvirtException == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.libvirtException);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class reset_resultStandardSchemeFactory implements SchemeFactory
        {
            public reset_resultStandardScheme getScheme()
            {
                return new reset_resultStandardScheme();
            }
        }

        private static class reset_resultStandardScheme extends StandardScheme<reset_result>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, reset_result struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // LIBVIRT_EXCEPTION
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT)
                            {
                                struct.libvirtException = new LibvirtException();
                                struct.libvirtException.read(iprot);
                                struct.setLibvirtExceptionIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, reset_result struct)
                throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.libvirtException != null)
                {
                    oprot.writeFieldBegin(LIBVIRT_EXCEPTION_FIELD_DESC);
                    struct.libvirtException.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class reset_resultTupleSchemeFactory implements SchemeFactory
        {
            public reset_resultTupleScheme getScheme()
            {
                return new reset_resultTupleScheme();
            }
        }

        private static class reset_resultTupleScheme extends TupleScheme<reset_result>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, reset_result struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetLibvirtException())
                {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetLibvirtException())
                {
                    struct.libvirtException.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, reset_result struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0))
                {
                    struct.libvirtException = new LibvirtException();
                    struct.libvirtException.read(iprot);
                    struct.setLibvirtExceptionIsSet(true);
                }
            }
        }

    }

    public static class pause_args
        implements org.apache.thrift.TBase<pause_args, pause_args._Fields>, java.io.Serializable,
        Cloneable, Comparable<pause_args>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("pause_args");

        private static final org.apache.thrift.protocol.TField DOMAIN_NAME_FIELD_DESC =
            new org.apache.thrift.protocol.TField("domainName",
                org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new pause_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new pause_argsTupleSchemeFactory());
        }

        public String domainName; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            DOMAIN_NAME((short) 1, "domainName");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // DOMAIN_NAME
                        return DOMAIN_NAME;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.DOMAIN_NAME,
                new org.apache.thrift.meta_data.FieldMetaData("domainName",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pause_args.class,
                metaDataMap);
        }

        public pause_args()
        {
        }

        public pause_args(String domainName)
        {
            this();
            this.domainName = domainName;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public pause_args(pause_args other)
        {
            if (other.isSetDomainName())
            {
                this.domainName = other.domainName;
            }
        }

        public pause_args deepCopy()
        {
            return new pause_args(this);
        }

        @Override
        public void clear()
        {
            this.domainName = null;
        }

        public String getDomainName()
        {
            return this.domainName;
        }

        public pause_args setDomainName(String domainName)
        {
            this.domainName = domainName;
            return this;
        }

        public void unsetDomainName()
        {
            this.domainName = null;
        }

        /** Returns true if field domainName is set (has been assigned a value) and false otherwise */
        public boolean isSetDomainName()
        {
            return this.domainName != null;
        }

        public void setDomainNameIsSet(boolean value)
        {
            if (!value)
            {
                this.domainName = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case DOMAIN_NAME:
                    if (value == null)
                    {
                        unsetDomainName();
                    }
                    else
                    {
                        setDomainName((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case DOMAIN_NAME:
                    return getDomainName();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case DOMAIN_NAME:
                    return isSetDomainName();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof pause_args)
                return this.equals((pause_args) that);
            return false;
        }

        public boolean equals(pause_args that)
        {
            if (that == null)
                return false;

            boolean this_present_domainName = true && this.isSetDomainName();
            boolean that_present_domainName = true && that.isSetDomainName();
            if (this_present_domainName || that_present_domainName)
            {
                if (!(this_present_domainName && that_present_domainName))
                    return false;
                if (!this.domainName.equals(that.domainName))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_domainName = true && (isSetDomainName());
            list.add(present_domainName);
            if (present_domainName)
                list.add(domainName);

            return list.hashCode();
        }

        @Override
        public int compareTo(pause_args other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetDomainName()).compareTo(other.isSetDomainName());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetDomainName())
            {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.domainName, other.domainName);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("pause_args(");
            boolean first = true;

            sb.append("domainName:");
            if (this.domainName == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.domainName);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class pause_argsStandardSchemeFactory implements SchemeFactory
        {
            public pause_argsStandardScheme getScheme()
            {
                return new pause_argsStandardScheme();
            }
        }

        private static class pause_argsStandardScheme extends StandardScheme<pause_args>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, pause_args struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // DOMAIN_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.domainName = iprot.readString();
                                struct.setDomainNameIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, pause_args struct)
                throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.domainName != null)
                {
                    oprot.writeFieldBegin(DOMAIN_NAME_FIELD_DESC);
                    oprot.writeString(struct.domainName);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class pause_argsTupleSchemeFactory implements SchemeFactory
        {
            public pause_argsTupleScheme getScheme()
            {
                return new pause_argsTupleScheme();
            }
        }

        private static class pause_argsTupleScheme extends TupleScheme<pause_args>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, pause_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetDomainName())
                {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetDomainName())
                {
                    oprot.writeString(struct.domainName);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, pause_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0))
                {
                    struct.domainName = iprot.readString();
                    struct.setDomainNameIsSet(true);
                }
            }
        }

    }

    public static class pause_result
        implements org.apache.thrift.TBase<pause_result, pause_result._Fields>,
        java.io.Serializable, Cloneable, Comparable<pause_result>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("pause_result");

        private static final org.apache.thrift.protocol.TField LIBVIRT_EXCEPTION_FIELD_DESC =
            new org.apache.thrift.protocol.TField("libvirtException",
                org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new pause_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new pause_resultTupleSchemeFactory());
        }

        public LibvirtException libvirtException; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            LIBVIRT_EXCEPTION((short) 1, "libvirtException");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // LIBVIRT_EXCEPTION
                        return LIBVIRT_EXCEPTION;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.LIBVIRT_EXCEPTION,
                new org.apache.thrift.meta_data.FieldMetaData("libvirtException",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pause_result.class,
                metaDataMap);
        }

        public pause_result()
        {
        }

        public pause_result(LibvirtException libvirtException)
        {
            this();
            this.libvirtException = libvirtException;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public pause_result(pause_result other)
        {
            if (other.isSetLibvirtException())
            {
                this.libvirtException = new LibvirtException(other.libvirtException);
            }
        }

        public pause_result deepCopy()
        {
            return new pause_result(this);
        }

        @Override
        public void clear()
        {
            this.libvirtException = null;
        }

        public LibvirtException getLibvirtException()
        {
            return this.libvirtException;
        }

        public pause_result setLibvirtException(LibvirtException libvirtException)
        {
            this.libvirtException = libvirtException;
            return this;
        }

        public void unsetLibvirtException()
        {
            this.libvirtException = null;
        }

        /** Returns true if field libvirtException is set (has been assigned a value) and false otherwise */
        public boolean isSetLibvirtException()
        {
            return this.libvirtException != null;
        }

        public void setLibvirtExceptionIsSet(boolean value)
        {
            if (!value)
            {
                this.libvirtException = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    if (value == null)
                    {
                        unsetLibvirtException();
                    }
                    else
                    {
                        setLibvirtException((LibvirtException) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    return getLibvirtException();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    return isSetLibvirtException();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof pause_result)
                return this.equals((pause_result) that);
            return false;
        }

        public boolean equals(pause_result that)
        {
            if (that == null)
                return false;

            boolean this_present_libvirtException = true && this.isSetLibvirtException();
            boolean that_present_libvirtException = true && that.isSetLibvirtException();
            if (this_present_libvirtException || that_present_libvirtException)
            {
                if (!(this_present_libvirtException && that_present_libvirtException))
                    return false;
                if (!this.libvirtException.equals(that.libvirtException))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_libvirtException = true && (isSetLibvirtException());
            list.add(present_libvirtException);
            if (present_libvirtException)
                list.add(libvirtException);

            return list.hashCode();
        }

        @Override
        public int compareTo(pause_result other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison =
                Boolean.valueOf(isSetLibvirtException()).compareTo(other.isSetLibvirtException());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetLibvirtException())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.libvirtException,
                    other.libvirtException);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("pause_result(");
            boolean first = true;

            sb.append("libvirtException:");
            if (this.libvirtException == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.libvirtException);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class pause_resultStandardSchemeFactory implements SchemeFactory
        {
            public pause_resultStandardScheme getScheme()
            {
                return new pause_resultStandardScheme();
            }
        }

        private static class pause_resultStandardScheme extends StandardScheme<pause_result>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, pause_result struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // LIBVIRT_EXCEPTION
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT)
                            {
                                struct.libvirtException = new LibvirtException();
                                struct.libvirtException.read(iprot);
                                struct.setLibvirtExceptionIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, pause_result struct)
                throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.libvirtException != null)
                {
                    oprot.writeFieldBegin(LIBVIRT_EXCEPTION_FIELD_DESC);
                    struct.libvirtException.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class pause_resultTupleSchemeFactory implements SchemeFactory
        {
            public pause_resultTupleScheme getScheme()
            {
                return new pause_resultTupleScheme();
            }
        }

        private static class pause_resultTupleScheme extends TupleScheme<pause_result>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, pause_result struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetLibvirtException())
                {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetLibvirtException())
                {
                    struct.libvirtException.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, pause_result struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0))
                {
                    struct.libvirtException = new LibvirtException();
                    struct.libvirtException.read(iprot);
                    struct.setLibvirtExceptionIsSet(true);
                }
            }
        }

    }

    public static class resume_args
        implements org.apache.thrift.TBase<resume_args, resume_args._Fields>, java.io.Serializable,
        Cloneable, Comparable<resume_args>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("resume_args");

        private static final org.apache.thrift.protocol.TField DOMAIN_NAME_FIELD_DESC =
            new org.apache.thrift.protocol.TField("domainName",
                org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new resume_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new resume_argsTupleSchemeFactory());
        }

        public String domainName; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            DOMAIN_NAME((short) 1, "domainName");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // DOMAIN_NAME
                        return DOMAIN_NAME;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.DOMAIN_NAME,
                new org.apache.thrift.meta_data.FieldMetaData("domainName",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resume_args.class,
                metaDataMap);
        }

        public resume_args()
        {
        }

        public resume_args(String domainName)
        {
            this();
            this.domainName = domainName;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public resume_args(resume_args other)
        {
            if (other.isSetDomainName())
            {
                this.domainName = other.domainName;
            }
        }

        public resume_args deepCopy()
        {
            return new resume_args(this);
        }

        @Override
        public void clear()
        {
            this.domainName = null;
        }

        public String getDomainName()
        {
            return this.domainName;
        }

        public resume_args setDomainName(String domainName)
        {
            this.domainName = domainName;
            return this;
        }

        public void unsetDomainName()
        {
            this.domainName = null;
        }

        /** Returns true if field domainName is set (has been assigned a value) and false otherwise */
        public boolean isSetDomainName()
        {
            return this.domainName != null;
        }

        public void setDomainNameIsSet(boolean value)
        {
            if (!value)
            {
                this.domainName = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case DOMAIN_NAME:
                    if (value == null)
                    {
                        unsetDomainName();
                    }
                    else
                    {
                        setDomainName((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case DOMAIN_NAME:
                    return getDomainName();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case DOMAIN_NAME:
                    return isSetDomainName();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof resume_args)
                return this.equals((resume_args) that);
            return false;
        }

        public boolean equals(resume_args that)
        {
            if (that == null)
                return false;

            boolean this_present_domainName = true && this.isSetDomainName();
            boolean that_present_domainName = true && that.isSetDomainName();
            if (this_present_domainName || that_present_domainName)
            {
                if (!(this_present_domainName && that_present_domainName))
                    return false;
                if (!this.domainName.equals(that.domainName))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_domainName = true && (isSetDomainName());
            list.add(present_domainName);
            if (present_domainName)
                list.add(domainName);

            return list.hashCode();
        }

        @Override
        public int compareTo(resume_args other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetDomainName()).compareTo(other.isSetDomainName());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetDomainName())
            {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.domainName, other.domainName);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("resume_args(");
            boolean first = true;

            sb.append("domainName:");
            if (this.domainName == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.domainName);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class resume_argsStandardSchemeFactory implements SchemeFactory
        {
            public resume_argsStandardScheme getScheme()
            {
                return new resume_argsStandardScheme();
            }
        }

        private static class resume_argsStandardScheme extends StandardScheme<resume_args>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, resume_args struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // DOMAIN_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.domainName = iprot.readString();
                                struct.setDomainNameIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, resume_args struct)
                throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.domainName != null)
                {
                    oprot.writeFieldBegin(DOMAIN_NAME_FIELD_DESC);
                    oprot.writeString(struct.domainName);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class resume_argsTupleSchemeFactory implements SchemeFactory
        {
            public resume_argsTupleScheme getScheme()
            {
                return new resume_argsTupleScheme();
            }
        }

        private static class resume_argsTupleScheme extends TupleScheme<resume_args>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, resume_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetDomainName())
                {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetDomainName())
                {
                    oprot.writeString(struct.domainName);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, resume_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0))
                {
                    struct.domainName = iprot.readString();
                    struct.setDomainNameIsSet(true);
                }
            }
        }

    }

    public static class resume_result
        implements org.apache.thrift.TBase<resume_result, resume_result._Fields>,
        java.io.Serializable, Cloneable, Comparable<resume_result>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("resume_result");

        private static final org.apache.thrift.protocol.TField LIBVIRT_EXCEPTION_FIELD_DESC =
            new org.apache.thrift.protocol.TField("libvirtException",
                org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new resume_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new resume_resultTupleSchemeFactory());
        }

        public LibvirtException libvirtException; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            LIBVIRT_EXCEPTION((short) 1, "libvirtException");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // LIBVIRT_EXCEPTION
                        return LIBVIRT_EXCEPTION;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.LIBVIRT_EXCEPTION,
                new org.apache.thrift.meta_data.FieldMetaData("libvirtException",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resume_result.class,
                metaDataMap);
        }

        public resume_result()
        {
        }

        public resume_result(LibvirtException libvirtException)
        {
            this();
            this.libvirtException = libvirtException;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public resume_result(resume_result other)
        {
            if (other.isSetLibvirtException())
            {
                this.libvirtException = new LibvirtException(other.libvirtException);
            }
        }

        public resume_result deepCopy()
        {
            return new resume_result(this);
        }

        @Override
        public void clear()
        {
            this.libvirtException = null;
        }

        public LibvirtException getLibvirtException()
        {
            return this.libvirtException;
        }

        public resume_result setLibvirtException(LibvirtException libvirtException)
        {
            this.libvirtException = libvirtException;
            return this;
        }

        public void unsetLibvirtException()
        {
            this.libvirtException = null;
        }

        /** Returns true if field libvirtException is set (has been assigned a value) and false otherwise */
        public boolean isSetLibvirtException()
        {
            return this.libvirtException != null;
        }

        public void setLibvirtExceptionIsSet(boolean value)
        {
            if (!value)
            {
                this.libvirtException = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    if (value == null)
                    {
                        unsetLibvirtException();
                    }
                    else
                    {
                        setLibvirtException((LibvirtException) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    return getLibvirtException();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    return isSetLibvirtException();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof resume_result)
                return this.equals((resume_result) that);
            return false;
        }

        public boolean equals(resume_result that)
        {
            if (that == null)
                return false;

            boolean this_present_libvirtException = true && this.isSetLibvirtException();
            boolean that_present_libvirtException = true && that.isSetLibvirtException();
            if (this_present_libvirtException || that_present_libvirtException)
            {
                if (!(this_present_libvirtException && that_present_libvirtException))
                    return false;
                if (!this.libvirtException.equals(that.libvirtException))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_libvirtException = true && (isSetLibvirtException());
            list.add(present_libvirtException);
            if (present_libvirtException)
                list.add(libvirtException);

            return list.hashCode();
        }

        @Override
        public int compareTo(resume_result other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison =
                Boolean.valueOf(isSetLibvirtException()).compareTo(other.isSetLibvirtException());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetLibvirtException())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.libvirtException,
                    other.libvirtException);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("resume_result(");
            boolean first = true;

            sb.append("libvirtException:");
            if (this.libvirtException == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.libvirtException);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class resume_resultStandardSchemeFactory implements SchemeFactory
        {
            public resume_resultStandardScheme getScheme()
            {
                return new resume_resultStandardScheme();
            }
        }

        private static class resume_resultStandardScheme extends StandardScheme<resume_result>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, resume_result struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // LIBVIRT_EXCEPTION
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT)
                            {
                                struct.libvirtException = new LibvirtException();
                                struct.libvirtException.read(iprot);
                                struct.setLibvirtExceptionIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, resume_result struct)
                throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.libvirtException != null)
                {
                    oprot.writeFieldBegin(LIBVIRT_EXCEPTION_FIELD_DESC);
                    struct.libvirtException.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class resume_resultTupleSchemeFactory implements SchemeFactory
        {
            public resume_resultTupleScheme getScheme()
            {
                return new resume_resultTupleScheme();
            }
        }

        private static class resume_resultTupleScheme extends TupleScheme<resume_result>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, resume_result struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetLibvirtException())
                {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetLibvirtException())
                {
                    struct.libvirtException.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, resume_result struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0))
                {
                    struct.libvirtException = new LibvirtException();
                    struct.libvirtException.read(iprot);
                    struct.setLibvirtExceptionIsSet(true);
                }
            }
        }

    }

    public static class createISCSIStoragePool_args implements
        org.apache.thrift.TBase<createISCSIStoragePool_args, createISCSIStoragePool_args._Fields>,
        java.io.Serializable, Cloneable, Comparable<createISCSIStoragePool_args>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("createISCSIStoragePool_args");

        private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC =
            new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING,
                (short) 1);

        private static final org.apache.thrift.protocol.TField HOST_FIELD_DESC =
            new org.apache.thrift.protocol.TField("host", org.apache.thrift.protocol.TType.STRING,
                (short) 2);

        private static final org.apache.thrift.protocol.TField IQN_FIELD_DESC =
            new org.apache.thrift.protocol.TField("iqn", org.apache.thrift.protocol.TType.STRING,
                (short) 3);

        private static final org.apache.thrift.protocol.TField TARGET_PATH_FIELD_DESC =
            new org.apache.thrift.protocol.TField("targetPath",
                org.apache.thrift.protocol.TType.STRING, (short) 4);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class,
                new createISCSIStoragePool_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new createISCSIStoragePool_argsTupleSchemeFactory());
        }

        public String name; // required

        public String host; // required

        public String iqn; // required

        public String targetPath; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            NAME((short) 1, "name"),
            HOST((short) 2, "host"),
            IQN((short) 3, "iqn"),
            TARGET_PATH((short) 4, "targetPath");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // NAME
                        return NAME;
                    case 2: // HOST
                        return HOST;
                    case 3: // IQN
                        return IQN;
                    case 4: // TARGET_PATH
                        return TARGET_PATH;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.NAME,
                new org.apache.thrift.meta_data.FieldMetaData("name",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.HOST,
                new org.apache.thrift.meta_data.FieldMetaData("host",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.IQN,
                new org.apache.thrift.meta_data.FieldMetaData("iqn",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.TARGET_PATH,
                new org.apache.thrift.meta_data.FieldMetaData("targetPath",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData
                .addStructMetaDataMap(createISCSIStoragePool_args.class, metaDataMap);
        }

        public createISCSIStoragePool_args()
        {
        }

        public createISCSIStoragePool_args(String name, String host, String iqn, String targetPath)
        {
            this();
            this.name = name;
            this.host = host;
            this.iqn = iqn;
            this.targetPath = targetPath;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public createISCSIStoragePool_args(createISCSIStoragePool_args other)
        {
            if (other.isSetName())
            {
                this.name = other.name;
            }
            if (other.isSetHost())
            {
                this.host = other.host;
            }
            if (other.isSetIqn())
            {
                this.iqn = other.iqn;
            }
            if (other.isSetTargetPath())
            {
                this.targetPath = other.targetPath;
            }
        }

        public createISCSIStoragePool_args deepCopy()
        {
            return new createISCSIStoragePool_args(this);
        }

        @Override
        public void clear()
        {
            this.name = null;
            this.host = null;
            this.iqn = null;
            this.targetPath = null;
        }

        public String getName()
        {
            return this.name;
        }

        public createISCSIStoragePool_args setName(String name)
        {
            this.name = name;
            return this;
        }

        public void unsetName()
        {
            this.name = null;
        }

        /** Returns true if field name is set (has been assigned a value) and false otherwise */
        public boolean isSetName()
        {
            return this.name != null;
        }

        public void setNameIsSet(boolean value)
        {
            if (!value)
            {
                this.name = null;
            }
        }

        public String getHost()
        {
            return this.host;
        }

        public createISCSIStoragePool_args setHost(String host)
        {
            this.host = host;
            return this;
        }

        public void unsetHost()
        {
            this.host = null;
        }

        /** Returns true if field host is set (has been assigned a value) and false otherwise */
        public boolean isSetHost()
        {
            return this.host != null;
        }

        public void setHostIsSet(boolean value)
        {
            if (!value)
            {
                this.host = null;
            }
        }

        public String getIqn()
        {
            return this.iqn;
        }

        public createISCSIStoragePool_args setIqn(String iqn)
        {
            this.iqn = iqn;
            return this;
        }

        public void unsetIqn()
        {
            this.iqn = null;
        }

        /** Returns true if field iqn is set (has been assigned a value) and false otherwise */
        public boolean isSetIqn()
        {
            return this.iqn != null;
        }

        public void setIqnIsSet(boolean value)
        {
            if (!value)
            {
                this.iqn = null;
            }
        }

        public String getTargetPath()
        {
            return this.targetPath;
        }

        public createISCSIStoragePool_args setTargetPath(String targetPath)
        {
            this.targetPath = targetPath;
            return this;
        }

        public void unsetTargetPath()
        {
            this.targetPath = null;
        }

        /** Returns true if field targetPath is set (has been assigned a value) and false otherwise */
        public boolean isSetTargetPath()
        {
            return this.targetPath != null;
        }

        public void setTargetPathIsSet(boolean value)
        {
            if (!value)
            {
                this.targetPath = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case NAME:
                    if (value == null)
                    {
                        unsetName();
                    }
                    else
                    {
                        setName((String) value);
                    }
                    break;

                case HOST:
                    if (value == null)
                    {
                        unsetHost();
                    }
                    else
                    {
                        setHost((String) value);
                    }
                    break;

                case IQN:
                    if (value == null)
                    {
                        unsetIqn();
                    }
                    else
                    {
                        setIqn((String) value);
                    }
                    break;

                case TARGET_PATH:
                    if (value == null)
                    {
                        unsetTargetPath();
                    }
                    else
                    {
                        setTargetPath((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case NAME:
                    return getName();

                case HOST:
                    return getHost();

                case IQN:
                    return getIqn();

                case TARGET_PATH:
                    return getTargetPath();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case NAME:
                    return isSetName();
                case HOST:
                    return isSetHost();
                case IQN:
                    return isSetIqn();
                case TARGET_PATH:
                    return isSetTargetPath();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof createISCSIStoragePool_args)
                return this.equals((createISCSIStoragePool_args) that);
            return false;
        }

        public boolean equals(createISCSIStoragePool_args that)
        {
            if (that == null)
                return false;

            boolean this_present_name = true && this.isSetName();
            boolean that_present_name = true && that.isSetName();
            if (this_present_name || that_present_name)
            {
                if (!(this_present_name && that_present_name))
                    return false;
                if (!this.name.equals(that.name))
                    return false;
            }

            boolean this_present_host = true && this.isSetHost();
            boolean that_present_host = true && that.isSetHost();
            if (this_present_host || that_present_host)
            {
                if (!(this_present_host && that_present_host))
                    return false;
                if (!this.host.equals(that.host))
                    return false;
            }

            boolean this_present_iqn = true && this.isSetIqn();
            boolean that_present_iqn = true && that.isSetIqn();
            if (this_present_iqn || that_present_iqn)
            {
                if (!(this_present_iqn && that_present_iqn))
                    return false;
                if (!this.iqn.equals(that.iqn))
                    return false;
            }

            boolean this_present_targetPath = true && this.isSetTargetPath();
            boolean that_present_targetPath = true && that.isSetTargetPath();
            if (this_present_targetPath || that_present_targetPath)
            {
                if (!(this_present_targetPath && that_present_targetPath))
                    return false;
                if (!this.targetPath.equals(that.targetPath))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_name = true && (isSetName());
            list.add(present_name);
            if (present_name)
                list.add(name);

            boolean present_host = true && (isSetHost());
            list.add(present_host);
            if (present_host)
                list.add(host);

            boolean present_iqn = true && (isSetIqn());
            list.add(present_iqn);
            if (present_iqn)
                list.add(iqn);

            boolean present_targetPath = true && (isSetTargetPath());
            list.add(present_targetPath);
            if (present_targetPath)
                list.add(targetPath);

            return list.hashCode();
        }

        @Override
        public int compareTo(createISCSIStoragePool_args other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetName())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetHost()).compareTo(other.isSetHost());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetHost())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host, other.host);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetIqn()).compareTo(other.isSetIqn());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetIqn())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.iqn, other.iqn);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetTargetPath()).compareTo(other.isSetTargetPath());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetTargetPath())
            {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.targetPath, other.targetPath);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("createISCSIStoragePool_args(");
            boolean first = true;

            sb.append("name:");
            if (this.name == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.name);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("host:");
            if (this.host == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.host);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("iqn:");
            if (this.iqn == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.iqn);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("targetPath:");
            if (this.targetPath == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.targetPath);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class createISCSIStoragePool_argsStandardSchemeFactory
            implements SchemeFactory
        {
            public createISCSIStoragePool_argsStandardScheme getScheme()
            {
                return new createISCSIStoragePool_argsStandardScheme();
            }
        }

        private static class createISCSIStoragePool_argsStandardScheme
            extends StandardScheme<createISCSIStoragePool_args>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot,
                createISCSIStoragePool_args struct) throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.name = iprot.readString();
                                struct.setNameIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        case 2: // HOST
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.host = iprot.readString();
                                struct.setHostIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        case 3: // IQN
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.iqn = iprot.readString();
                                struct.setIqnIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        case 4: // TARGET_PATH
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.targetPath = iprot.readString();
                                struct.setTargetPathIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                createISCSIStoragePool_args struct) throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.name != null)
                {
                    oprot.writeFieldBegin(NAME_FIELD_DESC);
                    oprot.writeString(struct.name);
                    oprot.writeFieldEnd();
                }
                if (struct.host != null)
                {
                    oprot.writeFieldBegin(HOST_FIELD_DESC);
                    oprot.writeString(struct.host);
                    oprot.writeFieldEnd();
                }
                if (struct.iqn != null)
                {
                    oprot.writeFieldBegin(IQN_FIELD_DESC);
                    oprot.writeString(struct.iqn);
                    oprot.writeFieldEnd();
                }
                if (struct.targetPath != null)
                {
                    oprot.writeFieldBegin(TARGET_PATH_FIELD_DESC);
                    oprot.writeString(struct.targetPath);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class createISCSIStoragePool_argsTupleSchemeFactory implements SchemeFactory
        {
            public createISCSIStoragePool_argsTupleScheme getScheme()
            {
                return new createISCSIStoragePool_argsTupleScheme();
            }
        }

        private static class createISCSIStoragePool_argsTupleScheme
            extends TupleScheme<createISCSIStoragePool_args>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot,
                createISCSIStoragePool_args struct) throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetName())
                {
                    optionals.set(0);
                }
                if (struct.isSetHost())
                {
                    optionals.set(1);
                }
                if (struct.isSetIqn())
                {
                    optionals.set(2);
                }
                if (struct.isSetTargetPath())
                {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetName())
                {
                    oprot.writeString(struct.name);
                }
                if (struct.isSetHost())
                {
                    oprot.writeString(struct.host);
                }
                if (struct.isSetIqn())
                {
                    oprot.writeString(struct.iqn);
                }
                if (struct.isSetTargetPath())
                {
                    oprot.writeString(struct.targetPath);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot,
                createISCSIStoragePool_args struct) throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0))
                {
                    struct.name = iprot.readString();
                    struct.setNameIsSet(true);
                }
                if (incoming.get(1))
                {
                    struct.host = iprot.readString();
                    struct.setHostIsSet(true);
                }
                if (incoming.get(2))
                {
                    struct.iqn = iprot.readString();
                    struct.setIqnIsSet(true);
                }
                if (incoming.get(3))
                {
                    struct.targetPath = iprot.readString();
                    struct.setTargetPathIsSet(true);
                }
            }
        }

    }

    public static class createISCSIStoragePool_result implements
        org.apache.thrift.TBase<createISCSIStoragePool_result, createISCSIStoragePool_result._Fields>,
        java.io.Serializable, Cloneable, Comparable<createISCSIStoragePool_result>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("createISCSIStoragePool_result");

        private static final org.apache.thrift.protocol.TField LIBVIRT_EXCEPTION_FIELD_DESC =
            new org.apache.thrift.protocol.TField("libvirtException",
                org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class,
                new createISCSIStoragePool_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new createISCSIStoragePool_resultTupleSchemeFactory());
        }

        public LibvirtException libvirtException; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            LIBVIRT_EXCEPTION((short) 1, "libvirtException");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // LIBVIRT_EXCEPTION
                        return LIBVIRT_EXCEPTION;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.LIBVIRT_EXCEPTION,
                new org.apache.thrift.meta_data.FieldMetaData("libvirtException",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData
                .addStructMetaDataMap(createISCSIStoragePool_result.class, metaDataMap);
        }

        public createISCSIStoragePool_result()
        {
        }

        public createISCSIStoragePool_result(LibvirtException libvirtException)
        {
            this();
            this.libvirtException = libvirtException;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public createISCSIStoragePool_result(createISCSIStoragePool_result other)
        {
            if (other.isSetLibvirtException())
            {
                this.libvirtException = new LibvirtException(other.libvirtException);
            }
        }

        public createISCSIStoragePool_result deepCopy()
        {
            return new createISCSIStoragePool_result(this);
        }

        @Override
        public void clear()
        {
            this.libvirtException = null;
        }

        public LibvirtException getLibvirtException()
        {
            return this.libvirtException;
        }

        public createISCSIStoragePool_result setLibvirtException(LibvirtException libvirtException)
        {
            this.libvirtException = libvirtException;
            return this;
        }

        public void unsetLibvirtException()
        {
            this.libvirtException = null;
        }

        /** Returns true if field libvirtException is set (has been assigned a value) and false otherwise */
        public boolean isSetLibvirtException()
        {
            return this.libvirtException != null;
        }

        public void setLibvirtExceptionIsSet(boolean value)
        {
            if (!value)
            {
                this.libvirtException = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    if (value == null)
                    {
                        unsetLibvirtException();
                    }
                    else
                    {
                        setLibvirtException((LibvirtException) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    return getLibvirtException();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    return isSetLibvirtException();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof createISCSIStoragePool_result)
                return this.equals((createISCSIStoragePool_result) that);
            return false;
        }

        public boolean equals(createISCSIStoragePool_result that)
        {
            if (that == null)
                return false;

            boolean this_present_libvirtException = true && this.isSetLibvirtException();
            boolean that_present_libvirtException = true && that.isSetLibvirtException();
            if (this_present_libvirtException || that_present_libvirtException)
            {
                if (!(this_present_libvirtException && that_present_libvirtException))
                    return false;
                if (!this.libvirtException.equals(that.libvirtException))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_libvirtException = true && (isSetLibvirtException());
            list.add(present_libvirtException);
            if (present_libvirtException)
                list.add(libvirtException);

            return list.hashCode();
        }

        @Override
        public int compareTo(createISCSIStoragePool_result other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison =
                Boolean.valueOf(isSetLibvirtException()).compareTo(other.isSetLibvirtException());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetLibvirtException())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.libvirtException,
                    other.libvirtException);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("createISCSIStoragePool_result(");
            boolean first = true;

            sb.append("libvirtException:");
            if (this.libvirtException == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.libvirtException);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class createISCSIStoragePool_resultStandardSchemeFactory
            implements SchemeFactory
        {
            public createISCSIStoragePool_resultStandardScheme getScheme()
            {
                return new createISCSIStoragePool_resultStandardScheme();
            }
        }

        private static class createISCSIStoragePool_resultStandardScheme
            extends StandardScheme<createISCSIStoragePool_result>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot,
                createISCSIStoragePool_result struct) throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // LIBVIRT_EXCEPTION
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT)
                            {
                                struct.libvirtException = new LibvirtException();
                                struct.libvirtException.read(iprot);
                                struct.setLibvirtExceptionIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                createISCSIStoragePool_result struct) throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.libvirtException != null)
                {
                    oprot.writeFieldBegin(LIBVIRT_EXCEPTION_FIELD_DESC);
                    struct.libvirtException.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class createISCSIStoragePool_resultTupleSchemeFactory
            implements SchemeFactory
        {
            public createISCSIStoragePool_resultTupleScheme getScheme()
            {
                return new createISCSIStoragePool_resultTupleScheme();
            }
        }

        private static class createISCSIStoragePool_resultTupleScheme
            extends TupleScheme<createISCSIStoragePool_result>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot,
                createISCSIStoragePool_result struct) throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetLibvirtException())
                {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetLibvirtException())
                {
                    struct.libvirtException.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot,
                createISCSIStoragePool_result struct) throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0))
                {
                    struct.libvirtException = new LibvirtException();
                    struct.libvirtException.read(iprot);
                    struct.setLibvirtExceptionIsSet(true);
                }
            }
        }

    }

    public static class createNFSStoragePool_args implements
        org.apache.thrift.TBase<createNFSStoragePool_args, createNFSStoragePool_args._Fields>,
        java.io.Serializable, Cloneable, Comparable<createNFSStoragePool_args>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("createNFSStoragePool_args");

        private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC =
            new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING,
                (short) 1);

        private static final org.apache.thrift.protocol.TField HOST_FIELD_DESC =
            new org.apache.thrift.protocol.TField("host", org.apache.thrift.protocol.TType.STRING,
                (short) 2);

        private static final org.apache.thrift.protocol.TField DIR_FIELD_DESC =
            new org.apache.thrift.protocol.TField("dir", org.apache.thrift.protocol.TType.STRING,
                (short) 3);

        private static final org.apache.thrift.protocol.TField TARGET_PATH_FIELD_DESC =
            new org.apache.thrift.protocol.TField("targetPath",
                org.apache.thrift.protocol.TType.STRING, (short) 4);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new createNFSStoragePool_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new createNFSStoragePool_argsTupleSchemeFactory());
        }

        public String name; // required

        public String host; // required

        public String dir; // required

        public String targetPath; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            NAME((short) 1, "name"),
            HOST((short) 2, "host"),
            DIR((short) 3, "dir"),
            TARGET_PATH((short) 4, "targetPath");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // NAME
                        return NAME;
                    case 2: // HOST
                        return HOST;
                    case 3: // DIR
                        return DIR;
                    case 4: // TARGET_PATH
                        return TARGET_PATH;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.NAME,
                new org.apache.thrift.meta_data.FieldMetaData("name",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.HOST,
                new org.apache.thrift.meta_data.FieldMetaData("host",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.DIR,
                new org.apache.thrift.meta_data.FieldMetaData("dir",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.TARGET_PATH,
                new org.apache.thrift.meta_data.FieldMetaData("targetPath",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData
                .addStructMetaDataMap(createNFSStoragePool_args.class, metaDataMap);
        }

        public createNFSStoragePool_args()
        {
        }

        public createNFSStoragePool_args(String name, String host, String dir, String targetPath)
        {
            this();
            this.name = name;
            this.host = host;
            this.dir = dir;
            this.targetPath = targetPath;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public createNFSStoragePool_args(createNFSStoragePool_args other)
        {
            if (other.isSetName())
            {
                this.name = other.name;
            }
            if (other.isSetHost())
            {
                this.host = other.host;
            }
            if (other.isSetDir())
            {
                this.dir = other.dir;
            }
            if (other.isSetTargetPath())
            {
                this.targetPath = other.targetPath;
            }
        }

        public createNFSStoragePool_args deepCopy()
        {
            return new createNFSStoragePool_args(this);
        }

        @Override
        public void clear()
        {
            this.name = null;
            this.host = null;
            this.dir = null;
            this.targetPath = null;
        }

        public String getName()
        {
            return this.name;
        }

        public createNFSStoragePool_args setName(String name)
        {
            this.name = name;
            return this;
        }

        public void unsetName()
        {
            this.name = null;
        }

        /** Returns true if field name is set (has been assigned a value) and false otherwise */
        public boolean isSetName()
        {
            return this.name != null;
        }

        public void setNameIsSet(boolean value)
        {
            if (!value)
            {
                this.name = null;
            }
        }

        public String getHost()
        {
            return this.host;
        }

        public createNFSStoragePool_args setHost(String host)
        {
            this.host = host;
            return this;
        }

        public void unsetHost()
        {
            this.host = null;
        }

        /** Returns true if field host is set (has been assigned a value) and false otherwise */
        public boolean isSetHost()
        {
            return this.host != null;
        }

        public void setHostIsSet(boolean value)
        {
            if (!value)
            {
                this.host = null;
            }
        }

        public String getDir()
        {
            return this.dir;
        }

        public createNFSStoragePool_args setDir(String dir)
        {
            this.dir = dir;
            return this;
        }

        public void unsetDir()
        {
            this.dir = null;
        }

        /** Returns true if field dir is set (has been assigned a value) and false otherwise */
        public boolean isSetDir()
        {
            return this.dir != null;
        }

        public void setDirIsSet(boolean value)
        {
            if (!value)
            {
                this.dir = null;
            }
        }

        public String getTargetPath()
        {
            return this.targetPath;
        }

        public createNFSStoragePool_args setTargetPath(String targetPath)
        {
            this.targetPath = targetPath;
            return this;
        }

        public void unsetTargetPath()
        {
            this.targetPath = null;
        }

        /** Returns true if field targetPath is set (has been assigned a value) and false otherwise */
        public boolean isSetTargetPath()
        {
            return this.targetPath != null;
        }

        public void setTargetPathIsSet(boolean value)
        {
            if (!value)
            {
                this.targetPath = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case NAME:
                    if (value == null)
                    {
                        unsetName();
                    }
                    else
                    {
                        setName((String) value);
                    }
                    break;

                case HOST:
                    if (value == null)
                    {
                        unsetHost();
                    }
                    else
                    {
                        setHost((String) value);
                    }
                    break;

                case DIR:
                    if (value == null)
                    {
                        unsetDir();
                    }
                    else
                    {
                        setDir((String) value);
                    }
                    break;

                case TARGET_PATH:
                    if (value == null)
                    {
                        unsetTargetPath();
                    }
                    else
                    {
                        setTargetPath((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case NAME:
                    return getName();

                case HOST:
                    return getHost();

                case DIR:
                    return getDir();

                case TARGET_PATH:
                    return getTargetPath();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case NAME:
                    return isSetName();
                case HOST:
                    return isSetHost();
                case DIR:
                    return isSetDir();
                case TARGET_PATH:
                    return isSetTargetPath();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof createNFSStoragePool_args)
                return this.equals((createNFSStoragePool_args) that);
            return false;
        }

        public boolean equals(createNFSStoragePool_args that)
        {
            if (that == null)
                return false;

            boolean this_present_name = true && this.isSetName();
            boolean that_present_name = true && that.isSetName();
            if (this_present_name || that_present_name)
            {
                if (!(this_present_name && that_present_name))
                    return false;
                if (!this.name.equals(that.name))
                    return false;
            }

            boolean this_present_host = true && this.isSetHost();
            boolean that_present_host = true && that.isSetHost();
            if (this_present_host || that_present_host)
            {
                if (!(this_present_host && that_present_host))
                    return false;
                if (!this.host.equals(that.host))
                    return false;
            }

            boolean this_present_dir = true && this.isSetDir();
            boolean that_present_dir = true && that.isSetDir();
            if (this_present_dir || that_present_dir)
            {
                if (!(this_present_dir && that_present_dir))
                    return false;
                if (!this.dir.equals(that.dir))
                    return false;
            }

            boolean this_present_targetPath = true && this.isSetTargetPath();
            boolean that_present_targetPath = true && that.isSetTargetPath();
            if (this_present_targetPath || that_present_targetPath)
            {
                if (!(this_present_targetPath && that_present_targetPath))
                    return false;
                if (!this.targetPath.equals(that.targetPath))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_name = true && (isSetName());
            list.add(present_name);
            if (present_name)
                list.add(name);

            boolean present_host = true && (isSetHost());
            list.add(present_host);
            if (present_host)
                list.add(host);

            boolean present_dir = true && (isSetDir());
            list.add(present_dir);
            if (present_dir)
                list.add(dir);

            boolean present_targetPath = true && (isSetTargetPath());
            list.add(present_targetPath);
            if (present_targetPath)
                list.add(targetPath);

            return list.hashCode();
        }

        @Override
        public int compareTo(createNFSStoragePool_args other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetName())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetHost()).compareTo(other.isSetHost());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetHost())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host, other.host);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetDir()).compareTo(other.isSetDir());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetDir())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dir, other.dir);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetTargetPath()).compareTo(other.isSetTargetPath());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetTargetPath())
            {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.targetPath, other.targetPath);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("createNFSStoragePool_args(");
            boolean first = true;

            sb.append("name:");
            if (this.name == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.name);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("host:");
            if (this.host == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.host);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("dir:");
            if (this.dir == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.dir);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("targetPath:");
            if (this.targetPath == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.targetPath);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class createNFSStoragePool_argsStandardSchemeFactory implements SchemeFactory
        {
            public createNFSStoragePool_argsStandardScheme getScheme()
            {
                return new createNFSStoragePool_argsStandardScheme();
            }
        }

        private static class createNFSStoragePool_argsStandardScheme
            extends StandardScheme<createNFSStoragePool_args>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot,
                createNFSStoragePool_args struct) throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.name = iprot.readString();
                                struct.setNameIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        case 2: // HOST
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.host = iprot.readString();
                                struct.setHostIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        case 3: // DIR
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.dir = iprot.readString();
                                struct.setDirIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        case 4: // TARGET_PATH
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.targetPath = iprot.readString();
                                struct.setTargetPathIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                createNFSStoragePool_args struct) throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.name != null)
                {
                    oprot.writeFieldBegin(NAME_FIELD_DESC);
                    oprot.writeString(struct.name);
                    oprot.writeFieldEnd();
                }
                if (struct.host != null)
                {
                    oprot.writeFieldBegin(HOST_FIELD_DESC);
                    oprot.writeString(struct.host);
                    oprot.writeFieldEnd();
                }
                if (struct.dir != null)
                {
                    oprot.writeFieldBegin(DIR_FIELD_DESC);
                    oprot.writeString(struct.dir);
                    oprot.writeFieldEnd();
                }
                if (struct.targetPath != null)
                {
                    oprot.writeFieldBegin(TARGET_PATH_FIELD_DESC);
                    oprot.writeString(struct.targetPath);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class createNFSStoragePool_argsTupleSchemeFactory implements SchemeFactory
        {
            public createNFSStoragePool_argsTupleScheme getScheme()
            {
                return new createNFSStoragePool_argsTupleScheme();
            }
        }

        private static class createNFSStoragePool_argsTupleScheme
            extends TupleScheme<createNFSStoragePool_args>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot,
                createNFSStoragePool_args struct) throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetName())
                {
                    optionals.set(0);
                }
                if (struct.isSetHost())
                {
                    optionals.set(1);
                }
                if (struct.isSetDir())
                {
                    optionals.set(2);
                }
                if (struct.isSetTargetPath())
                {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetName())
                {
                    oprot.writeString(struct.name);
                }
                if (struct.isSetHost())
                {
                    oprot.writeString(struct.host);
                }
                if (struct.isSetDir())
                {
                    oprot.writeString(struct.dir);
                }
                if (struct.isSetTargetPath())
                {
                    oprot.writeString(struct.targetPath);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot,
                createNFSStoragePool_args struct) throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0))
                {
                    struct.name = iprot.readString();
                    struct.setNameIsSet(true);
                }
                if (incoming.get(1))
                {
                    struct.host = iprot.readString();
                    struct.setHostIsSet(true);
                }
                if (incoming.get(2))
                {
                    struct.dir = iprot.readString();
                    struct.setDirIsSet(true);
                }
                if (incoming.get(3))
                {
                    struct.targetPath = iprot.readString();
                    struct.setTargetPathIsSet(true);
                }
            }
        }

    }

    public static class createNFSStoragePool_result implements
        org.apache.thrift.TBase<createNFSStoragePool_result, createNFSStoragePool_result._Fields>,
        java.io.Serializable, Cloneable, Comparable<createNFSStoragePool_result>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("createNFSStoragePool_result");

        private static final org.apache.thrift.protocol.TField LIBVIRT_EXCEPTION_FIELD_DESC =
            new org.apache.thrift.protocol.TField("libvirtException",
                org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class,
                new createNFSStoragePool_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new createNFSStoragePool_resultTupleSchemeFactory());
        }

        public LibvirtException libvirtException; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            LIBVIRT_EXCEPTION((short) 1, "libvirtException");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // LIBVIRT_EXCEPTION
                        return LIBVIRT_EXCEPTION;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.LIBVIRT_EXCEPTION,
                new org.apache.thrift.meta_data.FieldMetaData("libvirtException",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData
                .addStructMetaDataMap(createNFSStoragePool_result.class, metaDataMap);
        }

        public createNFSStoragePool_result()
        {
        }

        public createNFSStoragePool_result(LibvirtException libvirtException)
        {
            this();
            this.libvirtException = libvirtException;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public createNFSStoragePool_result(createNFSStoragePool_result other)
        {
            if (other.isSetLibvirtException())
            {
                this.libvirtException = new LibvirtException(other.libvirtException);
            }
        }

        public createNFSStoragePool_result deepCopy()
        {
            return new createNFSStoragePool_result(this);
        }

        @Override
        public void clear()
        {
            this.libvirtException = null;
        }

        public LibvirtException getLibvirtException()
        {
            return this.libvirtException;
        }

        public createNFSStoragePool_result setLibvirtException(LibvirtException libvirtException)
        {
            this.libvirtException = libvirtException;
            return this;
        }

        public void unsetLibvirtException()
        {
            this.libvirtException = null;
        }

        /** Returns true if field libvirtException is set (has been assigned a value) and false otherwise */
        public boolean isSetLibvirtException()
        {
            return this.libvirtException != null;
        }

        public void setLibvirtExceptionIsSet(boolean value)
        {
            if (!value)
            {
                this.libvirtException = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    if (value == null)
                    {
                        unsetLibvirtException();
                    }
                    else
                    {
                        setLibvirtException((LibvirtException) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    return getLibvirtException();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    return isSetLibvirtException();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof createNFSStoragePool_result)
                return this.equals((createNFSStoragePool_result) that);
            return false;
        }

        public boolean equals(createNFSStoragePool_result that)
        {
            if (that == null)
                return false;

            boolean this_present_libvirtException = true && this.isSetLibvirtException();
            boolean that_present_libvirtException = true && that.isSetLibvirtException();
            if (this_present_libvirtException || that_present_libvirtException)
            {
                if (!(this_present_libvirtException && that_present_libvirtException))
                    return false;
                if (!this.libvirtException.equals(that.libvirtException))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_libvirtException = true && (isSetLibvirtException());
            list.add(present_libvirtException);
            if (present_libvirtException)
                list.add(libvirtException);

            return list.hashCode();
        }

        @Override
        public int compareTo(createNFSStoragePool_result other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison =
                Boolean.valueOf(isSetLibvirtException()).compareTo(other.isSetLibvirtException());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetLibvirtException())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.libvirtException,
                    other.libvirtException);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("createNFSStoragePool_result(");
            boolean first = true;

            sb.append("libvirtException:");
            if (this.libvirtException == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.libvirtException);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class createNFSStoragePool_resultStandardSchemeFactory
            implements SchemeFactory
        {
            public createNFSStoragePool_resultStandardScheme getScheme()
            {
                return new createNFSStoragePool_resultStandardScheme();
            }
        }

        private static class createNFSStoragePool_resultStandardScheme
            extends StandardScheme<createNFSStoragePool_result>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot,
                createNFSStoragePool_result struct) throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // LIBVIRT_EXCEPTION
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT)
                            {
                                struct.libvirtException = new LibvirtException();
                                struct.libvirtException.read(iprot);
                                struct.setLibvirtExceptionIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                createNFSStoragePool_result struct) throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.libvirtException != null)
                {
                    oprot.writeFieldBegin(LIBVIRT_EXCEPTION_FIELD_DESC);
                    struct.libvirtException.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class createNFSStoragePool_resultTupleSchemeFactory implements SchemeFactory
        {
            public createNFSStoragePool_resultTupleScheme getScheme()
            {
                return new createNFSStoragePool_resultTupleScheme();
            }
        }

        private static class createNFSStoragePool_resultTupleScheme
            extends TupleScheme<createNFSStoragePool_result>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot,
                createNFSStoragePool_result struct) throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetLibvirtException())
                {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetLibvirtException())
                {
                    struct.libvirtException.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot,
                createNFSStoragePool_result struct) throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0))
                {
                    struct.libvirtException = new LibvirtException();
                    struct.libvirtException.read(iprot);
                    struct.setLibvirtExceptionIsSet(true);
                }
            }
        }

    }

    public static class createDirStoragePool_args implements
        org.apache.thrift.TBase<createDirStoragePool_args, createDirStoragePool_args._Fields>,
        java.io.Serializable, Cloneable, Comparable<createDirStoragePool_args>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("createDirStoragePool_args");

        private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC =
            new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING,
                (short) 1);

        private static final org.apache.thrift.protocol.TField TARGET_PATH_FIELD_DESC =
            new org.apache.thrift.protocol.TField("targetPath",
                org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new createDirStoragePool_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new createDirStoragePool_argsTupleSchemeFactory());
        }

        public String name; // required

        public String targetPath; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            NAME((short) 1, "name"),
            TARGET_PATH((short) 2, "targetPath");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // NAME
                        return NAME;
                    case 2: // TARGET_PATH
                        return TARGET_PATH;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.NAME,
                new org.apache.thrift.meta_data.FieldMetaData("name",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.TARGET_PATH,
                new org.apache.thrift.meta_data.FieldMetaData("targetPath",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData
                .addStructMetaDataMap(createDirStoragePool_args.class, metaDataMap);
        }

        public createDirStoragePool_args()
        {
        }

        public createDirStoragePool_args(String name, String targetPath)
        {
            this();
            this.name = name;
            this.targetPath = targetPath;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public createDirStoragePool_args(createDirStoragePool_args other)
        {
            if (other.isSetName())
            {
                this.name = other.name;
            }
            if (other.isSetTargetPath())
            {
                this.targetPath = other.targetPath;
            }
        }

        public createDirStoragePool_args deepCopy()
        {
            return new createDirStoragePool_args(this);
        }

        @Override
        public void clear()
        {
            this.name = null;
            this.targetPath = null;
        }

        public String getName()
        {
            return this.name;
        }

        public createDirStoragePool_args setName(String name)
        {
            this.name = name;
            return this;
        }

        public void unsetName()
        {
            this.name = null;
        }

        /** Returns true if field name is set (has been assigned a value) and false otherwise */
        public boolean isSetName()
        {
            return this.name != null;
        }

        public void setNameIsSet(boolean value)
        {
            if (!value)
            {
                this.name = null;
            }
        }

        public String getTargetPath()
        {
            return this.targetPath;
        }

        public createDirStoragePool_args setTargetPath(String targetPath)
        {
            this.targetPath = targetPath;
            return this;
        }

        public void unsetTargetPath()
        {
            this.targetPath = null;
        }

        /** Returns true if field targetPath is set (has been assigned a value) and false otherwise */
        public boolean isSetTargetPath()
        {
            return this.targetPath != null;
        }

        public void setTargetPathIsSet(boolean value)
        {
            if (!value)
            {
                this.targetPath = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case NAME:
                    if (value == null)
                    {
                        unsetName();
                    }
                    else
                    {
                        setName((String) value);
                    }
                    break;

                case TARGET_PATH:
                    if (value == null)
                    {
                        unsetTargetPath();
                    }
                    else
                    {
                        setTargetPath((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case NAME:
                    return getName();

                case TARGET_PATH:
                    return getTargetPath();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case NAME:
                    return isSetName();
                case TARGET_PATH:
                    return isSetTargetPath();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof createDirStoragePool_args)
                return this.equals((createDirStoragePool_args) that);
            return false;
        }

        public boolean equals(createDirStoragePool_args that)
        {
            if (that == null)
                return false;

            boolean this_present_name = true && this.isSetName();
            boolean that_present_name = true && that.isSetName();
            if (this_present_name || that_present_name)
            {
                if (!(this_present_name && that_present_name))
                    return false;
                if (!this.name.equals(that.name))
                    return false;
            }

            boolean this_present_targetPath = true && this.isSetTargetPath();
            boolean that_present_targetPath = true && that.isSetTargetPath();
            if (this_present_targetPath || that_present_targetPath)
            {
                if (!(this_present_targetPath && that_present_targetPath))
                    return false;
                if (!this.targetPath.equals(that.targetPath))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_name = true && (isSetName());
            list.add(present_name);
            if (present_name)
                list.add(name);

            boolean present_targetPath = true && (isSetTargetPath());
            list.add(present_targetPath);
            if (present_targetPath)
                list.add(targetPath);

            return list.hashCode();
        }

        @Override
        public int compareTo(createDirStoragePool_args other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetName())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetTargetPath()).compareTo(other.isSetTargetPath());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetTargetPath())
            {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.targetPath, other.targetPath);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("createDirStoragePool_args(");
            boolean first = true;

            sb.append("name:");
            if (this.name == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.name);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("targetPath:");
            if (this.targetPath == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.targetPath);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class createDirStoragePool_argsStandardSchemeFactory implements SchemeFactory
        {
            public createDirStoragePool_argsStandardScheme getScheme()
            {
                return new createDirStoragePool_argsStandardScheme();
            }
        }

        private static class createDirStoragePool_argsStandardScheme
            extends StandardScheme<createDirStoragePool_args>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot,
                createDirStoragePool_args struct) throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.name = iprot.readString();
                                struct.setNameIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        case 2: // TARGET_PATH
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.targetPath = iprot.readString();
                                struct.setTargetPathIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                createDirStoragePool_args struct) throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.name != null)
                {
                    oprot.writeFieldBegin(NAME_FIELD_DESC);
                    oprot.writeString(struct.name);
                    oprot.writeFieldEnd();
                }
                if (struct.targetPath != null)
                {
                    oprot.writeFieldBegin(TARGET_PATH_FIELD_DESC);
                    oprot.writeString(struct.targetPath);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class createDirStoragePool_argsTupleSchemeFactory implements SchemeFactory
        {
            public createDirStoragePool_argsTupleScheme getScheme()
            {
                return new createDirStoragePool_argsTupleScheme();
            }
        }

        private static class createDirStoragePool_argsTupleScheme
            extends TupleScheme<createDirStoragePool_args>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot,
                createDirStoragePool_args struct) throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetName())
                {
                    optionals.set(0);
                }
                if (struct.isSetTargetPath())
                {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetName())
                {
                    oprot.writeString(struct.name);
                }
                if (struct.isSetTargetPath())
                {
                    oprot.writeString(struct.targetPath);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot,
                createDirStoragePool_args struct) throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0))
                {
                    struct.name = iprot.readString();
                    struct.setNameIsSet(true);
                }
                if (incoming.get(1))
                {
                    struct.targetPath = iprot.readString();
                    struct.setTargetPathIsSet(true);
                }
            }
        }

    }

    public static class createDirStoragePool_result implements
        org.apache.thrift.TBase<createDirStoragePool_result, createDirStoragePool_result._Fields>,
        java.io.Serializable, Cloneable, Comparable<createDirStoragePool_result>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("createDirStoragePool_result");

        private static final org.apache.thrift.protocol.TField LIBVIRT_EXCEPTION_FIELD_DESC =
            new org.apache.thrift.protocol.TField("libvirtException",
                org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class,
                new createDirStoragePool_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new createDirStoragePool_resultTupleSchemeFactory());
        }

        public LibvirtException libvirtException; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            LIBVIRT_EXCEPTION((short) 1, "libvirtException");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // LIBVIRT_EXCEPTION
                        return LIBVIRT_EXCEPTION;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.LIBVIRT_EXCEPTION,
                new org.apache.thrift.meta_data.FieldMetaData("libvirtException",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData
                .addStructMetaDataMap(createDirStoragePool_result.class, metaDataMap);
        }

        public createDirStoragePool_result()
        {
        }

        public createDirStoragePool_result(LibvirtException libvirtException)
        {
            this();
            this.libvirtException = libvirtException;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public createDirStoragePool_result(createDirStoragePool_result other)
        {
            if (other.isSetLibvirtException())
            {
                this.libvirtException = new LibvirtException(other.libvirtException);
            }
        }

        public createDirStoragePool_result deepCopy()
        {
            return new createDirStoragePool_result(this);
        }

        @Override
        public void clear()
        {
            this.libvirtException = null;
        }

        public LibvirtException getLibvirtException()
        {
            return this.libvirtException;
        }

        public createDirStoragePool_result setLibvirtException(LibvirtException libvirtException)
        {
            this.libvirtException = libvirtException;
            return this;
        }

        public void unsetLibvirtException()
        {
            this.libvirtException = null;
        }

        /** Returns true if field libvirtException is set (has been assigned a value) and false otherwise */
        public boolean isSetLibvirtException()
        {
            return this.libvirtException != null;
        }

        public void setLibvirtExceptionIsSet(boolean value)
        {
            if (!value)
            {
                this.libvirtException = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    if (value == null)
                    {
                        unsetLibvirtException();
                    }
                    else
                    {
                        setLibvirtException((LibvirtException) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    return getLibvirtException();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    return isSetLibvirtException();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof createDirStoragePool_result)
                return this.equals((createDirStoragePool_result) that);
            return false;
        }

        public boolean equals(createDirStoragePool_result that)
        {
            if (that == null)
                return false;

            boolean this_present_libvirtException = true && this.isSetLibvirtException();
            boolean that_present_libvirtException = true && that.isSetLibvirtException();
            if (this_present_libvirtException || that_present_libvirtException)
            {
                if (!(this_present_libvirtException && that_present_libvirtException))
                    return false;
                if (!this.libvirtException.equals(that.libvirtException))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_libvirtException = true && (isSetLibvirtException());
            list.add(present_libvirtException);
            if (present_libvirtException)
                list.add(libvirtException);

            return list.hashCode();
        }

        @Override
        public int compareTo(createDirStoragePool_result other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison =
                Boolean.valueOf(isSetLibvirtException()).compareTo(other.isSetLibvirtException());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetLibvirtException())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.libvirtException,
                    other.libvirtException);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("createDirStoragePool_result(");
            boolean first = true;

            sb.append("libvirtException:");
            if (this.libvirtException == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.libvirtException);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class createDirStoragePool_resultStandardSchemeFactory
            implements SchemeFactory
        {
            public createDirStoragePool_resultStandardScheme getScheme()
            {
                return new createDirStoragePool_resultStandardScheme();
            }
        }

        private static class createDirStoragePool_resultStandardScheme
            extends StandardScheme<createDirStoragePool_result>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot,
                createDirStoragePool_result struct) throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // LIBVIRT_EXCEPTION
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT)
                            {
                                struct.libvirtException = new LibvirtException();
                                struct.libvirtException.read(iprot);
                                struct.setLibvirtExceptionIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                createDirStoragePool_result struct) throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.libvirtException != null)
                {
                    oprot.writeFieldBegin(LIBVIRT_EXCEPTION_FIELD_DESC);
                    struct.libvirtException.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class createDirStoragePool_resultTupleSchemeFactory implements SchemeFactory
        {
            public createDirStoragePool_resultTupleScheme getScheme()
            {
                return new createDirStoragePool_resultTupleScheme();
            }
        }

        private static class createDirStoragePool_resultTupleScheme
            extends TupleScheme<createDirStoragePool_result>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot,
                createDirStoragePool_result struct) throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetLibvirtException())
                {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetLibvirtException())
                {
                    struct.libvirtException.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot,
                createDirStoragePool_result struct) throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0))
                {
                    struct.libvirtException = new LibvirtException();
                    struct.libvirtException.read(iprot);
                    struct.setLibvirtExceptionIsSet(true);
                }
            }
        }

    }

    public static class createDisk_args
        implements org.apache.thrift.TBase<createDisk_args, createDisk_args._Fields>,
        java.io.Serializable, Cloneable, Comparable<createDisk_args>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("createDisk_args");

        private static final org.apache.thrift.protocol.TField POOL_NAME_FIELD_DESC =
            new org.apache.thrift.protocol.TField("poolName",
                org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC =
            new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING,
                (short) 2);

        private static final org.apache.thrift.protocol.TField CAPACITY_IN_KB_FIELD_DESC =
            new org.apache.thrift.protocol.TField("capacityInKb",
                org.apache.thrift.protocol.TType.DOUBLE, (short) 3);

        private static final org.apache.thrift.protocol.TField ALLOCATION_IN_KB_FIELD_DESC =
            new org.apache.thrift.protocol.TField("allocationInKb",
                org.apache.thrift.protocol.TType.DOUBLE, (short) 4);

        private static final org.apache.thrift.protocol.TField FORMAT_FIELD_DESC =
            new org.apache.thrift.protocol.TField("format", org.apache.thrift.protocol.TType.STRING,
                (short) 5);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new createDisk_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new createDisk_argsTupleSchemeFactory());
        }

        public String poolName; // required

        public String name; // required

        public double capacityInKb; // required

        public double allocationInKb; // required

        public String format; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            POOL_NAME((short) 1, "poolName"),
            NAME((short) 2, "name"),
            CAPACITY_IN_KB((short) 3, "capacityInKb"),
            ALLOCATION_IN_KB((short) 4, "allocationInKb"),
            FORMAT((short) 5, "format");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // POOL_NAME
                        return POOL_NAME;
                    case 2: // NAME
                        return NAME;
                    case 3: // CAPACITY_IN_KB
                        return CAPACITY_IN_KB;
                    case 4: // ALLOCATION_IN_KB
                        return ALLOCATION_IN_KB;
                    case 5: // FORMAT
                        return FORMAT;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __CAPACITYINKB_ISSET_ID = 0;

        private static final int __ALLOCATIONINKB_ISSET_ID = 1;

        private byte __isset_bitfield = 0;

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.POOL_NAME,
                new org.apache.thrift.meta_data.FieldMetaData("poolName",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.NAME,
                new org.apache.thrift.meta_data.FieldMetaData("name",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.CAPACITY_IN_KB,
                new org.apache.thrift.meta_data.FieldMetaData("capacityInKb",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.DOUBLE)));
            tmpMap.put(_Fields.ALLOCATION_IN_KB,
                new org.apache.thrift.meta_data.FieldMetaData("allocationInKb",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.DOUBLE)));
            tmpMap.put(_Fields.FORMAT,
                new org.apache.thrift.meta_data.FieldMetaData("format",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createDisk_args.class,
                metaDataMap);
        }

        public createDisk_args()
        {
        }

        public createDisk_args(String poolName, String name, double capacityInKb,
            double allocationInKb, String format)
        {
            this();
            this.poolName = poolName;
            this.name = name;
            this.capacityInKb = capacityInKb;
            setCapacityInKbIsSet(true);
            this.allocationInKb = allocationInKb;
            setAllocationInKbIsSet(true);
            this.format = format;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public createDisk_args(createDisk_args other)
        {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetPoolName())
            {
                this.poolName = other.poolName;
            }
            if (other.isSetName())
            {
                this.name = other.name;
            }
            this.capacityInKb = other.capacityInKb;
            this.allocationInKb = other.allocationInKb;
            if (other.isSetFormat())
            {
                this.format = other.format;
            }
        }

        public createDisk_args deepCopy()
        {
            return new createDisk_args(this);
        }

        @Override
        public void clear()
        {
            this.poolName = null;
            this.name = null;
            setCapacityInKbIsSet(false);
            this.capacityInKb = 0.0;
            setAllocationInKbIsSet(false);
            this.allocationInKb = 0.0;
            this.format = null;
        }

        public String getPoolName()
        {
            return this.poolName;
        }

        public createDisk_args setPoolName(String poolName)
        {
            this.poolName = poolName;
            return this;
        }

        public void unsetPoolName()
        {
            this.poolName = null;
        }

        /** Returns true if field poolName is set (has been assigned a value) and false otherwise */
        public boolean isSetPoolName()
        {
            return this.poolName != null;
        }

        public void setPoolNameIsSet(boolean value)
        {
            if (!value)
            {
                this.poolName = null;
            }
        }

        public String getName()
        {
            return this.name;
        }

        public createDisk_args setName(String name)
        {
            this.name = name;
            return this;
        }

        public void unsetName()
        {
            this.name = null;
        }

        /** Returns true if field name is set (has been assigned a value) and false otherwise */
        public boolean isSetName()
        {
            return this.name != null;
        }

        public void setNameIsSet(boolean value)
        {
            if (!value)
            {
                this.name = null;
            }
        }

        public double getCapacityInKb()
        {
            return this.capacityInKb;
        }

        public createDisk_args setCapacityInKb(double capacityInKb)
        {
            this.capacityInKb = capacityInKb;
            setCapacityInKbIsSet(true);
            return this;
        }

        public void unsetCapacityInKb()
        {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CAPACITYINKB_ISSET_ID);
        }

        /** Returns true if field capacityInKb is set (has been assigned a value) and false otherwise */
        public boolean isSetCapacityInKb()
        {
            return EncodingUtils.testBit(__isset_bitfield, __CAPACITYINKB_ISSET_ID);
        }

        public void setCapacityInKbIsSet(boolean value)
        {
            __isset_bitfield =
                EncodingUtils.setBit(__isset_bitfield, __CAPACITYINKB_ISSET_ID, value);
        }

        public double getAllocationInKb()
        {
            return this.allocationInKb;
        }

        public createDisk_args setAllocationInKb(double allocationInKb)
        {
            this.allocationInKb = allocationInKb;
            setAllocationInKbIsSet(true);
            return this;
        }

        public void unsetAllocationInKb()
        {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALLOCATIONINKB_ISSET_ID);
        }

        /** Returns true if field allocationInKb is set (has been assigned a value) and false otherwise */
        public boolean isSetAllocationInKb()
        {
            return EncodingUtils.testBit(__isset_bitfield, __ALLOCATIONINKB_ISSET_ID);
        }

        public void setAllocationInKbIsSet(boolean value)
        {
            __isset_bitfield =
                EncodingUtils.setBit(__isset_bitfield, __ALLOCATIONINKB_ISSET_ID, value);
        }

        public String getFormat()
        {
            return this.format;
        }

        public createDisk_args setFormat(String format)
        {
            this.format = format;
            return this;
        }

        public void unsetFormat()
        {
            this.format = null;
        }

        /** Returns true if field format is set (has been assigned a value) and false otherwise */
        public boolean isSetFormat()
        {
            return this.format != null;
        }

        public void setFormatIsSet(boolean value)
        {
            if (!value)
            {
                this.format = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case POOL_NAME:
                    if (value == null)
                    {
                        unsetPoolName();
                    }
                    else
                    {
                        setPoolName((String) value);
                    }
                    break;

                case NAME:
                    if (value == null)
                    {
                        unsetName();
                    }
                    else
                    {
                        setName((String) value);
                    }
                    break;

                case CAPACITY_IN_KB:
                    if (value == null)
                    {
                        unsetCapacityInKb();
                    }
                    else
                    {
                        setCapacityInKb((Double) value);
                    }
                    break;

                case ALLOCATION_IN_KB:
                    if (value == null)
                    {
                        unsetAllocationInKb();
                    }
                    else
                    {
                        setAllocationInKb((Double) value);
                    }
                    break;

                case FORMAT:
                    if (value == null)
                    {
                        unsetFormat();
                    }
                    else
                    {
                        setFormat((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case POOL_NAME:
                    return getPoolName();

                case NAME:
                    return getName();

                case CAPACITY_IN_KB:
                    return Double.valueOf(getCapacityInKb());

                case ALLOCATION_IN_KB:
                    return Double.valueOf(getAllocationInKb());

                case FORMAT:
                    return getFormat();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case POOL_NAME:
                    return isSetPoolName();
                case NAME:
                    return isSetName();
                case CAPACITY_IN_KB:
                    return isSetCapacityInKb();
                case ALLOCATION_IN_KB:
                    return isSetAllocationInKb();
                case FORMAT:
                    return isSetFormat();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof createDisk_args)
                return this.equals((createDisk_args) that);
            return false;
        }

        public boolean equals(createDisk_args that)
        {
            if (that == null)
                return false;

            boolean this_present_poolName = true && this.isSetPoolName();
            boolean that_present_poolName = true && that.isSetPoolName();
            if (this_present_poolName || that_present_poolName)
            {
                if (!(this_present_poolName && that_present_poolName))
                    return false;
                if (!this.poolName.equals(that.poolName))
                    return false;
            }

            boolean this_present_name = true && this.isSetName();
            boolean that_present_name = true && that.isSetName();
            if (this_present_name || that_present_name)
            {
                if (!(this_present_name && that_present_name))
                    return false;
                if (!this.name.equals(that.name))
                    return false;
            }

            boolean this_present_capacityInKb = true;
            boolean that_present_capacityInKb = true;
            if (this_present_capacityInKb || that_present_capacityInKb)
            {
                if (!(this_present_capacityInKb && that_present_capacityInKb))
                    return false;
                if (this.capacityInKb != that.capacityInKb)
                    return false;
            }

            boolean this_present_allocationInKb = true;
            boolean that_present_allocationInKb = true;
            if (this_present_allocationInKb || that_present_allocationInKb)
            {
                if (!(this_present_allocationInKb && that_present_allocationInKb))
                    return false;
                if (this.allocationInKb != that.allocationInKb)
                    return false;
            }

            boolean this_present_format = true && this.isSetFormat();
            boolean that_present_format = true && that.isSetFormat();
            if (this_present_format || that_present_format)
            {
                if (!(this_present_format && that_present_format))
                    return false;
                if (!this.format.equals(that.format))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_poolName = true && (isSetPoolName());
            list.add(present_poolName);
            if (present_poolName)
                list.add(poolName);

            boolean present_name = true && (isSetName());
            list.add(present_name);
            if (present_name)
                list.add(name);

            boolean present_capacityInKb = true;
            list.add(present_capacityInKb);
            if (present_capacityInKb)
                list.add(capacityInKb);

            boolean present_allocationInKb = true;
            list.add(present_allocationInKb);
            if (present_allocationInKb)
                list.add(allocationInKb);

            boolean present_format = true && (isSetFormat());
            list.add(present_format);
            if (present_format)
                list.add(format);

            return list.hashCode();
        }

        @Override
        public int compareTo(createDisk_args other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetPoolName()).compareTo(other.isSetPoolName());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetPoolName())
            {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.poolName, other.poolName);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetName())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            lastComparison =
                Boolean.valueOf(isSetCapacityInKb()).compareTo(other.isSetCapacityInKb());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetCapacityInKb())
            {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.capacityInKb, other.capacityInKb);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            lastComparison =
                Boolean.valueOf(isSetAllocationInKb()).compareTo(other.isSetAllocationInKb());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetAllocationInKb())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allocationInKb,
                    other.allocationInKb);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetFormat()).compareTo(other.isSetFormat());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetFormat())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.format, other.format);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("createDisk_args(");
            boolean first = true;

            sb.append("poolName:");
            if (this.poolName == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.poolName);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("name:");
            if (this.name == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.name);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("capacityInKb:");
            sb.append(this.capacityInKb);
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("allocationInKb:");
            sb.append(this.allocationInKb);
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("format:");
            if (this.format == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.format);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class createDisk_argsStandardSchemeFactory implements SchemeFactory
        {
            public createDisk_argsStandardScheme getScheme()
            {
                return new createDisk_argsStandardScheme();
            }
        }

        private static class createDisk_argsStandardScheme extends StandardScheme<createDisk_args>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, createDisk_args struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // POOL_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.poolName = iprot.readString();
                                struct.setPoolNameIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        case 2: // NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.name = iprot.readString();
                                struct.setNameIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        case 3: // CAPACITY_IN_KB
                            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE)
                            {
                                struct.capacityInKb = iprot.readDouble();
                                struct.setCapacityInKbIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        case 4: // ALLOCATION_IN_KB
                            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE)
                            {
                                struct.allocationInKb = iprot.readDouble();
                                struct.setAllocationInKbIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        case 5: // FORMAT
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.format = iprot.readString();
                                struct.setFormatIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, createDisk_args struct)
                throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.poolName != null)
                {
                    oprot.writeFieldBegin(POOL_NAME_FIELD_DESC);
                    oprot.writeString(struct.poolName);
                    oprot.writeFieldEnd();
                }
                if (struct.name != null)
                {
                    oprot.writeFieldBegin(NAME_FIELD_DESC);
                    oprot.writeString(struct.name);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(CAPACITY_IN_KB_FIELD_DESC);
                oprot.writeDouble(struct.capacityInKb);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(ALLOCATION_IN_KB_FIELD_DESC);
                oprot.writeDouble(struct.allocationInKb);
                oprot.writeFieldEnd();
                if (struct.format != null)
                {
                    oprot.writeFieldBegin(FORMAT_FIELD_DESC);
                    oprot.writeString(struct.format);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class createDisk_argsTupleSchemeFactory implements SchemeFactory
        {
            public createDisk_argsTupleScheme getScheme()
            {
                return new createDisk_argsTupleScheme();
            }
        }

        private static class createDisk_argsTupleScheme extends TupleScheme<createDisk_args>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, createDisk_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetPoolName())
                {
                    optionals.set(0);
                }
                if (struct.isSetName())
                {
                    optionals.set(1);
                }
                if (struct.isSetCapacityInKb())
                {
                    optionals.set(2);
                }
                if (struct.isSetAllocationInKb())
                {
                    optionals.set(3);
                }
                if (struct.isSetFormat())
                {
                    optionals.set(4);
                }
                oprot.writeBitSet(optionals, 5);
                if (struct.isSetPoolName())
                {
                    oprot.writeString(struct.poolName);
                }
                if (struct.isSetName())
                {
                    oprot.writeString(struct.name);
                }
                if (struct.isSetCapacityInKb())
                {
                    oprot.writeDouble(struct.capacityInKb);
                }
                if (struct.isSetAllocationInKb())
                {
                    oprot.writeDouble(struct.allocationInKb);
                }
                if (struct.isSetFormat())
                {
                    oprot.writeString(struct.format);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, createDisk_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(5);
                if (incoming.get(0))
                {
                    struct.poolName = iprot.readString();
                    struct.setPoolNameIsSet(true);
                }
                if (incoming.get(1))
                {
                    struct.name = iprot.readString();
                    struct.setNameIsSet(true);
                }
                if (incoming.get(2))
                {
                    struct.capacityInKb = iprot.readDouble();
                    struct.setCapacityInKbIsSet(true);
                }
                if (incoming.get(3))
                {
                    struct.allocationInKb = iprot.readDouble();
                    struct.setAllocationInKbIsSet(true);
                }
                if (incoming.get(4))
                {
                    struct.format = iprot.readString();
                    struct.setFormatIsSet(true);
                }
            }
        }

    }

    public static class createDisk_result
        implements org.apache.thrift.TBase<createDisk_result, createDisk_result._Fields>,
        java.io.Serializable, Cloneable, Comparable<createDisk_result>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("createDisk_result");

        private static final org.apache.thrift.protocol.TField LIBVIRT_EXCEPTION_FIELD_DESC =
            new org.apache.thrift.protocol.TField("libvirtException",
                org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new createDisk_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new createDisk_resultTupleSchemeFactory());
        }

        public LibvirtException libvirtException; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            LIBVIRT_EXCEPTION((short) 1, "libvirtException");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // LIBVIRT_EXCEPTION
                        return LIBVIRT_EXCEPTION;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.LIBVIRT_EXCEPTION,
                new org.apache.thrift.meta_data.FieldMetaData("libvirtException",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createDisk_result.class,
                metaDataMap);
        }

        public createDisk_result()
        {
        }

        public createDisk_result(LibvirtException libvirtException)
        {
            this();
            this.libvirtException = libvirtException;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public createDisk_result(createDisk_result other)
        {
            if (other.isSetLibvirtException())
            {
                this.libvirtException = new LibvirtException(other.libvirtException);
            }
        }

        public createDisk_result deepCopy()
        {
            return new createDisk_result(this);
        }

        @Override
        public void clear()
        {
            this.libvirtException = null;
        }

        public LibvirtException getLibvirtException()
        {
            return this.libvirtException;
        }

        public createDisk_result setLibvirtException(LibvirtException libvirtException)
        {
            this.libvirtException = libvirtException;
            return this;
        }

        public void unsetLibvirtException()
        {
            this.libvirtException = null;
        }

        /** Returns true if field libvirtException is set (has been assigned a value) and false otherwise */
        public boolean isSetLibvirtException()
        {
            return this.libvirtException != null;
        }

        public void setLibvirtExceptionIsSet(boolean value)
        {
            if (!value)
            {
                this.libvirtException = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    if (value == null)
                    {
                        unsetLibvirtException();
                    }
                    else
                    {
                        setLibvirtException((LibvirtException) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    return getLibvirtException();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    return isSetLibvirtException();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof createDisk_result)
                return this.equals((createDisk_result) that);
            return false;
        }

        public boolean equals(createDisk_result that)
        {
            if (that == null)
                return false;

            boolean this_present_libvirtException = true && this.isSetLibvirtException();
            boolean that_present_libvirtException = true && that.isSetLibvirtException();
            if (this_present_libvirtException || that_present_libvirtException)
            {
                if (!(this_present_libvirtException && that_present_libvirtException))
                    return false;
                if (!this.libvirtException.equals(that.libvirtException))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_libvirtException = true && (isSetLibvirtException());
            list.add(present_libvirtException);
            if (present_libvirtException)
                list.add(libvirtException);

            return list.hashCode();
        }

        @Override
        public int compareTo(createDisk_result other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison =
                Boolean.valueOf(isSetLibvirtException()).compareTo(other.isSetLibvirtException());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetLibvirtException())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.libvirtException,
                    other.libvirtException);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("createDisk_result(");
            boolean first = true;

            sb.append("libvirtException:");
            if (this.libvirtException == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.libvirtException);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class createDisk_resultStandardSchemeFactory implements SchemeFactory
        {
            public createDisk_resultStandardScheme getScheme()
            {
                return new createDisk_resultStandardScheme();
            }
        }

        private static class createDisk_resultStandardScheme
            extends StandardScheme<createDisk_result>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, createDisk_result struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // LIBVIRT_EXCEPTION
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT)
                            {
                                struct.libvirtException = new LibvirtException();
                                struct.libvirtException.read(iprot);
                                struct.setLibvirtExceptionIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, createDisk_result struct)
                throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.libvirtException != null)
                {
                    oprot.writeFieldBegin(LIBVIRT_EXCEPTION_FIELD_DESC);
                    struct.libvirtException.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class createDisk_resultTupleSchemeFactory implements SchemeFactory
        {
            public createDisk_resultTupleScheme getScheme()
            {
                return new createDisk_resultTupleScheme();
            }
        }

        private static class createDisk_resultTupleScheme extends TupleScheme<createDisk_result>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, createDisk_result struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetLibvirtException())
                {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetLibvirtException())
                {
                    struct.libvirtException.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, createDisk_result struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0))
                {
                    struct.libvirtException = new LibvirtException();
                    struct.libvirtException.read(iprot);
                    struct.setLibvirtExceptionIsSet(true);
                }
            }
        }

    }

    public static class deleteDisk_args
        implements org.apache.thrift.TBase<deleteDisk_args, deleteDisk_args._Fields>,
        java.io.Serializable, Cloneable, Comparable<deleteDisk_args>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("deleteDisk_args");

        private static final org.apache.thrift.protocol.TField POOL_NAME_FIELD_DESC =
            new org.apache.thrift.protocol.TField("poolName",
                org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC =
            new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING,
                (short) 2);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new deleteDisk_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new deleteDisk_argsTupleSchemeFactory());
        }

        public String poolName; // required

        public String name; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            POOL_NAME((short) 1, "poolName"),
            NAME((short) 2, "name");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // POOL_NAME
                        return POOL_NAME;
                    case 2: // NAME
                        return NAME;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.POOL_NAME,
                new org.apache.thrift.meta_data.FieldMetaData("poolName",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.NAME,
                new org.apache.thrift.meta_data.FieldMetaData("name",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteDisk_args.class,
                metaDataMap);
        }

        public deleteDisk_args()
        {
        }

        public deleteDisk_args(String poolName, String name)
        {
            this();
            this.poolName = poolName;
            this.name = name;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public deleteDisk_args(deleteDisk_args other)
        {
            if (other.isSetPoolName())
            {
                this.poolName = other.poolName;
            }
            if (other.isSetName())
            {
                this.name = other.name;
            }
        }

        public deleteDisk_args deepCopy()
        {
            return new deleteDisk_args(this);
        }

        @Override
        public void clear()
        {
            this.poolName = null;
            this.name = null;
        }

        public String getPoolName()
        {
            return this.poolName;
        }

        public deleteDisk_args setPoolName(String poolName)
        {
            this.poolName = poolName;
            return this;
        }

        public void unsetPoolName()
        {
            this.poolName = null;
        }

        /** Returns true if field poolName is set (has been assigned a value) and false otherwise */
        public boolean isSetPoolName()
        {
            return this.poolName != null;
        }

        public void setPoolNameIsSet(boolean value)
        {
            if (!value)
            {
                this.poolName = null;
            }
        }

        public String getName()
        {
            return this.name;
        }

        public deleteDisk_args setName(String name)
        {
            this.name = name;
            return this;
        }

        public void unsetName()
        {
            this.name = null;
        }

        /** Returns true if field name is set (has been assigned a value) and false otherwise */
        public boolean isSetName()
        {
            return this.name != null;
        }

        public void setNameIsSet(boolean value)
        {
            if (!value)
            {
                this.name = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case POOL_NAME:
                    if (value == null)
                    {
                        unsetPoolName();
                    }
                    else
                    {
                        setPoolName((String) value);
                    }
                    break;

                case NAME:
                    if (value == null)
                    {
                        unsetName();
                    }
                    else
                    {
                        setName((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case POOL_NAME:
                    return getPoolName();

                case NAME:
                    return getName();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case POOL_NAME:
                    return isSetPoolName();
                case NAME:
                    return isSetName();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof deleteDisk_args)
                return this.equals((deleteDisk_args) that);
            return false;
        }

        public boolean equals(deleteDisk_args that)
        {
            if (that == null)
                return false;

            boolean this_present_poolName = true && this.isSetPoolName();
            boolean that_present_poolName = true && that.isSetPoolName();
            if (this_present_poolName || that_present_poolName)
            {
                if (!(this_present_poolName && that_present_poolName))
                    return false;
                if (!this.poolName.equals(that.poolName))
                    return false;
            }

            boolean this_present_name = true && this.isSetName();
            boolean that_present_name = true && that.isSetName();
            if (this_present_name || that_present_name)
            {
                if (!(this_present_name && that_present_name))
                    return false;
                if (!this.name.equals(that.name))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_poolName = true && (isSetPoolName());
            list.add(present_poolName);
            if (present_poolName)
                list.add(poolName);

            boolean present_name = true && (isSetName());
            list.add(present_name);
            if (present_name)
                list.add(name);

            return list.hashCode();
        }

        @Override
        public int compareTo(deleteDisk_args other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetPoolName()).compareTo(other.isSetPoolName());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetPoolName())
            {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.poolName, other.poolName);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetName())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("deleteDisk_args(");
            boolean first = true;

            sb.append("poolName:");
            if (this.poolName == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.poolName);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("name:");
            if (this.name == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.name);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class deleteDisk_argsStandardSchemeFactory implements SchemeFactory
        {
            public deleteDisk_argsStandardScheme getScheme()
            {
                return new deleteDisk_argsStandardScheme();
            }
        }

        private static class deleteDisk_argsStandardScheme extends StandardScheme<deleteDisk_args>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, deleteDisk_args struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // POOL_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.poolName = iprot.readString();
                                struct.setPoolNameIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        case 2: // NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.name = iprot.readString();
                                struct.setNameIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, deleteDisk_args struct)
                throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.poolName != null)
                {
                    oprot.writeFieldBegin(POOL_NAME_FIELD_DESC);
                    oprot.writeString(struct.poolName);
                    oprot.writeFieldEnd();
                }
                if (struct.name != null)
                {
                    oprot.writeFieldBegin(NAME_FIELD_DESC);
                    oprot.writeString(struct.name);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class deleteDisk_argsTupleSchemeFactory implements SchemeFactory
        {
            public deleteDisk_argsTupleScheme getScheme()
            {
                return new deleteDisk_argsTupleScheme();
            }
        }

        private static class deleteDisk_argsTupleScheme extends TupleScheme<deleteDisk_args>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, deleteDisk_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetPoolName())
                {
                    optionals.set(0);
                }
                if (struct.isSetName())
                {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetPoolName())
                {
                    oprot.writeString(struct.poolName);
                }
                if (struct.isSetName())
                {
                    oprot.writeString(struct.name);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, deleteDisk_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0))
                {
                    struct.poolName = iprot.readString();
                    struct.setPoolNameIsSet(true);
                }
                if (incoming.get(1))
                {
                    struct.name = iprot.readString();
                    struct.setNameIsSet(true);
                }
            }
        }

    }

    public static class deleteDisk_result
        implements org.apache.thrift.TBase<deleteDisk_result, deleteDisk_result._Fields>,
        java.io.Serializable, Cloneable, Comparable<deleteDisk_result>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("deleteDisk_result");

        private static final org.apache.thrift.protocol.TField LIBVIRT_EXCEPTION_FIELD_DESC =
            new org.apache.thrift.protocol.TField("libvirtException",
                org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new deleteDisk_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new deleteDisk_resultTupleSchemeFactory());
        }

        public LibvirtException libvirtException; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            LIBVIRT_EXCEPTION((short) 1, "libvirtException");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // LIBVIRT_EXCEPTION
                        return LIBVIRT_EXCEPTION;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.LIBVIRT_EXCEPTION,
                new org.apache.thrift.meta_data.FieldMetaData("libvirtException",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteDisk_result.class,
                metaDataMap);
        }

        public deleteDisk_result()
        {
        }

        public deleteDisk_result(LibvirtException libvirtException)
        {
            this();
            this.libvirtException = libvirtException;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public deleteDisk_result(deleteDisk_result other)
        {
            if (other.isSetLibvirtException())
            {
                this.libvirtException = new LibvirtException(other.libvirtException);
            }
        }

        public deleteDisk_result deepCopy()
        {
            return new deleteDisk_result(this);
        }

        @Override
        public void clear()
        {
            this.libvirtException = null;
        }

        public LibvirtException getLibvirtException()
        {
            return this.libvirtException;
        }

        public deleteDisk_result setLibvirtException(LibvirtException libvirtException)
        {
            this.libvirtException = libvirtException;
            return this;
        }

        public void unsetLibvirtException()
        {
            this.libvirtException = null;
        }

        /** Returns true if field libvirtException is set (has been assigned a value) and false otherwise */
        public boolean isSetLibvirtException()
        {
            return this.libvirtException != null;
        }

        public void setLibvirtExceptionIsSet(boolean value)
        {
            if (!value)
            {
                this.libvirtException = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    if (value == null)
                    {
                        unsetLibvirtException();
                    }
                    else
                    {
                        setLibvirtException((LibvirtException) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    return getLibvirtException();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    return isSetLibvirtException();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof deleteDisk_result)
                return this.equals((deleteDisk_result) that);
            return false;
        }

        public boolean equals(deleteDisk_result that)
        {
            if (that == null)
                return false;

            boolean this_present_libvirtException = true && this.isSetLibvirtException();
            boolean that_present_libvirtException = true && that.isSetLibvirtException();
            if (this_present_libvirtException || that_present_libvirtException)
            {
                if (!(this_present_libvirtException && that_present_libvirtException))
                    return false;
                if (!this.libvirtException.equals(that.libvirtException))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_libvirtException = true && (isSetLibvirtException());
            list.add(present_libvirtException);
            if (present_libvirtException)
                list.add(libvirtException);

            return list.hashCode();
        }

        @Override
        public int compareTo(deleteDisk_result other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison =
                Boolean.valueOf(isSetLibvirtException()).compareTo(other.isSetLibvirtException());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetLibvirtException())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.libvirtException,
                    other.libvirtException);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("deleteDisk_result(");
            boolean first = true;

            sb.append("libvirtException:");
            if (this.libvirtException == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.libvirtException);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class deleteDisk_resultStandardSchemeFactory implements SchemeFactory
        {
            public deleteDisk_resultStandardScheme getScheme()
            {
                return new deleteDisk_resultStandardScheme();
            }
        }

        private static class deleteDisk_resultStandardScheme
            extends StandardScheme<deleteDisk_result>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, deleteDisk_result struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // LIBVIRT_EXCEPTION
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT)
                            {
                                struct.libvirtException = new LibvirtException();
                                struct.libvirtException.read(iprot);
                                struct.setLibvirtExceptionIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, deleteDisk_result struct)
                throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.libvirtException != null)
                {
                    oprot.writeFieldBegin(LIBVIRT_EXCEPTION_FIELD_DESC);
                    struct.libvirtException.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class deleteDisk_resultTupleSchemeFactory implements SchemeFactory
        {
            public deleteDisk_resultTupleScheme getScheme()
            {
                return new deleteDisk_resultTupleScheme();
            }
        }

        private static class deleteDisk_resultTupleScheme extends TupleScheme<deleteDisk_result>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, deleteDisk_result struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetLibvirtException())
                {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetLibvirtException())
                {
                    struct.libvirtException.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, deleteDisk_result struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0))
                {
                    struct.libvirtException = new LibvirtException();
                    struct.libvirtException.read(iprot);
                    struct.setLibvirtExceptionIsSet(true);
                }
            }
        }

    }

    public static class resizeVol_args
        implements org.apache.thrift.TBase<resizeVol_args, resizeVol_args._Fields>,
        java.io.Serializable, Cloneable, Comparable<resizeVol_args>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("resizeVol_args");

        private static final org.apache.thrift.protocol.TField POOL_NAME_FIELD_DESC =
            new org.apache.thrift.protocol.TField("poolName",
                org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC =
            new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING,
                (short) 2);

        private static final org.apache.thrift.protocol.TField CAPACITY_IN_KB_FIELD_DESC =
            new org.apache.thrift.protocol.TField("capacityInKb",
                org.apache.thrift.protocol.TType.DOUBLE, (short) 3);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new resizeVol_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new resizeVol_argsTupleSchemeFactory());
        }

        public String poolName; // required

        public String name; // required

        public double capacityInKb; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            POOL_NAME((short) 1, "poolName"),
            NAME((short) 2, "name"),
            CAPACITY_IN_KB((short) 3, "capacityInKb");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // POOL_NAME
                        return POOL_NAME;
                    case 2: // NAME
                        return NAME;
                    case 3: // CAPACITY_IN_KB
                        return CAPACITY_IN_KB;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __CAPACITYINKB_ISSET_ID = 0;

        private byte __isset_bitfield = 0;

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.POOL_NAME,
                new org.apache.thrift.meta_data.FieldMetaData("poolName",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.NAME,
                new org.apache.thrift.meta_data.FieldMetaData("name",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.CAPACITY_IN_KB,
                new org.apache.thrift.meta_data.FieldMetaData("capacityInKb",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.DOUBLE)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resizeVol_args.class,
                metaDataMap);
        }

        public resizeVol_args()
        {
        }

        public resizeVol_args(String poolName, String name, double capacityInKb)
        {
            this();
            this.poolName = poolName;
            this.name = name;
            this.capacityInKb = capacityInKb;
            setCapacityInKbIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public resizeVol_args(resizeVol_args other)
        {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetPoolName())
            {
                this.poolName = other.poolName;
            }
            if (other.isSetName())
            {
                this.name = other.name;
            }
            this.capacityInKb = other.capacityInKb;
        }

        public resizeVol_args deepCopy()
        {
            return new resizeVol_args(this);
        }

        @Override
        public void clear()
        {
            this.poolName = null;
            this.name = null;
            setCapacityInKbIsSet(false);
            this.capacityInKb = 0.0;
        }

        public String getPoolName()
        {
            return this.poolName;
        }

        public resizeVol_args setPoolName(String poolName)
        {
            this.poolName = poolName;
            return this;
        }

        public void unsetPoolName()
        {
            this.poolName = null;
        }

        /** Returns true if field poolName is set (has been assigned a value) and false otherwise */
        public boolean isSetPoolName()
        {
            return this.poolName != null;
        }

        public void setPoolNameIsSet(boolean value)
        {
            if (!value)
            {
                this.poolName = null;
            }
        }

        public String getName()
        {
            return this.name;
        }

        public resizeVol_args setName(String name)
        {
            this.name = name;
            return this;
        }

        public void unsetName()
        {
            this.name = null;
        }

        /** Returns true if field name is set (has been assigned a value) and false otherwise */
        public boolean isSetName()
        {
            return this.name != null;
        }

        public void setNameIsSet(boolean value)
        {
            if (!value)
            {
                this.name = null;
            }
        }

        public double getCapacityInKb()
        {
            return this.capacityInKb;
        }

        public resizeVol_args setCapacityInKb(double capacityInKb)
        {
            this.capacityInKb = capacityInKb;
            setCapacityInKbIsSet(true);
            return this;
        }

        public void unsetCapacityInKb()
        {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CAPACITYINKB_ISSET_ID);
        }

        /** Returns true if field capacityInKb is set (has been assigned a value) and false otherwise */
        public boolean isSetCapacityInKb()
        {
            return EncodingUtils.testBit(__isset_bitfield, __CAPACITYINKB_ISSET_ID);
        }

        public void setCapacityInKbIsSet(boolean value)
        {
            __isset_bitfield =
                EncodingUtils.setBit(__isset_bitfield, __CAPACITYINKB_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case POOL_NAME:
                    if (value == null)
                    {
                        unsetPoolName();
                    }
                    else
                    {
                        setPoolName((String) value);
                    }
                    break;

                case NAME:
                    if (value == null)
                    {
                        unsetName();
                    }
                    else
                    {
                        setName((String) value);
                    }
                    break;

                case CAPACITY_IN_KB:
                    if (value == null)
                    {
                        unsetCapacityInKb();
                    }
                    else
                    {
                        setCapacityInKb((Double) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case POOL_NAME:
                    return getPoolName();

                case NAME:
                    return getName();

                case CAPACITY_IN_KB:
                    return Double.valueOf(getCapacityInKb());

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case POOL_NAME:
                    return isSetPoolName();
                case NAME:
                    return isSetName();
                case CAPACITY_IN_KB:
                    return isSetCapacityInKb();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof resizeVol_args)
                return this.equals((resizeVol_args) that);
            return false;
        }

        public boolean equals(resizeVol_args that)
        {
            if (that == null)
                return false;

            boolean this_present_poolName = true && this.isSetPoolName();
            boolean that_present_poolName = true && that.isSetPoolName();
            if (this_present_poolName || that_present_poolName)
            {
                if (!(this_present_poolName && that_present_poolName))
                    return false;
                if (!this.poolName.equals(that.poolName))
                    return false;
            }

            boolean this_present_name = true && this.isSetName();
            boolean that_present_name = true && that.isSetName();
            if (this_present_name || that_present_name)
            {
                if (!(this_present_name && that_present_name))
                    return false;
                if (!this.name.equals(that.name))
                    return false;
            }

            boolean this_present_capacityInKb = true;
            boolean that_present_capacityInKb = true;
            if (this_present_capacityInKb || that_present_capacityInKb)
            {
                if (!(this_present_capacityInKb && that_present_capacityInKb))
                    return false;
                if (this.capacityInKb != that.capacityInKb)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_poolName = true && (isSetPoolName());
            list.add(present_poolName);
            if (present_poolName)
                list.add(poolName);

            boolean present_name = true && (isSetName());
            list.add(present_name);
            if (present_name)
                list.add(name);

            boolean present_capacityInKb = true;
            list.add(present_capacityInKb);
            if (present_capacityInKb)
                list.add(capacityInKb);

            return list.hashCode();
        }

        @Override
        public int compareTo(resizeVol_args other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetPoolName()).compareTo(other.isSetPoolName());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetPoolName())
            {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.poolName, other.poolName);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetName())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            lastComparison =
                Boolean.valueOf(isSetCapacityInKb()).compareTo(other.isSetCapacityInKb());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetCapacityInKb())
            {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.capacityInKb, other.capacityInKb);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("resizeVol_args(");
            boolean first = true;

            sb.append("poolName:");
            if (this.poolName == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.poolName);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("name:");
            if (this.name == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.name);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("capacityInKb:");
            sb.append(this.capacityInKb);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class resizeVol_argsStandardSchemeFactory implements SchemeFactory
        {
            public resizeVol_argsStandardScheme getScheme()
            {
                return new resizeVol_argsStandardScheme();
            }
        }

        private static class resizeVol_argsStandardScheme extends StandardScheme<resizeVol_args>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, resizeVol_args struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // POOL_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.poolName = iprot.readString();
                                struct.setPoolNameIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        case 2: // NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.name = iprot.readString();
                                struct.setNameIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        case 3: // CAPACITY_IN_KB
                            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE)
                            {
                                struct.capacityInKb = iprot.readDouble();
                                struct.setCapacityInKbIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, resizeVol_args struct)
                throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.poolName != null)
                {
                    oprot.writeFieldBegin(POOL_NAME_FIELD_DESC);
                    oprot.writeString(struct.poolName);
                    oprot.writeFieldEnd();
                }
                if (struct.name != null)
                {
                    oprot.writeFieldBegin(NAME_FIELD_DESC);
                    oprot.writeString(struct.name);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(CAPACITY_IN_KB_FIELD_DESC);
                oprot.writeDouble(struct.capacityInKb);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class resizeVol_argsTupleSchemeFactory implements SchemeFactory
        {
            public resizeVol_argsTupleScheme getScheme()
            {
                return new resizeVol_argsTupleScheme();
            }
        }

        private static class resizeVol_argsTupleScheme extends TupleScheme<resizeVol_args>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, resizeVol_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetPoolName())
                {
                    optionals.set(0);
                }
                if (struct.isSetName())
                {
                    optionals.set(1);
                }
                if (struct.isSetCapacityInKb())
                {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetPoolName())
                {
                    oprot.writeString(struct.poolName);
                }
                if (struct.isSetName())
                {
                    oprot.writeString(struct.name);
                }
                if (struct.isSetCapacityInKb())
                {
                    oprot.writeDouble(struct.capacityInKb);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, resizeVol_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0))
                {
                    struct.poolName = iprot.readString();
                    struct.setPoolNameIsSet(true);
                }
                if (incoming.get(1))
                {
                    struct.name = iprot.readString();
                    struct.setNameIsSet(true);
                }
                if (incoming.get(2))
                {
                    struct.capacityInKb = iprot.readDouble();
                    struct.setCapacityInKbIsSet(true);
                }
            }
        }

    }

    public static class resizeVol_result
        implements org.apache.thrift.TBase<resizeVol_result, resizeVol_result._Fields>,
        java.io.Serializable, Cloneable, Comparable<resizeVol_result>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("resizeVol_result");

        private static final org.apache.thrift.protocol.TField LIBVIRT_EXCEPTION_FIELD_DESC =
            new org.apache.thrift.protocol.TField("libvirtException",
                org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new resizeVol_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new resizeVol_resultTupleSchemeFactory());
        }

        public LibvirtException libvirtException; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            LIBVIRT_EXCEPTION((short) 1, "libvirtException");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // LIBVIRT_EXCEPTION
                        return LIBVIRT_EXCEPTION;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.LIBVIRT_EXCEPTION,
                new org.apache.thrift.meta_data.FieldMetaData("libvirtException",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resizeVol_result.class,
                metaDataMap);
        }

        public resizeVol_result()
        {
        }

        public resizeVol_result(LibvirtException libvirtException)
        {
            this();
            this.libvirtException = libvirtException;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public resizeVol_result(resizeVol_result other)
        {
            if (other.isSetLibvirtException())
            {
                this.libvirtException = new LibvirtException(other.libvirtException);
            }
        }

        public resizeVol_result deepCopy()
        {
            return new resizeVol_result(this);
        }

        @Override
        public void clear()
        {
            this.libvirtException = null;
        }

        public LibvirtException getLibvirtException()
        {
            return this.libvirtException;
        }

        public resizeVol_result setLibvirtException(LibvirtException libvirtException)
        {
            this.libvirtException = libvirtException;
            return this;
        }

        public void unsetLibvirtException()
        {
            this.libvirtException = null;
        }

        /** Returns true if field libvirtException is set (has been assigned a value) and false otherwise */
        public boolean isSetLibvirtException()
        {
            return this.libvirtException != null;
        }

        public void setLibvirtExceptionIsSet(boolean value)
        {
            if (!value)
            {
                this.libvirtException = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    if (value == null)
                    {
                        unsetLibvirtException();
                    }
                    else
                    {
                        setLibvirtException((LibvirtException) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    return getLibvirtException();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    return isSetLibvirtException();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof resizeVol_result)
                return this.equals((resizeVol_result) that);
            return false;
        }

        public boolean equals(resizeVol_result that)
        {
            if (that == null)
                return false;

            boolean this_present_libvirtException = true && this.isSetLibvirtException();
            boolean that_present_libvirtException = true && that.isSetLibvirtException();
            if (this_present_libvirtException || that_present_libvirtException)
            {
                if (!(this_present_libvirtException && that_present_libvirtException))
                    return false;
                if (!this.libvirtException.equals(that.libvirtException))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_libvirtException = true && (isSetLibvirtException());
            list.add(present_libvirtException);
            if (present_libvirtException)
                list.add(libvirtException);

            return list.hashCode();
        }

        @Override
        public int compareTo(resizeVol_result other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison =
                Boolean.valueOf(isSetLibvirtException()).compareTo(other.isSetLibvirtException());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetLibvirtException())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.libvirtException,
                    other.libvirtException);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("resizeVol_result(");
            boolean first = true;

            sb.append("libvirtException:");
            if (this.libvirtException == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.libvirtException);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class resizeVol_resultStandardSchemeFactory implements SchemeFactory
        {
            public resizeVol_resultStandardScheme getScheme()
            {
                return new resizeVol_resultStandardScheme();
            }
        }

        private static class resizeVol_resultStandardScheme extends StandardScheme<resizeVol_result>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, resizeVol_result struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // LIBVIRT_EXCEPTION
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT)
                            {
                                struct.libvirtException = new LibvirtException();
                                struct.libvirtException.read(iprot);
                                struct.setLibvirtExceptionIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, resizeVol_result struct)
                throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.libvirtException != null)
                {
                    oprot.writeFieldBegin(LIBVIRT_EXCEPTION_FIELD_DESC);
                    struct.libvirtException.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class resizeVol_resultTupleSchemeFactory implements SchemeFactory
        {
            public resizeVol_resultTupleScheme getScheme()
            {
                return new resizeVol_resultTupleScheme();
            }
        }

        private static class resizeVol_resultTupleScheme extends TupleScheme<resizeVol_result>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, resizeVol_result struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetLibvirtException())
                {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetLibvirtException())
                {
                    struct.libvirtException.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, resizeVol_result struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0))
                {
                    struct.libvirtException = new LibvirtException();
                    struct.libvirtException.read(iprot);
                    struct.setLibvirtExceptionIsSet(true);
                }
            }
        }

    }

    public static class resizeDisk_args
        implements org.apache.thrift.TBase<resizeDisk_args, resizeDisk_args._Fields>,
        java.io.Serializable, Cloneable, Comparable<resizeDisk_args>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("resizeDisk_args");

        private static final org.apache.thrift.protocol.TField DOMAIN_NAME_FIELD_DESC =
            new org.apache.thrift.protocol.TField("domainName",
                org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final org.apache.thrift.protocol.TField DISK_PATH_FIELD_DESC =
            new org.apache.thrift.protocol.TField("diskPath",
                org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final org.apache.thrift.protocol.TField DISK_SIZE_IN_KB_FIELD_DESC =
            new org.apache.thrift.protocol.TField("diskSizeInKb",
                org.apache.thrift.protocol.TType.DOUBLE, (short) 3);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new resizeDisk_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new resizeDisk_argsTupleSchemeFactory());
        }

        public String domainName; // required

        public String diskPath; // required

        public double diskSizeInKb; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            DOMAIN_NAME((short) 1, "domainName"),
            DISK_PATH((short) 2, "diskPath"),
            DISK_SIZE_IN_KB((short) 3, "diskSizeInKb");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // DOMAIN_NAME
                        return DOMAIN_NAME;
                    case 2: // DISK_PATH
                        return DISK_PATH;
                    case 3: // DISK_SIZE_IN_KB
                        return DISK_SIZE_IN_KB;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __DISKSIZEINKB_ISSET_ID = 0;

        private byte __isset_bitfield = 0;

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.DOMAIN_NAME,
                new org.apache.thrift.meta_data.FieldMetaData("domainName",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.DISK_PATH,
                new org.apache.thrift.meta_data.FieldMetaData("diskPath",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.DISK_SIZE_IN_KB,
                new org.apache.thrift.meta_data.FieldMetaData("diskSizeInKb",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.DOUBLE)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resizeDisk_args.class,
                metaDataMap);
        }

        public resizeDisk_args()
        {
        }

        public resizeDisk_args(String domainName, String diskPath, double diskSizeInKb)
        {
            this();
            this.domainName = domainName;
            this.diskPath = diskPath;
            this.diskSizeInKb = diskSizeInKb;
            setDiskSizeInKbIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public resizeDisk_args(resizeDisk_args other)
        {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetDomainName())
            {
                this.domainName = other.domainName;
            }
            if (other.isSetDiskPath())
            {
                this.diskPath = other.diskPath;
            }
            this.diskSizeInKb = other.diskSizeInKb;
        }

        public resizeDisk_args deepCopy()
        {
            return new resizeDisk_args(this);
        }

        @Override
        public void clear()
        {
            this.domainName = null;
            this.diskPath = null;
            setDiskSizeInKbIsSet(false);
            this.diskSizeInKb = 0.0;
        }

        public String getDomainName()
        {
            return this.domainName;
        }

        public resizeDisk_args setDomainName(String domainName)
        {
            this.domainName = domainName;
            return this;
        }

        public void unsetDomainName()
        {
            this.domainName = null;
        }

        /** Returns true if field domainName is set (has been assigned a value) and false otherwise */
        public boolean isSetDomainName()
        {
            return this.domainName != null;
        }

        public void setDomainNameIsSet(boolean value)
        {
            if (!value)
            {
                this.domainName = null;
            }
        }

        public String getDiskPath()
        {
            return this.diskPath;
        }

        public resizeDisk_args setDiskPath(String diskPath)
        {
            this.diskPath = diskPath;
            return this;
        }

        public void unsetDiskPath()
        {
            this.diskPath = null;
        }

        /** Returns true if field diskPath is set (has been assigned a value) and false otherwise */
        public boolean isSetDiskPath()
        {
            return this.diskPath != null;
        }

        public void setDiskPathIsSet(boolean value)
        {
            if (!value)
            {
                this.diskPath = null;
            }
        }

        public double getDiskSizeInKb()
        {
            return this.diskSizeInKb;
        }

        public resizeDisk_args setDiskSizeInKb(double diskSizeInKb)
        {
            this.diskSizeInKb = diskSizeInKb;
            setDiskSizeInKbIsSet(true);
            return this;
        }

        public void unsetDiskSizeInKb()
        {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISKSIZEINKB_ISSET_ID);
        }

        /** Returns true if field diskSizeInKb is set (has been assigned a value) and false otherwise */
        public boolean isSetDiskSizeInKb()
        {
            return EncodingUtils.testBit(__isset_bitfield, __DISKSIZEINKB_ISSET_ID);
        }

        public void setDiskSizeInKbIsSet(boolean value)
        {
            __isset_bitfield =
                EncodingUtils.setBit(__isset_bitfield, __DISKSIZEINKB_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case DOMAIN_NAME:
                    if (value == null)
                    {
                        unsetDomainName();
                    }
                    else
                    {
                        setDomainName((String) value);
                    }
                    break;

                case DISK_PATH:
                    if (value == null)
                    {
                        unsetDiskPath();
                    }
                    else
                    {
                        setDiskPath((String) value);
                    }
                    break;

                case DISK_SIZE_IN_KB:
                    if (value == null)
                    {
                        unsetDiskSizeInKb();
                    }
                    else
                    {
                        setDiskSizeInKb((Double) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case DOMAIN_NAME:
                    return getDomainName();

                case DISK_PATH:
                    return getDiskPath();

                case DISK_SIZE_IN_KB:
                    return Double.valueOf(getDiskSizeInKb());

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case DOMAIN_NAME:
                    return isSetDomainName();
                case DISK_PATH:
                    return isSetDiskPath();
                case DISK_SIZE_IN_KB:
                    return isSetDiskSizeInKb();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof resizeDisk_args)
                return this.equals((resizeDisk_args) that);
            return false;
        }

        public boolean equals(resizeDisk_args that)
        {
            if (that == null)
                return false;

            boolean this_present_domainName = true && this.isSetDomainName();
            boolean that_present_domainName = true && that.isSetDomainName();
            if (this_present_domainName || that_present_domainName)
            {
                if (!(this_present_domainName && that_present_domainName))
                    return false;
                if (!this.domainName.equals(that.domainName))
                    return false;
            }

            boolean this_present_diskPath = true && this.isSetDiskPath();
            boolean that_present_diskPath = true && that.isSetDiskPath();
            if (this_present_diskPath || that_present_diskPath)
            {
                if (!(this_present_diskPath && that_present_diskPath))
                    return false;
                if (!this.diskPath.equals(that.diskPath))
                    return false;
            }

            boolean this_present_diskSizeInKb = true;
            boolean that_present_diskSizeInKb = true;
            if (this_present_diskSizeInKb || that_present_diskSizeInKb)
            {
                if (!(this_present_diskSizeInKb && that_present_diskSizeInKb))
                    return false;
                if (this.diskSizeInKb != that.diskSizeInKb)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_domainName = true && (isSetDomainName());
            list.add(present_domainName);
            if (present_domainName)
                list.add(domainName);

            boolean present_diskPath = true && (isSetDiskPath());
            list.add(present_diskPath);
            if (present_diskPath)
                list.add(diskPath);

            boolean present_diskSizeInKb = true;
            list.add(present_diskSizeInKb);
            if (present_diskSizeInKb)
                list.add(diskSizeInKb);

            return list.hashCode();
        }

        @Override
        public int compareTo(resizeDisk_args other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetDomainName()).compareTo(other.isSetDomainName());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetDomainName())
            {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.domainName, other.domainName);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetDiskPath()).compareTo(other.isSetDiskPath());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetDiskPath())
            {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.diskPath, other.diskPath);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            lastComparison =
                Boolean.valueOf(isSetDiskSizeInKb()).compareTo(other.isSetDiskSizeInKb());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetDiskSizeInKb())
            {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.diskSizeInKb, other.diskSizeInKb);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("resizeDisk_args(");
            boolean first = true;

            sb.append("domainName:");
            if (this.domainName == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.domainName);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("diskPath:");
            if (this.diskPath == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.diskPath);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("diskSizeInKb:");
            sb.append(this.diskSizeInKb);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class resizeDisk_argsStandardSchemeFactory implements SchemeFactory
        {
            public resizeDisk_argsStandardScheme getScheme()
            {
                return new resizeDisk_argsStandardScheme();
            }
        }

        private static class resizeDisk_argsStandardScheme extends StandardScheme<resizeDisk_args>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, resizeDisk_args struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // DOMAIN_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.domainName = iprot.readString();
                                struct.setDomainNameIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        case 2: // DISK_PATH
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.diskPath = iprot.readString();
                                struct.setDiskPathIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        case 3: // DISK_SIZE_IN_KB
                            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE)
                            {
                                struct.diskSizeInKb = iprot.readDouble();
                                struct.setDiskSizeInKbIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, resizeDisk_args struct)
                throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.domainName != null)
                {
                    oprot.writeFieldBegin(DOMAIN_NAME_FIELD_DESC);
                    oprot.writeString(struct.domainName);
                    oprot.writeFieldEnd();
                }
                if (struct.diskPath != null)
                {
                    oprot.writeFieldBegin(DISK_PATH_FIELD_DESC);
                    oprot.writeString(struct.diskPath);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(DISK_SIZE_IN_KB_FIELD_DESC);
                oprot.writeDouble(struct.diskSizeInKb);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class resizeDisk_argsTupleSchemeFactory implements SchemeFactory
        {
            public resizeDisk_argsTupleScheme getScheme()
            {
                return new resizeDisk_argsTupleScheme();
            }
        }

        private static class resizeDisk_argsTupleScheme extends TupleScheme<resizeDisk_args>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, resizeDisk_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetDomainName())
                {
                    optionals.set(0);
                }
                if (struct.isSetDiskPath())
                {
                    optionals.set(1);
                }
                if (struct.isSetDiskSizeInKb())
                {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetDomainName())
                {
                    oprot.writeString(struct.domainName);
                }
                if (struct.isSetDiskPath())
                {
                    oprot.writeString(struct.diskPath);
                }
                if (struct.isSetDiskSizeInKb())
                {
                    oprot.writeDouble(struct.diskSizeInKb);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, resizeDisk_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0))
                {
                    struct.domainName = iprot.readString();
                    struct.setDomainNameIsSet(true);
                }
                if (incoming.get(1))
                {
                    struct.diskPath = iprot.readString();
                    struct.setDiskPathIsSet(true);
                }
                if (incoming.get(2))
                {
                    struct.diskSizeInKb = iprot.readDouble();
                    struct.setDiskSizeInKbIsSet(true);
                }
            }
        }

    }

    public static class resizeDisk_result
        implements org.apache.thrift.TBase<resizeDisk_result, resizeDisk_result._Fields>,
        java.io.Serializable, Cloneable, Comparable<resizeDisk_result>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("resizeDisk_result");

        private static final org.apache.thrift.protocol.TField LIBVIRT_EXCEPTION_FIELD_DESC =
            new org.apache.thrift.protocol.TField("libvirtException",
                org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new resizeDisk_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new resizeDisk_resultTupleSchemeFactory());
        }

        public LibvirtException libvirtException; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            LIBVIRT_EXCEPTION((short) 1, "libvirtException");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // LIBVIRT_EXCEPTION
                        return LIBVIRT_EXCEPTION;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.LIBVIRT_EXCEPTION,
                new org.apache.thrift.meta_data.FieldMetaData("libvirtException",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resizeDisk_result.class,
                metaDataMap);
        }

        public resizeDisk_result()
        {
        }

        public resizeDisk_result(LibvirtException libvirtException)
        {
            this();
            this.libvirtException = libvirtException;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public resizeDisk_result(resizeDisk_result other)
        {
            if (other.isSetLibvirtException())
            {
                this.libvirtException = new LibvirtException(other.libvirtException);
            }
        }

        public resizeDisk_result deepCopy()
        {
            return new resizeDisk_result(this);
        }

        @Override
        public void clear()
        {
            this.libvirtException = null;
        }

        public LibvirtException getLibvirtException()
        {
            return this.libvirtException;
        }

        public resizeDisk_result setLibvirtException(LibvirtException libvirtException)
        {
            this.libvirtException = libvirtException;
            return this;
        }

        public void unsetLibvirtException()
        {
            this.libvirtException = null;
        }

        /** Returns true if field libvirtException is set (has been assigned a value) and false otherwise */
        public boolean isSetLibvirtException()
        {
            return this.libvirtException != null;
        }

        public void setLibvirtExceptionIsSet(boolean value)
        {
            if (!value)
            {
                this.libvirtException = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    if (value == null)
                    {
                        unsetLibvirtException();
                    }
                    else
                    {
                        setLibvirtException((LibvirtException) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    return getLibvirtException();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case LIBVIRT_EXCEPTION:
                    return isSetLibvirtException();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof resizeDisk_result)
                return this.equals((resizeDisk_result) that);
            return false;
        }

        public boolean equals(resizeDisk_result that)
        {
            if (that == null)
                return false;

            boolean this_present_libvirtException = true && this.isSetLibvirtException();
            boolean that_present_libvirtException = true && that.isSetLibvirtException();
            if (this_present_libvirtException || that_present_libvirtException)
            {
                if (!(this_present_libvirtException && that_present_libvirtException))
                    return false;
                if (!this.libvirtException.equals(that.libvirtException))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_libvirtException = true && (isSetLibvirtException());
            list.add(present_libvirtException);
            if (present_libvirtException)
                list.add(libvirtException);

            return list.hashCode();
        }

        @Override
        public int compareTo(resizeDisk_result other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison =
                Boolean.valueOf(isSetLibvirtException()).compareTo(other.isSetLibvirtException());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetLibvirtException())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.libvirtException,
                    other.libvirtException);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("resizeDisk_result(");
            boolean first = true;

            sb.append("libvirtException:");
            if (this.libvirtException == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.libvirtException);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class resizeDisk_resultStandardSchemeFactory implements SchemeFactory
        {
            public resizeDisk_resultStandardScheme getScheme()
            {
                return new resizeDisk_resultStandardScheme();
            }
        }

        private static class resizeDisk_resultStandardScheme
            extends StandardScheme<resizeDisk_result>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, resizeDisk_result struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // LIBVIRT_EXCEPTION
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT)
                            {
                                struct.libvirtException = new LibvirtException();
                                struct.libvirtException.read(iprot);
                                struct.setLibvirtExceptionIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, resizeDisk_result struct)
                throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.libvirtException != null)
                {
                    oprot.writeFieldBegin(LIBVIRT_EXCEPTION_FIELD_DESC);
                    struct.libvirtException.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class resizeDisk_resultTupleSchemeFactory implements SchemeFactory
        {
            public resizeDisk_resultTupleScheme getScheme()
            {
                return new resizeDisk_resultTupleScheme();
            }
        }

        private static class resizeDisk_resultTupleScheme extends TupleScheme<resizeDisk_result>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, resizeDisk_result struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetLibvirtException())
                {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetLibvirtException())
                {
                    struct.libvirtException.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, resizeDisk_result struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0))
                {
                    struct.libvirtException = new LibvirtException();
                    struct.libvirtException.read(iprot);
                    struct.setLibvirtExceptionIsSet(true);
                }
            }
        }

    }

    public static class getDomainBlockInfo_args implements
        org.apache.thrift.TBase<getDomainBlockInfo_args, getDomainBlockInfo_args._Fields>,
        java.io.Serializable, Cloneable, Comparable<getDomainBlockInfo_args>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("getDomainBlockInfo_args");

        private static final org.apache.thrift.protocol.TField DOMAIN_NAME_FIELD_DESC =
            new org.apache.thrift.protocol.TField("domainName",
                org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final org.apache.thrift.protocol.TField DISK_PATH_FIELD_DESC =
            new org.apache.thrift.protocol.TField("diskPath",
                org.apache.thrift.protocol.TType.STRING, (short) 2);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new getDomainBlockInfo_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getDomainBlockInfo_argsTupleSchemeFactory());
        }

        public String domainName; // required

        public String diskPath; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            DOMAIN_NAME((short) 1, "domainName"),
            DISK_PATH((short) 2, "diskPath");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // DOMAIN_NAME
                        return DOMAIN_NAME;
                    case 2: // DISK_PATH
                        return DISK_PATH;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.DOMAIN_NAME,
                new org.apache.thrift.meta_data.FieldMetaData("domainName",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.DISK_PATH,
                new org.apache.thrift.meta_data.FieldMetaData("diskPath",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData
                .addStructMetaDataMap(getDomainBlockInfo_args.class, metaDataMap);
        }

        public getDomainBlockInfo_args()
        {
        }

        public getDomainBlockInfo_args(String domainName, String diskPath)
        {
            this();
            this.domainName = domainName;
            this.diskPath = diskPath;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getDomainBlockInfo_args(getDomainBlockInfo_args other)
        {
            if (other.isSetDomainName())
            {
                this.domainName = other.domainName;
            }
            if (other.isSetDiskPath())
            {
                this.diskPath = other.diskPath;
            }
        }

        public getDomainBlockInfo_args deepCopy()
        {
            return new getDomainBlockInfo_args(this);
        }

        @Override
        public void clear()
        {
            this.domainName = null;
            this.diskPath = null;
        }

        public String getDomainName()
        {
            return this.domainName;
        }

        public getDomainBlockInfo_args setDomainName(String domainName)
        {
            this.domainName = domainName;
            return this;
        }

        public void unsetDomainName()
        {
            this.domainName = null;
        }

        /** Returns true if field domainName is set (has been assigned a value) and false otherwise */
        public boolean isSetDomainName()
        {
            return this.domainName != null;
        }

        public void setDomainNameIsSet(boolean value)
        {
            if (!value)
            {
                this.domainName = null;
            }
        }

        public String getDiskPath()
        {
            return this.diskPath;
        }

        public getDomainBlockInfo_args setDiskPath(String diskPath)
        {
            this.diskPath = diskPath;
            return this;
        }

        public void unsetDiskPath()
        {
            this.diskPath = null;
        }

        /** Returns true if field diskPath is set (has been assigned a value) and false otherwise */
        public boolean isSetDiskPath()
        {
            return this.diskPath != null;
        }

        public void setDiskPathIsSet(boolean value)
        {
            if (!value)
            {
                this.diskPath = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case DOMAIN_NAME:
                    if (value == null)
                    {
                        unsetDomainName();
                    }
                    else
                    {
                        setDomainName((String) value);
                    }
                    break;

                case DISK_PATH:
                    if (value == null)
                    {
                        unsetDiskPath();
                    }
                    else
                    {
                        setDiskPath((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case DOMAIN_NAME:
                    return getDomainName();

                case DISK_PATH:
                    return getDiskPath();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case DOMAIN_NAME:
                    return isSetDomainName();
                case DISK_PATH:
                    return isSetDiskPath();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof getDomainBlockInfo_args)
                return this.equals((getDomainBlockInfo_args) that);
            return false;
        }

        public boolean equals(getDomainBlockInfo_args that)
        {
            if (that == null)
                return false;

            boolean this_present_domainName = true && this.isSetDomainName();
            boolean that_present_domainName = true && that.isSetDomainName();
            if (this_present_domainName || that_present_domainName)
            {
                if (!(this_present_domainName && that_present_domainName))
                    return false;
                if (!this.domainName.equals(that.domainName))
                    return false;
            }

            boolean this_present_diskPath = true && this.isSetDiskPath();
            boolean that_present_diskPath = true && that.isSetDiskPath();
            if (this_present_diskPath || that_present_diskPath)
            {
                if (!(this_present_diskPath && that_present_diskPath))
                    return false;
                if (!this.diskPath.equals(that.diskPath))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_domainName = true && (isSetDomainName());
            list.add(present_domainName);
            if (present_domainName)
                list.add(domainName);

            boolean present_diskPath = true && (isSetDiskPath());
            list.add(present_diskPath);
            if (present_diskPath)
                list.add(diskPath);

            return list.hashCode();
        }

        @Override
        public int compareTo(getDomainBlockInfo_args other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetDomainName()).compareTo(other.isSetDomainName());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetDomainName())
            {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.domainName, other.domainName);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetDiskPath()).compareTo(other.isSetDiskPath());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetDiskPath())
            {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.diskPath, other.diskPath);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("getDomainBlockInfo_args(");
            boolean first = true;

            sb.append("domainName:");
            if (this.domainName == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.domainName);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("diskPath:");
            if (this.diskPath == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.diskPath);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class getDomainBlockInfo_argsStandardSchemeFactory implements SchemeFactory
        {
            public getDomainBlockInfo_argsStandardScheme getScheme()
            {
                return new getDomainBlockInfo_argsStandardScheme();
            }
        }

        private static class getDomainBlockInfo_argsStandardScheme
            extends StandardScheme<getDomainBlockInfo_args>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot,
                getDomainBlockInfo_args struct) throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // DOMAIN_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.domainName = iprot.readString();
                                struct.setDomainNameIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        case 2: // DISK_PATH
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.diskPath = iprot.readString();
                                struct.setDiskPathIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                getDomainBlockInfo_args struct) throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.domainName != null)
                {
                    oprot.writeFieldBegin(DOMAIN_NAME_FIELD_DESC);
                    oprot.writeString(struct.domainName);
                    oprot.writeFieldEnd();
                }
                if (struct.diskPath != null)
                {
                    oprot.writeFieldBegin(DISK_PATH_FIELD_DESC);
                    oprot.writeString(struct.diskPath);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getDomainBlockInfo_argsTupleSchemeFactory implements SchemeFactory
        {
            public getDomainBlockInfo_argsTupleScheme getScheme()
            {
                return new getDomainBlockInfo_argsTupleScheme();
            }
        }

        private static class getDomainBlockInfo_argsTupleScheme
            extends TupleScheme<getDomainBlockInfo_args>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot,
                getDomainBlockInfo_args struct) throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetDomainName())
                {
                    optionals.set(0);
                }
                if (struct.isSetDiskPath())
                {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetDomainName())
                {
                    oprot.writeString(struct.domainName);
                }
                if (struct.isSetDiskPath())
                {
                    oprot.writeString(struct.diskPath);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot,
                getDomainBlockInfo_args struct) throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0))
                {
                    struct.domainName = iprot.readString();
                    struct.setDomainNameIsSet(true);
                }
                if (incoming.get(1))
                {
                    struct.diskPath = iprot.readString();
                    struct.setDiskPathIsSet(true);
                }
            }
        }

    }

    public static class getDomainBlockInfo_result implements
        org.apache.thrift.TBase<getDomainBlockInfo_result, getDomainBlockInfo_result._Fields>,
        java.io.Serializable, Cloneable, Comparable<getDomainBlockInfo_result>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("getDomainBlockInfo_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC =
            new org.apache.thrift.protocol.TField("success",
                org.apache.thrift.protocol.TType.STRUCT, (short) 0);

        private static final org.apache.thrift.protocol.TField LIBVIRT_EXCEPTION_FIELD_DESC =
            new org.apache.thrift.protocol.TField("libvirtException",
                org.apache.thrift.protocol.TType.STRUCT, (short) 1);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new getDomainBlockInfo_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getDomainBlockInfo_resultTupleSchemeFactory());
        }

        public DomainBlockInfo success; // required

        public LibvirtException libvirtException; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            SUCCESS((short) 0, "success"),
            LIBVIRT_EXCEPTION((short) 1, "libvirtException");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 0: // SUCCESS
                        return SUCCESS;
                    case 1: // LIBVIRT_EXCEPTION
                        return LIBVIRT_EXCEPTION;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS,
                new org.apache.thrift.meta_data.FieldMetaData("success",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(
                        org.apache.thrift.protocol.TType.STRUCT, DomainBlockInfo.class)));
            tmpMap.put(_Fields.LIBVIRT_EXCEPTION,
                new org.apache.thrift.meta_data.FieldMetaData("libvirtException",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRUCT)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData
                .addStructMetaDataMap(getDomainBlockInfo_result.class, metaDataMap);
        }

        public getDomainBlockInfo_result()
        {
        }

        public getDomainBlockInfo_result(DomainBlockInfo success, LibvirtException libvirtException)
        {
            this();
            this.success = success;
            this.libvirtException = libvirtException;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getDomainBlockInfo_result(getDomainBlockInfo_result other)
        {
            if (other.isSetSuccess())
            {
                this.success = new DomainBlockInfo(other.success);
            }
            if (other.isSetLibvirtException())
            {
                this.libvirtException = new LibvirtException(other.libvirtException);
            }
        }

        public getDomainBlockInfo_result deepCopy()
        {
            return new getDomainBlockInfo_result(this);
        }

        @Override
        public void clear()
        {
            this.success = null;
            this.libvirtException = null;
        }

        public DomainBlockInfo getSuccess()
        {
            return this.success;
        }

        public getDomainBlockInfo_result setSuccess(DomainBlockInfo success)
        {
            this.success = success;
            return this;
        }

        public void unsetSuccess()
        {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess()
        {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value)
        {
            if (!value)
            {
                this.success = null;
            }
        }

        public LibvirtException getLibvirtException()
        {
            return this.libvirtException;
        }

        public getDomainBlockInfo_result setLibvirtException(LibvirtException libvirtException)
        {
            this.libvirtException = libvirtException;
            return this;
        }

        public void unsetLibvirtException()
        {
            this.libvirtException = null;
        }

        /** Returns true if field libvirtException is set (has been assigned a value) and false otherwise */
        public boolean isSetLibvirtException()
        {
            return this.libvirtException != null;
        }

        public void setLibvirtExceptionIsSet(boolean value)
        {
            if (!value)
            {
                this.libvirtException = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case SUCCESS:
                    if (value == null)
                    {
                        unsetSuccess();
                    }
                    else
                    {
                        setSuccess((DomainBlockInfo) value);
                    }
                    break;

                case LIBVIRT_EXCEPTION:
                    if (value == null)
                    {
                        unsetLibvirtException();
                    }
                    else
                    {
                        setLibvirtException((LibvirtException) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case SUCCESS:
                    return getSuccess();

                case LIBVIRT_EXCEPTION:
                    return getLibvirtException();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case SUCCESS:
                    return isSetSuccess();
                case LIBVIRT_EXCEPTION:
                    return isSetLibvirtException();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof getDomainBlockInfo_result)
                return this.equals((getDomainBlockInfo_result) that);
            return false;
        }

        public boolean equals(getDomainBlockInfo_result that)
        {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success)
            {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            boolean this_present_libvirtException = true && this.isSetLibvirtException();
            boolean that_present_libvirtException = true && that.isSetLibvirtException();
            if (this_present_libvirtException || that_present_libvirtException)
            {
                if (!(this_present_libvirtException && that_present_libvirtException))
                    return false;
                if (!this.libvirtException.equals(that.libvirtException))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            boolean present_libvirtException = true && (isSetLibvirtException());
            list.add(present_libvirtException);
            if (present_libvirtException)
                list.add(libvirtException);

            return list.hashCode();
        }

        @Override
        public int compareTo(getDomainBlockInfo_result other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetSuccess())
            {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            lastComparison =
                Boolean.valueOf(isSetLibvirtException()).compareTo(other.isSetLibvirtException());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetLibvirtException())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.libvirtException,
                    other.libvirtException);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("getDomainBlockInfo_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.success);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("libvirtException:");
            if (this.libvirtException == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.libvirtException);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
            if (success != null)
            {
                success.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class getDomainBlockInfo_resultStandardSchemeFactory implements SchemeFactory
        {
            public getDomainBlockInfo_resultStandardScheme getScheme()
            {
                return new getDomainBlockInfo_resultStandardScheme();
            }
        }

        private static class getDomainBlockInfo_resultStandardScheme
            extends StandardScheme<getDomainBlockInfo_result>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot,
                getDomainBlockInfo_result struct) throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT)
                            {
                                struct.success = new DomainBlockInfo();
                                struct.success.read(iprot);
                                struct.setSuccessIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        case 1: // LIBVIRT_EXCEPTION
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT)
                            {
                                struct.libvirtException = new LibvirtException();
                                struct.libvirtException.read(iprot);
                                struct.setLibvirtExceptionIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                getDomainBlockInfo_result struct) throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null)
                {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    struct.success.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.libvirtException != null)
                {
                    oprot.writeFieldBegin(LIBVIRT_EXCEPTION_FIELD_DESC);
                    struct.libvirtException.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getDomainBlockInfo_resultTupleSchemeFactory implements SchemeFactory
        {
            public getDomainBlockInfo_resultTupleScheme getScheme()
            {
                return new getDomainBlockInfo_resultTupleScheme();
            }
        }

        private static class getDomainBlockInfo_resultTupleScheme
            extends TupleScheme<getDomainBlockInfo_result>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot,
                getDomainBlockInfo_result struct) throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess())
                {
                    optionals.set(0);
                }
                if (struct.isSetLibvirtException())
                {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetSuccess())
                {
                    struct.success.write(oprot);
                }
                if (struct.isSetLibvirtException())
                {
                    struct.libvirtException.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot,
                getDomainBlockInfo_result struct) throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0))
                {
                    struct.success = new DomainBlockInfo();
                    struct.success.read(iprot);
                    struct.setSuccessIsSet(true);
                }
                if (incoming.get(1))
                {
                    struct.libvirtException = new LibvirtException();
                    struct.libvirtException.read(iprot);
                    struct.setLibvirtExceptionIsSet(true);
                }
            }
        }

    }

    public static class getDatapoints_args
        implements org.apache.thrift.TBase<getDatapoints_args, getDatapoints_args._Fields>,
        java.io.Serializable, Cloneable, Comparable<getDatapoints_args>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("getDatapoints_args");

        private static final org.apache.thrift.protocol.TField DOMAIN_NAME_FIELD_DESC =
            new org.apache.thrift.protocol.TField("domainName",
                org.apache.thrift.protocol.TType.STRING, (short) 1);

        private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC =
            new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I32,
                (short) 2);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new getDatapoints_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getDatapoints_argsTupleSchemeFactory());
        }

        public String domainName; // required

        public int timestamp; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            DOMAIN_NAME((short) 1, "domainName"),
            TIMESTAMP((short) 2, "timestamp");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // DOMAIN_NAME
                        return DOMAIN_NAME;
                    case 2: // TIMESTAMP
                        return TIMESTAMP;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __TIMESTAMP_ISSET_ID = 0;

        private byte __isset_bitfield = 0;

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.DOMAIN_NAME,
                new org.apache.thrift.meta_data.FieldMetaData("domainName",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.TIMESTAMP,
                new org.apache.thrift.meta_data.FieldMetaData("timestamp",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.I32)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDatapoints_args.class,
                metaDataMap);
        }

        public getDatapoints_args()
        {
        }

        public getDatapoints_args(String domainName, int timestamp)
        {
            this();
            this.domainName = domainName;
            this.timestamp = timestamp;
            setTimestampIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getDatapoints_args(getDatapoints_args other)
        {
            __isset_bitfield = other.__isset_bitfield;
            if (other.isSetDomainName())
            {
                this.domainName = other.domainName;
            }
            this.timestamp = other.timestamp;
        }

        public getDatapoints_args deepCopy()
        {
            return new getDatapoints_args(this);
        }

        @Override
        public void clear()
        {
            this.domainName = null;
            setTimestampIsSet(false);
            this.timestamp = 0;
        }

        public String getDomainName()
        {
            return this.domainName;
        }

        public getDatapoints_args setDomainName(String domainName)
        {
            this.domainName = domainName;
            return this;
        }

        public void unsetDomainName()
        {
            this.domainName = null;
        }

        /** Returns true if field domainName is set (has been assigned a value) and false otherwise */
        public boolean isSetDomainName()
        {
            return this.domainName != null;
        }

        public void setDomainNameIsSet(boolean value)
        {
            if (!value)
            {
                this.domainName = null;
            }
        }

        public int getTimestamp()
        {
            return this.timestamp;
        }

        public getDatapoints_args setTimestamp(int timestamp)
        {
            this.timestamp = timestamp;
            setTimestampIsSet(true);
            return this;
        }

        public void unsetTimestamp()
        {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
        }

        /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
        public boolean isSetTimestamp()
        {
            return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
        }

        public void setTimestampIsSet(boolean value)
        {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case DOMAIN_NAME:
                    if (value == null)
                    {
                        unsetDomainName();
                    }
                    else
                    {
                        setDomainName((String) value);
                    }
                    break;

                case TIMESTAMP:
                    if (value == null)
                    {
                        unsetTimestamp();
                    }
                    else
                    {
                        setTimestamp((Integer) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case DOMAIN_NAME:
                    return getDomainName();

                case TIMESTAMP:
                    return Integer.valueOf(getTimestamp());

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case DOMAIN_NAME:
                    return isSetDomainName();
                case TIMESTAMP:
                    return isSetTimestamp();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof getDatapoints_args)
                return this.equals((getDatapoints_args) that);
            return false;
        }

        public boolean equals(getDatapoints_args that)
        {
            if (that == null)
                return false;

            boolean this_present_domainName = true && this.isSetDomainName();
            boolean that_present_domainName = true && that.isSetDomainName();
            if (this_present_domainName || that_present_domainName)
            {
                if (!(this_present_domainName && that_present_domainName))
                    return false;
                if (!this.domainName.equals(that.domainName))
                    return false;
            }

            boolean this_present_timestamp = true;
            boolean that_present_timestamp = true;
            if (this_present_timestamp || that_present_timestamp)
            {
                if (!(this_present_timestamp && that_present_timestamp))
                    return false;
                if (this.timestamp != that.timestamp)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_domainName = true && (isSetDomainName());
            list.add(present_domainName);
            if (present_domainName)
                list.add(domainName);

            boolean present_timestamp = true;
            list.add(present_timestamp);
            if (present_timestamp)
                list.add(timestamp);

            return list.hashCode();
        }

        @Override
        public int compareTo(getDatapoints_args other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetDomainName()).compareTo(other.isSetDomainName());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetDomainName())
            {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.domainName, other.domainName);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetTimestamp())
            {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("getDatapoints_args(");
            boolean first = true;

            sb.append("domainName:");
            if (this.domainName == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.domainName);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("timestamp:");
            sb.append(this.timestamp);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class getDatapoints_argsStandardSchemeFactory implements SchemeFactory
        {
            public getDatapoints_argsStandardScheme getScheme()
            {
                return new getDatapoints_argsStandardScheme();
            }
        }

        private static class getDatapoints_argsStandardScheme
            extends StandardScheme<getDatapoints_args>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, getDatapoints_args struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // DOMAIN_NAME
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.domainName = iprot.readString();
                                struct.setDomainNameIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        case 2: // TIMESTAMP
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32)
                            {
                                struct.timestamp = iprot.readI32();
                                struct.setTimestampIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, getDatapoints_args struct)
                throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.domainName != null)
                {
                    oprot.writeFieldBegin(DOMAIN_NAME_FIELD_DESC);
                    oprot.writeString(struct.domainName);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
                oprot.writeI32(struct.timestamp);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getDatapoints_argsTupleSchemeFactory implements SchemeFactory
        {
            public getDatapoints_argsTupleScheme getScheme()
            {
                return new getDatapoints_argsTupleScheme();
            }
        }

        private static class getDatapoints_argsTupleScheme extends TupleScheme<getDatapoints_args>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, getDatapoints_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetDomainName())
                {
                    optionals.set(0);
                }
                if (struct.isSetTimestamp())
                {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetDomainName())
                {
                    oprot.writeString(struct.domainName);
                }
                if (struct.isSetTimestamp())
                {
                    oprot.writeI32(struct.timestamp);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getDatapoints_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0))
                {
                    struct.domainName = iprot.readString();
                    struct.setDomainNameIsSet(true);
                }
                if (incoming.get(1))
                {
                    struct.timestamp = iprot.readI32();
                    struct.setTimestampIsSet(true);
                }
            }
        }

    }

    public static class getDatapoints_result
        implements org.apache.thrift.TBase<getDatapoints_result, getDatapoints_result._Fields>,
        java.io.Serializable, Cloneable, Comparable<getDatapoints_result>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("getDatapoints_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC =
            new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST,
                (short) 0);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new getDatapoints_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new getDatapoints_resultTupleSchemeFactory());
        }

        public List<Measure> success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            SUCCESS((short) 0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
                org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                    new org.apache.thrift.meta_data.StructMetaData(
                        org.apache.thrift.protocol.TType.STRUCT, Measure.class))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData
                .addStructMetaDataMap(getDatapoints_result.class, metaDataMap);
        }

        public getDatapoints_result()
        {
        }

        public getDatapoints_result(List<Measure> success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public getDatapoints_result(getDatapoints_result other)
        {
            if (other.isSetSuccess())
            {
                List<Measure> __this__success = new ArrayList<Measure>(other.success.size());
                for (Measure other_element : other.success)
                {
                    __this__success.add(new Measure(other_element));
                }
                this.success = __this__success;
            }
        }

        public getDatapoints_result deepCopy()
        {
            return new getDatapoints_result(this);
        }

        @Override
        public void clear()
        {
            this.success = null;
        }

        public int getSuccessSize()
        {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<Measure> getSuccessIterator()
        {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(Measure elem)
        {
            if (this.success == null)
            {
                this.success = new ArrayList<Measure>();
            }
            this.success.add(elem);
        }

        public List<Measure> getSuccess()
        {
            return this.success;
        }

        public getDatapoints_result setSuccess(List<Measure> success)
        {
            this.success = success;
            return this;
        }

        public void unsetSuccess()
        {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess()
        {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value)
        {
            if (!value)
            {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case SUCCESS:
                    if (value == null)
                    {
                        unsetSuccess();
                    }
                    else
                    {
                        setSuccess((List<Measure>) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof getDatapoints_result)
                return this.equals((getDatapoints_result) that);
            return false;
        }

        public boolean equals(getDatapoints_result that)
        {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success)
            {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(getDatapoints_result other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetSuccess())
            {
                lastComparison =
                    org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("getDatapoints_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class getDatapoints_resultStandardSchemeFactory implements SchemeFactory
        {
            public getDatapoints_resultStandardScheme getScheme()
            {
                return new getDatapoints_resultStandardScheme();
            }
        }

        private static class getDatapoints_resultStandardScheme
            extends StandardScheme<getDatapoints_result>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot,
                getDatapoints_result struct) throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST)
                            {
                                {
                                    org.apache.thrift.protocol.TList _list50 =
                                        iprot.readListBegin();
                                    struct.success = new ArrayList<Measure>(_list50.size);
                                    Measure _elem51;
                                    for (int _i52 = 0; _i52 < _list50.size; ++_i52)
                                    {
                                        _elem51 = new Measure();
                                        _elem51.read(iprot);
                                        struct.success.add(_elem51);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot,
                getDatapoints_result struct) throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null)
                {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(
                            org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                        for (Measure _iter53 : struct.success)
                        {
                            _iter53.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class getDatapoints_resultTupleSchemeFactory implements SchemeFactory
        {
            public getDatapoints_resultTupleScheme getScheme()
            {
                return new getDatapoints_resultTupleScheme();
            }
        }

        private static class getDatapoints_resultTupleScheme
            extends TupleScheme<getDatapoints_result>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot,
                getDatapoints_result struct) throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess())
                {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess())
                {
                    {
                        oprot.writeI32(struct.success.size());
                        for (Measure _iter54 : struct.success)
                        {
                            _iter54.write(oprot);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, getDatapoints_result struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0))
                {
                    {
                        org.apache.thrift.protocol.TList _list55 =
                            new org.apache.thrift.protocol.TList(
                                org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.success = new ArrayList<Measure>(_list55.size);
                        Measure _elem56;
                        for (int _i57 = 0; _i57 < _list55.size; ++_i57)
                        {
                            _elem56 = new Measure();
                            _elem56.read(iprot);
                            struct.success.add(_elem56);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class upload_args
        implements org.apache.thrift.TBase<upload_args, upload_args._Fields>, java.io.Serializable,
        Cloneable, Comparable<upload_args>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("upload_args");

        private static final org.apache.thrift.protocol.TField FILE_FIELD_DESC =
            new org.apache.thrift.protocol.TField("file", org.apache.thrift.protocol.TType.STRUCT,
                (short) 1);

        private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC =
            new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING,
                (short) 2);

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new upload_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new upload_argsTupleSchemeFactory());
        }

        public BinaryFile file; // required

        public String path; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            FILE((short) 1, "file"),
            PATH((short) 2, "path");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    case 1: // FILE
                        return FILE;
                    case 2: // PATH
                        return PATH;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.FILE,
                new org.apache.thrift.meta_data.FieldMetaData("file",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(
                        org.apache.thrift.protocol.TType.STRUCT, BinaryFile.class)));
            tmpMap.put(_Fields.PATH,
                new org.apache.thrift.meta_data.FieldMetaData("path",
                    org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(
                        org.apache.thrift.protocol.TType.STRING)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(upload_args.class,
                metaDataMap);
        }

        public upload_args()
        {
        }

        public upload_args(BinaryFile file, String path)
        {
            this();
            this.file = file;
            this.path = path;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public upload_args(upload_args other)
        {
            if (other.isSetFile())
            {
                this.file = new BinaryFile(other.file);
            }
            if (other.isSetPath())
            {
                this.path = other.path;
            }
        }

        public upload_args deepCopy()
        {
            return new upload_args(this);
        }

        @Override
        public void clear()
        {
            this.file = null;
            this.path = null;
        }

        public BinaryFile getFile()
        {
            return this.file;
        }

        public upload_args setFile(BinaryFile file)
        {
            this.file = file;
            return this;
        }

        public void unsetFile()
        {
            this.file = null;
        }

        /** Returns true if field file is set (has been assigned a value) and false otherwise */
        public boolean isSetFile()
        {
            return this.file != null;
        }

        public void setFileIsSet(boolean value)
        {
            if (!value)
            {
                this.file = null;
            }
        }

        public String getPath()
        {
            return this.path;
        }

        public upload_args setPath(String path)
        {
            this.path = path;
            return this;
        }

        public void unsetPath()
        {
            this.path = null;
        }

        /** Returns true if field path is set (has been assigned a value) and false otherwise */
        public boolean isSetPath()
        {
            return this.path != null;
        }

        public void setPathIsSet(boolean value)
        {
            if (!value)
            {
                this.path = null;
            }
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
                case FILE:
                    if (value == null)
                    {
                        unsetFile();
                    }
                    else
                    {
                        setFile((BinaryFile) value);
                    }
                    break;

                case PATH:
                    if (value == null)
                    {
                        unsetPath();
                    }
                    else
                    {
                        setPath((String) value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
                case FILE:
                    return getFile();

                case PATH:
                    return getPath();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
                case FILE:
                    return isSetFile();
                case PATH:
                    return isSetPath();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof upload_args)
                return this.equals((upload_args) that);
            return false;
        }

        public boolean equals(upload_args that)
        {
            if (that == null)
                return false;

            boolean this_present_file = true && this.isSetFile();
            boolean that_present_file = true && that.isSetFile();
            if (this_present_file || that_present_file)
            {
                if (!(this_present_file && that_present_file))
                    return false;
                if (!this.file.equals(that.file))
                    return false;
            }

            boolean this_present_path = true && this.isSetPath();
            boolean that_present_path = true && that.isSetPath();
            if (this_present_path || that_present_path)
            {
                if (!(this_present_path && that_present_path))
                    return false;
                if (!this.path.equals(that.path))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            boolean present_file = true && (isSetFile());
            list.add(present_file);
            if (present_file)
                list.add(file);

            boolean present_path = true && (isSetPath());
            list.add(present_path);
            if (present_path)
                list.add(path);

            return list.hashCode();
        }

        @Override
        public int compareTo(upload_args other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetFile()).compareTo(other.isSetFile());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetFile())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file, other.file);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetPath()).compareTo(other.isSetPath());
            if (lastComparison != 0)
            {
                return lastComparison;
            }
            if (isSetPath())
            {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
                if (lastComparison != 0)
                {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("upload_args(");
            boolean first = true;

            sb.append("file:");
            if (this.file == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.file);
            }
            first = false;
            if (!first)
                sb.append(", ");
            sb.append("path:");
            if (this.path == null)
            {
                sb.append("null");
            }
            else
            {
                sb.append(this.path);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
            if (file != null)
            {
                file.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class upload_argsStandardSchemeFactory implements SchemeFactory
        {
            public upload_argsStandardScheme getScheme()
            {
                return new upload_argsStandardScheme();
            }
        }

        private static class upload_argsStandardScheme extends StandardScheme<upload_args>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, upload_args struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        case 1: // FILE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT)
                            {
                                struct.file = new BinaryFile();
                                struct.file.read(iprot);
                                struct.setFileIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        case 2: // PATH
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING)
                            {
                                struct.path = iprot.readString();
                                struct.setPathIsSet(true);
                            }
                            else
                            {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot,
                                    schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, upload_args struct)
                throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.file != null)
                {
                    oprot.writeFieldBegin(FILE_FIELD_DESC);
                    struct.file.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.path != null)
                {
                    oprot.writeFieldBegin(PATH_FIELD_DESC);
                    oprot.writeString(struct.path);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class upload_argsTupleSchemeFactory implements SchemeFactory
        {
            public upload_argsTupleScheme getScheme()
            {
                return new upload_argsTupleScheme();
            }
        }

        private static class upload_argsTupleScheme extends TupleScheme<upload_args>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, upload_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetFile())
                {
                    optionals.set(0);
                }
                if (struct.isSetPath())
                {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetFile())
                {
                    struct.file.write(oprot);
                }
                if (struct.isSetPath())
                {
                    oprot.writeString(struct.path);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, upload_args struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0))
                {
                    struct.file = new BinaryFile();
                    struct.file.read(iprot);
                    struct.setFileIsSet(true);
                }
                if (incoming.get(1))
                {
                    struct.path = iprot.readString();
                    struct.setPathIsSet(true);
                }
            }
        }

    }

    public static class upload_result
        implements org.apache.thrift.TBase<upload_result, upload_result._Fields>,
        java.io.Serializable, Cloneable, Comparable<upload_result>
    {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC =
            new org.apache.thrift.protocol.TStruct("upload_result");

        private static final Map<Class< ? extends IScheme>, SchemeFactory> schemes =
            new HashMap<Class< ? extends IScheme>, SchemeFactory>();
        static
        {
            schemes.put(StandardScheme.class, new upload_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new upload_resultTupleSchemeFactory());
        }

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum
        {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static
            {
                for (_Fields field : EnumSet.allOf(_Fields.class))
                {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId)
            {
                switch (fieldId)
                {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId)
            {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null)
                    throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name)
            {
                return byName.get(name);
            }

            private final short _thriftId;

            private final String _fieldName;

            _Fields(short thriftId, String fieldName)
            {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId()
            {
                return _thriftId;
            }

            public String getFieldName()
            {
                return _fieldName;
            }
        }

        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static
        {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
                new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(upload_result.class,
                metaDataMap);
        }

        public upload_result()
        {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public upload_result(upload_result other)
        {
        }

        public upload_result deepCopy()
        {
            return new upload_result(this);
        }

        @Override
        public void clear()
        {
        }

        public void setFieldValue(_Fields field, Object value)
        {
            switch (field)
            {
            }
        }

        public Object getFieldValue(_Fields field)
        {
            switch (field)
            {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field)
        {
            if (field == null)
            {
                throw new IllegalArgumentException();
            }

            switch (field)
            {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that)
        {
            if (that == null)
                return false;
            if (that instanceof upload_result)
                return this.equals((upload_result) that);
            return false;
        }

        public boolean equals(upload_result that)
        {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode()
        {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(upload_result other)
        {
            if (!getClass().equals(other.getClass()))
            {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId)
        {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot)
            throws org.apache.thrift.TException
        {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot)
            throws org.apache.thrift.TException
        {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString()
        {
            StringBuilder sb = new StringBuilder("upload_result(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException
        {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException
        {
            try
            {
                write(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(out)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in)
            throws java.io.IOException, ClassNotFoundException
        {
            try
            {
                read(new org.apache.thrift.protocol.TCompactProtocol(
                    new org.apache.thrift.transport.TIOStreamTransport(in)));
            }
            catch (org.apache.thrift.TException te)
            {
                throw new java.io.IOException(te);
            }
        }

        private static class upload_resultStandardSchemeFactory implements SchemeFactory
        {
            public upload_resultStandardScheme getScheme()
            {
                return new upload_resultStandardScheme();
            }
        }

        private static class upload_resultStandardScheme extends StandardScheme<upload_result>
        {

            public void read(org.apache.thrift.protocol.TProtocol iprot, upload_result struct)
                throws org.apache.thrift.TException
            {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP)
                    {
                        break;
                    }
                    switch (schemeField.id)
                    {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, upload_result struct)
                throws org.apache.thrift.TException
            {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class upload_resultTupleSchemeFactory implements SchemeFactory
        {
            public upload_resultTupleScheme getScheme()
            {
                return new upload_resultTupleScheme();
            }
        }

        private static class upload_resultTupleScheme extends TupleScheme<upload_result>
        {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, upload_result struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, upload_result struct)
                throws org.apache.thrift.TException
            {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

}
