/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.abiquo.aimstub;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Aim {

  public interface Iface {

    public void checkRimpConfiguration() throws RimpException, org.apache.thrift.TException;

    public long getDiskFileSize(String virtualImageDatastorePath) throws RimpException, org.apache.thrift.TException;

    public List<Datastore> getDatastores() throws RimpException, org.apache.thrift.TException;

    public List<NetInterface> getNetInterfaces() throws RimpException, org.apache.thrift.TException;

    public void copyFromRepositoryToDatastore(String virtualImageRepositoryPath, String datastorePath, String virtualMachineUUID) throws RimpException, org.apache.thrift.TException;

    public void deleteVirtualImageFromDatastore(String datastorePath, String virtualMachineUUID) throws RimpException, org.apache.thrift.TException;

    public void copyFromDatastoreToRepository(String virtualMachineUUID, String snapshot, String destinationRepositoryPath, String sourceDatastorePath) throws RimpException, org.apache.thrift.TException;

    public void createVLAN(int vlanTag, String vlanInterface, String bridgeInterface) throws VLanException, org.apache.thrift.TException;

    public void deleteVLAN(int vlanTag, String vlanInterface, String bridgeInterface) throws VLanException, org.apache.thrift.TException;

    public void checkVLANConfiguration() throws VLanException, org.apache.thrift.TException;

    public String getInitiatorIQN() throws StorageException, org.apache.thrift.TException;

    public void rescanISCSI(List<String> targets) throws StorageException, org.apache.thrift.TException;

    public NodeInfo getNodeInfo() throws LibvirtException, org.apache.thrift.TException;

    public List<DomainInfo> getDomains() throws LibvirtException, org.apache.thrift.TException;

    public void defineDomain(String xmlDesc) throws LibvirtException, org.apache.thrift.TException;

    public void undefineDomain(String domainName) throws LibvirtException, org.apache.thrift.TException;

    public boolean existDomain(String domainName) throws org.apache.thrift.TException;

    public DomainState getDomainState(String domainName) throws LibvirtException, org.apache.thrift.TException;

    public DomainInfo getDomainInfo(String domainName) throws LibvirtException, org.apache.thrift.TException;

    public void powerOn(String domainName) throws LibvirtException, org.apache.thrift.TException;

    public void powerOff(String domainName) throws LibvirtException, org.apache.thrift.TException;

    public void reset(String domainName) throws LibvirtException, org.apache.thrift.TException;

    public void pause(String domainName) throws LibvirtException, org.apache.thrift.TException;

    public void resume(String domainName) throws LibvirtException, org.apache.thrift.TException;

    public void createStoragePool(String xmlDesc) throws LibvirtException, org.apache.thrift.TException;

    public void resizeDisk(String domainName, String diskPath, double diskSizeInKb) throws LibvirtException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void checkRimpConfiguration(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.checkRimpConfiguration_call> resultHandler) throws org.apache.thrift.TException;

    public void getDiskFileSize(String virtualImageDatastorePath, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getDiskFileSize_call> resultHandler) throws org.apache.thrift.TException;

    public void getDatastores(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getDatastores_call> resultHandler) throws org.apache.thrift.TException;

    public void getNetInterfaces(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getNetInterfaces_call> resultHandler) throws org.apache.thrift.TException;

    public void copyFromRepositoryToDatastore(String virtualImageRepositoryPath, String datastorePath, String virtualMachineUUID, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.copyFromRepositoryToDatastore_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteVirtualImageFromDatastore(String datastorePath, String virtualMachineUUID, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteVirtualImageFromDatastore_call> resultHandler) throws org.apache.thrift.TException;

    public void copyFromDatastoreToRepository(String virtualMachineUUID, String snapshot, String destinationRepositoryPath, String sourceDatastorePath, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.copyFromDatastoreToRepository_call> resultHandler) throws org.apache.thrift.TException;

    public void createVLAN(int vlanTag, String vlanInterface, String bridgeInterface, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.createVLAN_call> resultHandler) throws org.apache.thrift.TException;

    public void deleteVLAN(int vlanTag, String vlanInterface, String bridgeInterface, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.deleteVLAN_call> resultHandler) throws org.apache.thrift.TException;

    public void checkVLANConfiguration(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.checkVLANConfiguration_call> resultHandler) throws org.apache.thrift.TException;

    public void getInitiatorIQN(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getInitiatorIQN_call> resultHandler) throws org.apache.thrift.TException;

    public void rescanISCSI(List<String> targets, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.rescanISCSI_call> resultHandler) throws org.apache.thrift.TException;

    public void getNodeInfo(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getNodeInfo_call> resultHandler) throws org.apache.thrift.TException;

    public void getDomains(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getDomains_call> resultHandler) throws org.apache.thrift.TException;

    public void defineDomain(String xmlDesc, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.defineDomain_call> resultHandler) throws org.apache.thrift.TException;

    public void undefineDomain(String domainName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.undefineDomain_call> resultHandler) throws org.apache.thrift.TException;

    public void existDomain(String domainName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.existDomain_call> resultHandler) throws org.apache.thrift.TException;

    public void getDomainState(String domainName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getDomainState_call> resultHandler) throws org.apache.thrift.TException;

    public void getDomainInfo(String domainName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getDomainInfo_call> resultHandler) throws org.apache.thrift.TException;

    public void powerOn(String domainName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.powerOn_call> resultHandler) throws org.apache.thrift.TException;

    public void powerOff(String domainName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.powerOff_call> resultHandler) throws org.apache.thrift.TException;

    public void reset(String domainName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.reset_call> resultHandler) throws org.apache.thrift.TException;

    public void pause(String domainName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.pause_call> resultHandler) throws org.apache.thrift.TException;

    public void resume(String domainName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.resume_call> resultHandler) throws org.apache.thrift.TException;

    public void createStoragePool(String xmlDesc, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.createStoragePool_call> resultHandler) throws org.apache.thrift.TException;

    public void resizeDisk(String domainName, String diskPath, double diskSizeInKb, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.resizeDisk_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void checkRimpConfiguration() throws RimpException, org.apache.thrift.TException
    {
      send_checkRimpConfiguration();
      recv_checkRimpConfiguration();
    }

    public void send_checkRimpConfiguration() throws org.apache.thrift.TException
    {
      checkRimpConfiguration_args args = new checkRimpConfiguration_args();
      sendBase("checkRimpConfiguration", args);
    }

    public void recv_checkRimpConfiguration() throws RimpException, org.apache.thrift.TException
    {
      checkRimpConfiguration_result result = new checkRimpConfiguration_result();
      receiveBase(result, "checkRimpConfiguration");
      if (result.re != null) {
        throw result.re;
      }
      return;
    }

    public long getDiskFileSize(String virtualImageDatastorePath) throws RimpException, org.apache.thrift.TException
    {
      send_getDiskFileSize(virtualImageDatastorePath);
      return recv_getDiskFileSize();
    }

    public void send_getDiskFileSize(String virtualImageDatastorePath) throws org.apache.thrift.TException
    {
      getDiskFileSize_args args = new getDiskFileSize_args();
      args.setVirtualImageDatastorePath(virtualImageDatastorePath);
      sendBase("getDiskFileSize", args);
    }

    public long recv_getDiskFileSize() throws RimpException, org.apache.thrift.TException
    {
      getDiskFileSize_result result = new getDiskFileSize_result();
      receiveBase(result, "getDiskFileSize");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDiskFileSize failed: unknown result");
    }

    public List<Datastore> getDatastores() throws RimpException, org.apache.thrift.TException
    {
      send_getDatastores();
      return recv_getDatastores();
    }

    public void send_getDatastores() throws org.apache.thrift.TException
    {
      getDatastores_args args = new getDatastores_args();
      sendBase("getDatastores", args);
    }

    public List<Datastore> recv_getDatastores() throws RimpException, org.apache.thrift.TException
    {
      getDatastores_result result = new getDatastores_result();
      receiveBase(result, "getDatastores");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDatastores failed: unknown result");
    }

    public List<NetInterface> getNetInterfaces() throws RimpException, org.apache.thrift.TException
    {
      send_getNetInterfaces();
      return recv_getNetInterfaces();
    }

    public void send_getNetInterfaces() throws org.apache.thrift.TException
    {
      getNetInterfaces_args args = new getNetInterfaces_args();
      sendBase("getNetInterfaces", args);
    }

    public List<NetInterface> recv_getNetInterfaces() throws RimpException, org.apache.thrift.TException
    {
      getNetInterfaces_result result = new getNetInterfaces_result();
      receiveBase(result, "getNetInterfaces");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNetInterfaces failed: unknown result");
    }

    public void copyFromRepositoryToDatastore(String virtualImageRepositoryPath, String datastorePath, String virtualMachineUUID) throws RimpException, org.apache.thrift.TException
    {
      send_copyFromRepositoryToDatastore(virtualImageRepositoryPath, datastorePath, virtualMachineUUID);
      recv_copyFromRepositoryToDatastore();
    }

    public void send_copyFromRepositoryToDatastore(String virtualImageRepositoryPath, String datastorePath, String virtualMachineUUID) throws org.apache.thrift.TException
    {
      copyFromRepositoryToDatastore_args args = new copyFromRepositoryToDatastore_args();
      args.setVirtualImageRepositoryPath(virtualImageRepositoryPath);
      args.setDatastorePath(datastorePath);
      args.setVirtualMachineUUID(virtualMachineUUID);
      sendBase("copyFromRepositoryToDatastore", args);
    }

    public void recv_copyFromRepositoryToDatastore() throws RimpException, org.apache.thrift.TException
    {
      copyFromRepositoryToDatastore_result result = new copyFromRepositoryToDatastore_result();
      receiveBase(result, "copyFromRepositoryToDatastore");
      if (result.re != null) {
        throw result.re;
      }
      return;
    }

    public void deleteVirtualImageFromDatastore(String datastorePath, String virtualMachineUUID) throws RimpException, org.apache.thrift.TException
    {
      send_deleteVirtualImageFromDatastore(datastorePath, virtualMachineUUID);
      recv_deleteVirtualImageFromDatastore();
    }

    public void send_deleteVirtualImageFromDatastore(String datastorePath, String virtualMachineUUID) throws org.apache.thrift.TException
    {
      deleteVirtualImageFromDatastore_args args = new deleteVirtualImageFromDatastore_args();
      args.setDatastorePath(datastorePath);
      args.setVirtualMachineUUID(virtualMachineUUID);
      sendBase("deleteVirtualImageFromDatastore", args);
    }

    public void recv_deleteVirtualImageFromDatastore() throws RimpException, org.apache.thrift.TException
    {
      deleteVirtualImageFromDatastore_result result = new deleteVirtualImageFromDatastore_result();
      receiveBase(result, "deleteVirtualImageFromDatastore");
      if (result.re != null) {
        throw result.re;
      }
      return;
    }

    public void copyFromDatastoreToRepository(String virtualMachineUUID, String snapshot, String destinationRepositoryPath, String sourceDatastorePath) throws RimpException, org.apache.thrift.TException
    {
      send_copyFromDatastoreToRepository(virtualMachineUUID, snapshot, destinationRepositoryPath, sourceDatastorePath);
      recv_copyFromDatastoreToRepository();
    }

    public void send_copyFromDatastoreToRepository(String virtualMachineUUID, String snapshot, String destinationRepositoryPath, String sourceDatastorePath) throws org.apache.thrift.TException
    {
      copyFromDatastoreToRepository_args args = new copyFromDatastoreToRepository_args();
      args.setVirtualMachineUUID(virtualMachineUUID);
      args.setSnapshot(snapshot);
      args.setDestinationRepositoryPath(destinationRepositoryPath);
      args.setSourceDatastorePath(sourceDatastorePath);
      sendBase("copyFromDatastoreToRepository", args);
    }

    public void recv_copyFromDatastoreToRepository() throws RimpException, org.apache.thrift.TException
    {
      copyFromDatastoreToRepository_result result = new copyFromDatastoreToRepository_result();
      receiveBase(result, "copyFromDatastoreToRepository");
      if (result.re != null) {
        throw result.re;
      }
      return;
    }

    public void createVLAN(int vlanTag, String vlanInterface, String bridgeInterface) throws VLanException, org.apache.thrift.TException
    {
      send_createVLAN(vlanTag, vlanInterface, bridgeInterface);
      recv_createVLAN();
    }

    public void send_createVLAN(int vlanTag, String vlanInterface, String bridgeInterface) throws org.apache.thrift.TException
    {
      createVLAN_args args = new createVLAN_args();
      args.setVlanTag(vlanTag);
      args.setVlanInterface(vlanInterface);
      args.setBridgeInterface(bridgeInterface);
      sendBase("createVLAN", args);
    }

    public void recv_createVLAN() throws VLanException, org.apache.thrift.TException
    {
      createVLAN_result result = new createVLAN_result();
      receiveBase(result, "createVLAN");
      if (result.ve != null) {
        throw result.ve;
      }
      return;
    }

    public void deleteVLAN(int vlanTag, String vlanInterface, String bridgeInterface) throws VLanException, org.apache.thrift.TException
    {
      send_deleteVLAN(vlanTag, vlanInterface, bridgeInterface);
      recv_deleteVLAN();
    }

    public void send_deleteVLAN(int vlanTag, String vlanInterface, String bridgeInterface) throws org.apache.thrift.TException
    {
      deleteVLAN_args args = new deleteVLAN_args();
      args.setVlanTag(vlanTag);
      args.setVlanInterface(vlanInterface);
      args.setBridgeInterface(bridgeInterface);
      sendBase("deleteVLAN", args);
    }

    public void recv_deleteVLAN() throws VLanException, org.apache.thrift.TException
    {
      deleteVLAN_result result = new deleteVLAN_result();
      receiveBase(result, "deleteVLAN");
      if (result.ve != null) {
        throw result.ve;
      }
      return;
    }

    public void checkVLANConfiguration() throws VLanException, org.apache.thrift.TException
    {
      send_checkVLANConfiguration();
      recv_checkVLANConfiguration();
    }

    public void send_checkVLANConfiguration() throws org.apache.thrift.TException
    {
      checkVLANConfiguration_args args = new checkVLANConfiguration_args();
      sendBase("checkVLANConfiguration", args);
    }

    public void recv_checkVLANConfiguration() throws VLanException, org.apache.thrift.TException
    {
      checkVLANConfiguration_result result = new checkVLANConfiguration_result();
      receiveBase(result, "checkVLANConfiguration");
      if (result.ve != null) {
        throw result.ve;
      }
      return;
    }

    public String getInitiatorIQN() throws StorageException, org.apache.thrift.TException
    {
      send_getInitiatorIQN();
      return recv_getInitiatorIQN();
    }

    public void send_getInitiatorIQN() throws org.apache.thrift.TException
    {
      getInitiatorIQN_args args = new getInitiatorIQN_args();
      sendBase("getInitiatorIQN", args);
    }

    public String recv_getInitiatorIQN() throws StorageException, org.apache.thrift.TException
    {
      getInitiatorIQN_result result = new getInitiatorIQN_result();
      receiveBase(result, "getInitiatorIQN");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.se != null) {
        throw result.se;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getInitiatorIQN failed: unknown result");
    }

    public void rescanISCSI(List<String> targets) throws StorageException, org.apache.thrift.TException
    {
      send_rescanISCSI(targets);
      recv_rescanISCSI();
    }

    public void send_rescanISCSI(List<String> targets) throws org.apache.thrift.TException
    {
      rescanISCSI_args args = new rescanISCSI_args();
      args.setTargets(targets);
      sendBase("rescanISCSI", args);
    }

    public void recv_rescanISCSI() throws StorageException, org.apache.thrift.TException
    {
      rescanISCSI_result result = new rescanISCSI_result();
      receiveBase(result, "rescanISCSI");
      if (result.se != null) {
        throw result.se;
      }
      return;
    }

    public NodeInfo getNodeInfo() throws LibvirtException, org.apache.thrift.TException
    {
      send_getNodeInfo();
      return recv_getNodeInfo();
    }

    public void send_getNodeInfo() throws org.apache.thrift.TException
    {
      getNodeInfo_args args = new getNodeInfo_args();
      sendBase("getNodeInfo", args);
    }

    public NodeInfo recv_getNodeInfo() throws LibvirtException, org.apache.thrift.TException
    {
      getNodeInfo_result result = new getNodeInfo_result();
      receiveBase(result, "getNodeInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.libvirtException != null) {
        throw result.libvirtException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNodeInfo failed: unknown result");
    }

    public List<DomainInfo> getDomains() throws LibvirtException, org.apache.thrift.TException
    {
      send_getDomains();
      return recv_getDomains();
    }

    public void send_getDomains() throws org.apache.thrift.TException
    {
      getDomains_args args = new getDomains_args();
      sendBase("getDomains", args);
    }

    public List<DomainInfo> recv_getDomains() throws LibvirtException, org.apache.thrift.TException
    {
      getDomains_result result = new getDomains_result();
      receiveBase(result, "getDomains");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.libvirtException != null) {
        throw result.libvirtException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDomains failed: unknown result");
    }

    public void defineDomain(String xmlDesc) throws LibvirtException, org.apache.thrift.TException
    {
      send_defineDomain(xmlDesc);
      recv_defineDomain();
    }

    public void send_defineDomain(String xmlDesc) throws org.apache.thrift.TException
    {
      defineDomain_args args = new defineDomain_args();
      args.setXmlDesc(xmlDesc);
      sendBase("defineDomain", args);
    }

    public void recv_defineDomain() throws LibvirtException, org.apache.thrift.TException
    {
      defineDomain_result result = new defineDomain_result();
      receiveBase(result, "defineDomain");
      if (result.libvirtException != null) {
        throw result.libvirtException;
      }
      return;
    }

    public void undefineDomain(String domainName) throws LibvirtException, org.apache.thrift.TException
    {
      send_undefineDomain(domainName);
      recv_undefineDomain();
    }

    public void send_undefineDomain(String domainName) throws org.apache.thrift.TException
    {
      undefineDomain_args args = new undefineDomain_args();
      args.setDomainName(domainName);
      sendBase("undefineDomain", args);
    }

    public void recv_undefineDomain() throws LibvirtException, org.apache.thrift.TException
    {
      undefineDomain_result result = new undefineDomain_result();
      receiveBase(result, "undefineDomain");
      if (result.libvirtException != null) {
        throw result.libvirtException;
      }
      return;
    }

    public boolean existDomain(String domainName) throws org.apache.thrift.TException
    {
      send_existDomain(domainName);
      return recv_existDomain();
    }

    public void send_existDomain(String domainName) throws org.apache.thrift.TException
    {
      existDomain_args args = new existDomain_args();
      args.setDomainName(domainName);
      sendBase("existDomain", args);
    }

    public boolean recv_existDomain() throws org.apache.thrift.TException
    {
      existDomain_result result = new existDomain_result();
      receiveBase(result, "existDomain");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "existDomain failed: unknown result");
    }

    public DomainState getDomainState(String domainName) throws LibvirtException, org.apache.thrift.TException
    {
      send_getDomainState(domainName);
      return recv_getDomainState();
    }

    public void send_getDomainState(String domainName) throws org.apache.thrift.TException
    {
      getDomainState_args args = new getDomainState_args();
      args.setDomainName(domainName);
      sendBase("getDomainState", args);
    }

    public DomainState recv_getDomainState() throws LibvirtException, org.apache.thrift.TException
    {
      getDomainState_result result = new getDomainState_result();
      receiveBase(result, "getDomainState");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.libvirtException != null) {
        throw result.libvirtException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDomainState failed: unknown result");
    }

    public DomainInfo getDomainInfo(String domainName) throws LibvirtException, org.apache.thrift.TException
    {
      send_getDomainInfo(domainName);
      return recv_getDomainInfo();
    }

    public void send_getDomainInfo(String domainName) throws org.apache.thrift.TException
    {
      getDomainInfo_args args = new getDomainInfo_args();
      args.setDomainName(domainName);
      sendBase("getDomainInfo", args);
    }

    public DomainInfo recv_getDomainInfo() throws LibvirtException, org.apache.thrift.TException
    {
      getDomainInfo_result result = new getDomainInfo_result();
      receiveBase(result, "getDomainInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.libvirtException != null) {
        throw result.libvirtException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDomainInfo failed: unknown result");
    }

    public void powerOn(String domainName) throws LibvirtException, org.apache.thrift.TException
    {
      send_powerOn(domainName);
      recv_powerOn();
    }

    public void send_powerOn(String domainName) throws org.apache.thrift.TException
    {
      powerOn_args args = new powerOn_args();
      args.setDomainName(domainName);
      sendBase("powerOn", args);
    }

    public void recv_powerOn() throws LibvirtException, org.apache.thrift.TException
    {
      powerOn_result result = new powerOn_result();
      receiveBase(result, "powerOn");
      if (result.libvirtException != null) {
        throw result.libvirtException;
      }
      return;
    }

    public void powerOff(String domainName) throws LibvirtException, org.apache.thrift.TException
    {
      send_powerOff(domainName);
      recv_powerOff();
    }

    public void send_powerOff(String domainName) throws org.apache.thrift.TException
    {
      powerOff_args args = new powerOff_args();
      args.setDomainName(domainName);
      sendBase("powerOff", args);
    }

    public void recv_powerOff() throws LibvirtException, org.apache.thrift.TException
    {
      powerOff_result result = new powerOff_result();
      receiveBase(result, "powerOff");
      if (result.libvirtException != null) {
        throw result.libvirtException;
      }
      return;
    }

    public void reset(String domainName) throws LibvirtException, org.apache.thrift.TException
    {
      send_reset(domainName);
      recv_reset();
    }

    public void send_reset(String domainName) throws org.apache.thrift.TException
    {
      reset_args args = new reset_args();
      args.setDomainName(domainName);
      sendBase("reset", args);
    }

    public void recv_reset() throws LibvirtException, org.apache.thrift.TException
    {
      reset_result result = new reset_result();
      receiveBase(result, "reset");
      if (result.libvirtException != null) {
        throw result.libvirtException;
      }
      return;
    }

    public void pause(String domainName) throws LibvirtException, org.apache.thrift.TException
    {
      send_pause(domainName);
      recv_pause();
    }

    public void send_pause(String domainName) throws org.apache.thrift.TException
    {
      pause_args args = new pause_args();
      args.setDomainName(domainName);
      sendBase("pause", args);
    }

    public void recv_pause() throws LibvirtException, org.apache.thrift.TException
    {
      pause_result result = new pause_result();
      receiveBase(result, "pause");
      if (result.libvirtException != null) {
        throw result.libvirtException;
      }
      return;
    }

    public void resume(String domainName) throws LibvirtException, org.apache.thrift.TException
    {
      send_resume(domainName);
      recv_resume();
    }

    public void send_resume(String domainName) throws org.apache.thrift.TException
    {
      resume_args args = new resume_args();
      args.setDomainName(domainName);
      sendBase("resume", args);
    }

    public void recv_resume() throws LibvirtException, org.apache.thrift.TException
    {
      resume_result result = new resume_result();
      receiveBase(result, "resume");
      if (result.libvirtException != null) {
        throw result.libvirtException;
      }
      return;
    }

    public void createStoragePool(String xmlDesc) throws LibvirtException, org.apache.thrift.TException
    {
      send_createStoragePool(xmlDesc);
      recv_createStoragePool();
    }

    public void send_createStoragePool(String xmlDesc) throws org.apache.thrift.TException
    {
      createStoragePool_args args = new createStoragePool_args();
      args.setXmlDesc(xmlDesc);
      sendBase("createStoragePool", args);
    }

    public void recv_createStoragePool() throws LibvirtException, org.apache.thrift.TException
    {
      createStoragePool_result result = new createStoragePool_result();
      receiveBase(result, "createStoragePool");
      if (result.libvirtException != null) {
        throw result.libvirtException;
      }
      return;
    }

    public void resizeDisk(String domainName, String diskPath, double diskSizeInKb) throws LibvirtException, org.apache.thrift.TException
    {
      send_resizeDisk(domainName, diskPath, diskSizeInKb);
      recv_resizeDisk();
    }

    public void send_resizeDisk(String domainName, String diskPath, double diskSizeInKb) throws org.apache.thrift.TException
    {
      resizeDisk_args args = new resizeDisk_args();
      args.setDomainName(domainName);
      args.setDiskPath(diskPath);
      args.setDiskSizeInKb(diskSizeInKb);
      sendBase("resizeDisk", args);
    }

    public void recv_resizeDisk() throws LibvirtException, org.apache.thrift.TException
    {
      resizeDisk_result result = new resizeDisk_result();
      receiveBase(result, "resizeDisk");
      if (result.libvirtException != null) {
        throw result.libvirtException;
      }
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void checkRimpConfiguration(org.apache.thrift.async.AsyncMethodCallback<checkRimpConfiguration_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkRimpConfiguration_call method_call = new checkRimpConfiguration_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkRimpConfiguration_call extends org.apache.thrift.async.TAsyncMethodCall {
      public checkRimpConfiguration_call(org.apache.thrift.async.AsyncMethodCallback<checkRimpConfiguration_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkRimpConfiguration", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkRimpConfiguration_args args = new checkRimpConfiguration_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws RimpException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_checkRimpConfiguration();
      }
    }

    public void getDiskFileSize(String virtualImageDatastorePath, org.apache.thrift.async.AsyncMethodCallback<getDiskFileSize_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDiskFileSize_call method_call = new getDiskFileSize_call(virtualImageDatastorePath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDiskFileSize_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String virtualImageDatastorePath;
      public getDiskFileSize_call(String virtualImageDatastorePath, org.apache.thrift.async.AsyncMethodCallback<getDiskFileSize_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.virtualImageDatastorePath = virtualImageDatastorePath;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDiskFileSize", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDiskFileSize_args args = new getDiskFileSize_args();
        args.setVirtualImageDatastorePath(virtualImageDatastorePath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws RimpException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDiskFileSize();
      }
    }

    public void getDatastores(org.apache.thrift.async.AsyncMethodCallback<getDatastores_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDatastores_call method_call = new getDatastores_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDatastores_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getDatastores_call(org.apache.thrift.async.AsyncMethodCallback<getDatastores_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDatastores", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDatastores_args args = new getDatastores_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Datastore> getResult() throws RimpException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDatastores();
      }
    }

    public void getNetInterfaces(org.apache.thrift.async.AsyncMethodCallback<getNetInterfaces_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNetInterfaces_call method_call = new getNetInterfaces_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNetInterfaces_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getNetInterfaces_call(org.apache.thrift.async.AsyncMethodCallback<getNetInterfaces_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNetInterfaces", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNetInterfaces_args args = new getNetInterfaces_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<NetInterface> getResult() throws RimpException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getNetInterfaces();
      }
    }

    public void copyFromRepositoryToDatastore(String virtualImageRepositoryPath, String datastorePath, String virtualMachineUUID, org.apache.thrift.async.AsyncMethodCallback<copyFromRepositoryToDatastore_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      copyFromRepositoryToDatastore_call method_call = new copyFromRepositoryToDatastore_call(virtualImageRepositoryPath, datastorePath, virtualMachineUUID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class copyFromRepositoryToDatastore_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String virtualImageRepositoryPath;
      private String datastorePath;
      private String virtualMachineUUID;
      public copyFromRepositoryToDatastore_call(String virtualImageRepositoryPath, String datastorePath, String virtualMachineUUID, org.apache.thrift.async.AsyncMethodCallback<copyFromRepositoryToDatastore_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.virtualImageRepositoryPath = virtualImageRepositoryPath;
        this.datastorePath = datastorePath;
        this.virtualMachineUUID = virtualMachineUUID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("copyFromRepositoryToDatastore", org.apache.thrift.protocol.TMessageType.CALL, 0));
        copyFromRepositoryToDatastore_args args = new copyFromRepositoryToDatastore_args();
        args.setVirtualImageRepositoryPath(virtualImageRepositoryPath);
        args.setDatastorePath(datastorePath);
        args.setVirtualMachineUUID(virtualMachineUUID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws RimpException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_copyFromRepositoryToDatastore();
      }
    }

    public void deleteVirtualImageFromDatastore(String datastorePath, String virtualMachineUUID, org.apache.thrift.async.AsyncMethodCallback<deleteVirtualImageFromDatastore_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteVirtualImageFromDatastore_call method_call = new deleteVirtualImageFromDatastore_call(datastorePath, virtualMachineUUID, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteVirtualImageFromDatastore_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String datastorePath;
      private String virtualMachineUUID;
      public deleteVirtualImageFromDatastore_call(String datastorePath, String virtualMachineUUID, org.apache.thrift.async.AsyncMethodCallback<deleteVirtualImageFromDatastore_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.datastorePath = datastorePath;
        this.virtualMachineUUID = virtualMachineUUID;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteVirtualImageFromDatastore", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteVirtualImageFromDatastore_args args = new deleteVirtualImageFromDatastore_args();
        args.setDatastorePath(datastorePath);
        args.setVirtualMachineUUID(virtualMachineUUID);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws RimpException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteVirtualImageFromDatastore();
      }
    }

    public void copyFromDatastoreToRepository(String virtualMachineUUID, String snapshot, String destinationRepositoryPath, String sourceDatastorePath, org.apache.thrift.async.AsyncMethodCallback<copyFromDatastoreToRepository_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      copyFromDatastoreToRepository_call method_call = new copyFromDatastoreToRepository_call(virtualMachineUUID, snapshot, destinationRepositoryPath, sourceDatastorePath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class copyFromDatastoreToRepository_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String virtualMachineUUID;
      private String snapshot;
      private String destinationRepositoryPath;
      private String sourceDatastorePath;
      public copyFromDatastoreToRepository_call(String virtualMachineUUID, String snapshot, String destinationRepositoryPath, String sourceDatastorePath, org.apache.thrift.async.AsyncMethodCallback<copyFromDatastoreToRepository_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.virtualMachineUUID = virtualMachineUUID;
        this.snapshot = snapshot;
        this.destinationRepositoryPath = destinationRepositoryPath;
        this.sourceDatastorePath = sourceDatastorePath;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("copyFromDatastoreToRepository", org.apache.thrift.protocol.TMessageType.CALL, 0));
        copyFromDatastoreToRepository_args args = new copyFromDatastoreToRepository_args();
        args.setVirtualMachineUUID(virtualMachineUUID);
        args.setSnapshot(snapshot);
        args.setDestinationRepositoryPath(destinationRepositoryPath);
        args.setSourceDatastorePath(sourceDatastorePath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws RimpException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_copyFromDatastoreToRepository();
      }
    }

    public void createVLAN(int vlanTag, String vlanInterface, String bridgeInterface, org.apache.thrift.async.AsyncMethodCallback<createVLAN_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createVLAN_call method_call = new createVLAN_call(vlanTag, vlanInterface, bridgeInterface, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createVLAN_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int vlanTag;
      private String vlanInterface;
      private String bridgeInterface;
      public createVLAN_call(int vlanTag, String vlanInterface, String bridgeInterface, org.apache.thrift.async.AsyncMethodCallback<createVLAN_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vlanTag = vlanTag;
        this.vlanInterface = vlanInterface;
        this.bridgeInterface = bridgeInterface;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createVLAN", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createVLAN_args args = new createVLAN_args();
        args.setVlanTag(vlanTag);
        args.setVlanInterface(vlanInterface);
        args.setBridgeInterface(bridgeInterface);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws VLanException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_createVLAN();
      }
    }

    public void deleteVLAN(int vlanTag, String vlanInterface, String bridgeInterface, org.apache.thrift.async.AsyncMethodCallback<deleteVLAN_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteVLAN_call method_call = new deleteVLAN_call(vlanTag, vlanInterface, bridgeInterface, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteVLAN_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int vlanTag;
      private String vlanInterface;
      private String bridgeInterface;
      public deleteVLAN_call(int vlanTag, String vlanInterface, String bridgeInterface, org.apache.thrift.async.AsyncMethodCallback<deleteVLAN_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.vlanTag = vlanTag;
        this.vlanInterface = vlanInterface;
        this.bridgeInterface = bridgeInterface;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteVLAN", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteVLAN_args args = new deleteVLAN_args();
        args.setVlanTag(vlanTag);
        args.setVlanInterface(vlanInterface);
        args.setBridgeInterface(bridgeInterface);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws VLanException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteVLAN();
      }
    }

    public void checkVLANConfiguration(org.apache.thrift.async.AsyncMethodCallback<checkVLANConfiguration_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkVLANConfiguration_call method_call = new checkVLANConfiguration_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkVLANConfiguration_call extends org.apache.thrift.async.TAsyncMethodCall {
      public checkVLANConfiguration_call(org.apache.thrift.async.AsyncMethodCallback<checkVLANConfiguration_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkVLANConfiguration", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkVLANConfiguration_args args = new checkVLANConfiguration_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws VLanException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_checkVLANConfiguration();
      }
    }

    public void getInitiatorIQN(org.apache.thrift.async.AsyncMethodCallback<getInitiatorIQN_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getInitiatorIQN_call method_call = new getInitiatorIQN_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getInitiatorIQN_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getInitiatorIQN_call(org.apache.thrift.async.AsyncMethodCallback<getInitiatorIQN_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getInitiatorIQN", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getInitiatorIQN_args args = new getInitiatorIQN_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws StorageException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getInitiatorIQN();
      }
    }

    public void rescanISCSI(List<String> targets, org.apache.thrift.async.AsyncMethodCallback<rescanISCSI_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rescanISCSI_call method_call = new rescanISCSI_call(targets, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rescanISCSI_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> targets;
      public rescanISCSI_call(List<String> targets, org.apache.thrift.async.AsyncMethodCallback<rescanISCSI_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.targets = targets;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rescanISCSI", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rescanISCSI_args args = new rescanISCSI_args();
        args.setTargets(targets);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws StorageException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_rescanISCSI();
      }
    }

    public void getNodeInfo(org.apache.thrift.async.AsyncMethodCallback<getNodeInfo_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNodeInfo_call method_call = new getNodeInfo_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNodeInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getNodeInfo_call(org.apache.thrift.async.AsyncMethodCallback<getNodeInfo_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNodeInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNodeInfo_args args = new getNodeInfo_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public NodeInfo getResult() throws LibvirtException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getNodeInfo();
      }
    }

    public void getDomains(org.apache.thrift.async.AsyncMethodCallback<getDomains_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDomains_call method_call = new getDomains_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDomains_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getDomains_call(org.apache.thrift.async.AsyncMethodCallback<getDomains_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDomains", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDomains_args args = new getDomains_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<DomainInfo> getResult() throws LibvirtException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDomains();
      }
    }

    public void defineDomain(String xmlDesc, org.apache.thrift.async.AsyncMethodCallback<defineDomain_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      defineDomain_call method_call = new defineDomain_call(xmlDesc, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class defineDomain_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String xmlDesc;
      public defineDomain_call(String xmlDesc, org.apache.thrift.async.AsyncMethodCallback<defineDomain_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.xmlDesc = xmlDesc;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("defineDomain", org.apache.thrift.protocol.TMessageType.CALL, 0));
        defineDomain_args args = new defineDomain_args();
        args.setXmlDesc(xmlDesc);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws LibvirtException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_defineDomain();
      }
    }

    public void undefineDomain(String domainName, org.apache.thrift.async.AsyncMethodCallback<undefineDomain_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      undefineDomain_call method_call = new undefineDomain_call(domainName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class undefineDomain_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String domainName;
      public undefineDomain_call(String domainName, org.apache.thrift.async.AsyncMethodCallback<undefineDomain_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.domainName = domainName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("undefineDomain", org.apache.thrift.protocol.TMessageType.CALL, 0));
        undefineDomain_args args = new undefineDomain_args();
        args.setDomainName(domainName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws LibvirtException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_undefineDomain();
      }
    }

    public void existDomain(String domainName, org.apache.thrift.async.AsyncMethodCallback<existDomain_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      existDomain_call method_call = new existDomain_call(domainName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class existDomain_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String domainName;
      public existDomain_call(String domainName, org.apache.thrift.async.AsyncMethodCallback<existDomain_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.domainName = domainName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("existDomain", org.apache.thrift.protocol.TMessageType.CALL, 0));
        existDomain_args args = new existDomain_args();
        args.setDomainName(domainName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_existDomain();
      }
    }

    public void getDomainState(String domainName, org.apache.thrift.async.AsyncMethodCallback<getDomainState_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDomainState_call method_call = new getDomainState_call(domainName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDomainState_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String domainName;
      public getDomainState_call(String domainName, org.apache.thrift.async.AsyncMethodCallback<getDomainState_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.domainName = domainName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDomainState", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDomainState_args args = new getDomainState_args();
        args.setDomainName(domainName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public DomainState getResult() throws LibvirtException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDomainState();
      }
    }

    public void getDomainInfo(String domainName, org.apache.thrift.async.AsyncMethodCallback<getDomainInfo_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDomainInfo_call method_call = new getDomainInfo_call(domainName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDomainInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String domainName;
      public getDomainInfo_call(String domainName, org.apache.thrift.async.AsyncMethodCallback<getDomainInfo_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.domainName = domainName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDomainInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDomainInfo_args args = new getDomainInfo_args();
        args.setDomainName(domainName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public DomainInfo getResult() throws LibvirtException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDomainInfo();
      }
    }

    public void powerOn(String domainName, org.apache.thrift.async.AsyncMethodCallback<powerOn_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      powerOn_call method_call = new powerOn_call(domainName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class powerOn_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String domainName;
      public powerOn_call(String domainName, org.apache.thrift.async.AsyncMethodCallback<powerOn_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.domainName = domainName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("powerOn", org.apache.thrift.protocol.TMessageType.CALL, 0));
        powerOn_args args = new powerOn_args();
        args.setDomainName(domainName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws LibvirtException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_powerOn();
      }
    }

    public void powerOff(String domainName, org.apache.thrift.async.AsyncMethodCallback<powerOff_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      powerOff_call method_call = new powerOff_call(domainName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class powerOff_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String domainName;
      public powerOff_call(String domainName, org.apache.thrift.async.AsyncMethodCallback<powerOff_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.domainName = domainName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("powerOff", org.apache.thrift.protocol.TMessageType.CALL, 0));
        powerOff_args args = new powerOff_args();
        args.setDomainName(domainName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws LibvirtException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_powerOff();
      }
    }

    public void reset(String domainName, org.apache.thrift.async.AsyncMethodCallback<reset_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reset_call method_call = new reset_call(domainName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reset_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String domainName;
      public reset_call(String domainName, org.apache.thrift.async.AsyncMethodCallback<reset_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.domainName = domainName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reset", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reset_args args = new reset_args();
        args.setDomainName(domainName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws LibvirtException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_reset();
      }
    }

    public void pause(String domainName, org.apache.thrift.async.AsyncMethodCallback<pause_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      pause_call method_call = new pause_call(domainName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class pause_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String domainName;
      public pause_call(String domainName, org.apache.thrift.async.AsyncMethodCallback<pause_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.domainName = domainName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pause", org.apache.thrift.protocol.TMessageType.CALL, 0));
        pause_args args = new pause_args();
        args.setDomainName(domainName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws LibvirtException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_pause();
      }
    }

    public void resume(String domainName, org.apache.thrift.async.AsyncMethodCallback<resume_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      resume_call method_call = new resume_call(domainName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class resume_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String domainName;
      public resume_call(String domainName, org.apache.thrift.async.AsyncMethodCallback<resume_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.domainName = domainName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("resume", org.apache.thrift.protocol.TMessageType.CALL, 0));
        resume_args args = new resume_args();
        args.setDomainName(domainName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws LibvirtException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_resume();
      }
    }

    public void createStoragePool(String xmlDesc, org.apache.thrift.async.AsyncMethodCallback<createStoragePool_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createStoragePool_call method_call = new createStoragePool_call(xmlDesc, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createStoragePool_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String xmlDesc;
      public createStoragePool_call(String xmlDesc, org.apache.thrift.async.AsyncMethodCallback<createStoragePool_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.xmlDesc = xmlDesc;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createStoragePool", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createStoragePool_args args = new createStoragePool_args();
        args.setXmlDesc(xmlDesc);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws LibvirtException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_createStoragePool();
      }
    }

    public void resizeDisk(String domainName, String diskPath, double diskSizeInKb, org.apache.thrift.async.AsyncMethodCallback<resizeDisk_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      resizeDisk_call method_call = new resizeDisk_call(domainName, diskPath, diskSizeInKb, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class resizeDisk_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String domainName;
      private String diskPath;
      private double diskSizeInKb;
      public resizeDisk_call(String domainName, String diskPath, double diskSizeInKb, org.apache.thrift.async.AsyncMethodCallback<resizeDisk_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.domainName = domainName;
        this.diskPath = diskPath;
        this.diskSizeInKb = diskSizeInKb;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("resizeDisk", org.apache.thrift.protocol.TMessageType.CALL, 0));
        resizeDisk_args args = new resizeDisk_args();
        args.setDomainName(domainName);
        args.setDiskPath(diskPath);
        args.setDiskSizeInKb(diskSizeInKb);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws LibvirtException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_resizeDisk();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("checkRimpConfiguration", new checkRimpConfiguration());
      processMap.put("getDiskFileSize", new getDiskFileSize());
      processMap.put("getDatastores", new getDatastores());
      processMap.put("getNetInterfaces", new getNetInterfaces());
      processMap.put("copyFromRepositoryToDatastore", new copyFromRepositoryToDatastore());
      processMap.put("deleteVirtualImageFromDatastore", new deleteVirtualImageFromDatastore());
      processMap.put("copyFromDatastoreToRepository", new copyFromDatastoreToRepository());
      processMap.put("createVLAN", new createVLAN());
      processMap.put("deleteVLAN", new deleteVLAN());
      processMap.put("checkVLANConfiguration", new checkVLANConfiguration());
      processMap.put("getInitiatorIQN", new getInitiatorIQN());
      processMap.put("rescanISCSI", new rescanISCSI());
      processMap.put("getNodeInfo", new getNodeInfo());
      processMap.put("getDomains", new getDomains());
      processMap.put("defineDomain", new defineDomain());
      processMap.put("undefineDomain", new undefineDomain());
      processMap.put("existDomain", new existDomain());
      processMap.put("getDomainState", new getDomainState());
      processMap.put("getDomainInfo", new getDomainInfo());
      processMap.put("powerOn", new powerOn());
      processMap.put("powerOff", new powerOff());
      processMap.put("reset", new reset());
      processMap.put("pause", new pause());
      processMap.put("resume", new resume());
      processMap.put("createStoragePool", new createStoragePool());
      processMap.put("resizeDisk", new resizeDisk());
      return processMap;
    }

    public static class checkRimpConfiguration<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkRimpConfiguration_args> {
      public checkRimpConfiguration() {
        super("checkRimpConfiguration");
      }

      public checkRimpConfiguration_args getEmptyArgsInstance() {
        return new checkRimpConfiguration_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkRimpConfiguration_result getResult(I iface, checkRimpConfiguration_args args) throws org.apache.thrift.TException {
        checkRimpConfiguration_result result = new checkRimpConfiguration_result();
        try {
          iface.checkRimpConfiguration();
        } catch (RimpException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class getDiskFileSize<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDiskFileSize_args> {
      public getDiskFileSize() {
        super("getDiskFileSize");
      }

      public getDiskFileSize_args getEmptyArgsInstance() {
        return new getDiskFileSize_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDiskFileSize_result getResult(I iface, getDiskFileSize_args args) throws org.apache.thrift.TException {
        getDiskFileSize_result result = new getDiskFileSize_result();
        try {
          result.success = iface.getDiskFileSize(args.virtualImageDatastorePath);
          result.setSuccessIsSet(true);
        } catch (RimpException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class getDatastores<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDatastores_args> {
      public getDatastores() {
        super("getDatastores");
      }

      public getDatastores_args getEmptyArgsInstance() {
        return new getDatastores_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDatastores_result getResult(I iface, getDatastores_args args) throws org.apache.thrift.TException {
        getDatastores_result result = new getDatastores_result();
        try {
          result.success = iface.getDatastores();
        } catch (RimpException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class getNetInterfaces<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNetInterfaces_args> {
      public getNetInterfaces() {
        super("getNetInterfaces");
      }

      public getNetInterfaces_args getEmptyArgsInstance() {
        return new getNetInterfaces_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getNetInterfaces_result getResult(I iface, getNetInterfaces_args args) throws org.apache.thrift.TException {
        getNetInterfaces_result result = new getNetInterfaces_result();
        try {
          result.success = iface.getNetInterfaces();
        } catch (RimpException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class copyFromRepositoryToDatastore<I extends Iface> extends org.apache.thrift.ProcessFunction<I, copyFromRepositoryToDatastore_args> {
      public copyFromRepositoryToDatastore() {
        super("copyFromRepositoryToDatastore");
      }

      public copyFromRepositoryToDatastore_args getEmptyArgsInstance() {
        return new copyFromRepositoryToDatastore_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public copyFromRepositoryToDatastore_result getResult(I iface, copyFromRepositoryToDatastore_args args) throws org.apache.thrift.TException {
        copyFromRepositoryToDatastore_result result = new copyFromRepositoryToDatastore_result();
        try {
          iface.copyFromRepositoryToDatastore(args.virtualImageRepositoryPath, args.datastorePath, args.virtualMachineUUID);
        } catch (RimpException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class deleteVirtualImageFromDatastore<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteVirtualImageFromDatastore_args> {
      public deleteVirtualImageFromDatastore() {
        super("deleteVirtualImageFromDatastore");
      }

      public deleteVirtualImageFromDatastore_args getEmptyArgsInstance() {
        return new deleteVirtualImageFromDatastore_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteVirtualImageFromDatastore_result getResult(I iface, deleteVirtualImageFromDatastore_args args) throws org.apache.thrift.TException {
        deleteVirtualImageFromDatastore_result result = new deleteVirtualImageFromDatastore_result();
        try {
          iface.deleteVirtualImageFromDatastore(args.datastorePath, args.virtualMachineUUID);
        } catch (RimpException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class copyFromDatastoreToRepository<I extends Iface> extends org.apache.thrift.ProcessFunction<I, copyFromDatastoreToRepository_args> {
      public copyFromDatastoreToRepository() {
        super("copyFromDatastoreToRepository");
      }

      public copyFromDatastoreToRepository_args getEmptyArgsInstance() {
        return new copyFromDatastoreToRepository_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public copyFromDatastoreToRepository_result getResult(I iface, copyFromDatastoreToRepository_args args) throws org.apache.thrift.TException {
        copyFromDatastoreToRepository_result result = new copyFromDatastoreToRepository_result();
        try {
          iface.copyFromDatastoreToRepository(args.virtualMachineUUID, args.snapshot, args.destinationRepositoryPath, args.sourceDatastorePath);
        } catch (RimpException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class createVLAN<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createVLAN_args> {
      public createVLAN() {
        super("createVLAN");
      }

      public createVLAN_args getEmptyArgsInstance() {
        return new createVLAN_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createVLAN_result getResult(I iface, createVLAN_args args) throws org.apache.thrift.TException {
        createVLAN_result result = new createVLAN_result();
        try {
          iface.createVLAN(args.vlanTag, args.vlanInterface, args.bridgeInterface);
        } catch (VLanException ve) {
          result.ve = ve;
        }
        return result;
      }
    }

    public static class deleteVLAN<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteVLAN_args> {
      public deleteVLAN() {
        super("deleteVLAN");
      }

      public deleteVLAN_args getEmptyArgsInstance() {
        return new deleteVLAN_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteVLAN_result getResult(I iface, deleteVLAN_args args) throws org.apache.thrift.TException {
        deleteVLAN_result result = new deleteVLAN_result();
        try {
          iface.deleteVLAN(args.vlanTag, args.vlanInterface, args.bridgeInterface);
        } catch (VLanException ve) {
          result.ve = ve;
        }
        return result;
      }
    }

    public static class checkVLANConfiguration<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkVLANConfiguration_args> {
      public checkVLANConfiguration() {
        super("checkVLANConfiguration");
      }

      public checkVLANConfiguration_args getEmptyArgsInstance() {
        return new checkVLANConfiguration_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkVLANConfiguration_result getResult(I iface, checkVLANConfiguration_args args) throws org.apache.thrift.TException {
        checkVLANConfiguration_result result = new checkVLANConfiguration_result();
        try {
          iface.checkVLANConfiguration();
        } catch (VLanException ve) {
          result.ve = ve;
        }
        return result;
      }
    }

    public static class getInitiatorIQN<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getInitiatorIQN_args> {
      public getInitiatorIQN() {
        super("getInitiatorIQN");
      }

      public getInitiatorIQN_args getEmptyArgsInstance() {
        return new getInitiatorIQN_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getInitiatorIQN_result getResult(I iface, getInitiatorIQN_args args) throws org.apache.thrift.TException {
        getInitiatorIQN_result result = new getInitiatorIQN_result();
        try {
          result.success = iface.getInitiatorIQN();
        } catch (StorageException se) {
          result.se = se;
        }
        return result;
      }
    }

    public static class rescanISCSI<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rescanISCSI_args> {
      public rescanISCSI() {
        super("rescanISCSI");
      }

      public rescanISCSI_args getEmptyArgsInstance() {
        return new rescanISCSI_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public rescanISCSI_result getResult(I iface, rescanISCSI_args args) throws org.apache.thrift.TException {
        rescanISCSI_result result = new rescanISCSI_result();
        try {
          iface.rescanISCSI(args.targets);
        } catch (StorageException se) {
          result.se = se;
        }
        return result;
      }
    }

    public static class getNodeInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNodeInfo_args> {
      public getNodeInfo() {
        super("getNodeInfo");
      }

      public getNodeInfo_args getEmptyArgsInstance() {
        return new getNodeInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getNodeInfo_result getResult(I iface, getNodeInfo_args args) throws org.apache.thrift.TException {
        getNodeInfo_result result = new getNodeInfo_result();
        try {
          result.success = iface.getNodeInfo();
        } catch (LibvirtException libvirtException) {
          result.libvirtException = libvirtException;
        }
        return result;
      }
    }

    public static class getDomains<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDomains_args> {
      public getDomains() {
        super("getDomains");
      }

      public getDomains_args getEmptyArgsInstance() {
        return new getDomains_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDomains_result getResult(I iface, getDomains_args args) throws org.apache.thrift.TException {
        getDomains_result result = new getDomains_result();
        try {
          result.success = iface.getDomains();
        } catch (LibvirtException libvirtException) {
          result.libvirtException = libvirtException;
        }
        return result;
      }
    }

    public static class defineDomain<I extends Iface> extends org.apache.thrift.ProcessFunction<I, defineDomain_args> {
      public defineDomain() {
        super("defineDomain");
      }

      public defineDomain_args getEmptyArgsInstance() {
        return new defineDomain_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public defineDomain_result getResult(I iface, defineDomain_args args) throws org.apache.thrift.TException {
        defineDomain_result result = new defineDomain_result();
        try {
          iface.defineDomain(args.xmlDesc);
        } catch (LibvirtException libvirtException) {
          result.libvirtException = libvirtException;
        }
        return result;
      }
    }

    public static class undefineDomain<I extends Iface> extends org.apache.thrift.ProcessFunction<I, undefineDomain_args> {
      public undefineDomain() {
        super("undefineDomain");
      }

      public undefineDomain_args getEmptyArgsInstance() {
        return new undefineDomain_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public undefineDomain_result getResult(I iface, undefineDomain_args args) throws org.apache.thrift.TException {
        undefineDomain_result result = new undefineDomain_result();
        try {
          iface.undefineDomain(args.domainName);
        } catch (LibvirtException libvirtException) {
          result.libvirtException = libvirtException;
        }
        return result;
      }
    }

    public static class existDomain<I extends Iface> extends org.apache.thrift.ProcessFunction<I, existDomain_args> {
      public existDomain() {
        super("existDomain");
      }

      public existDomain_args getEmptyArgsInstance() {
        return new existDomain_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public existDomain_result getResult(I iface, existDomain_args args) throws org.apache.thrift.TException {
        existDomain_result result = new existDomain_result();
        result.success = iface.existDomain(args.domainName);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getDomainState<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDomainState_args> {
      public getDomainState() {
        super("getDomainState");
      }

      public getDomainState_args getEmptyArgsInstance() {
        return new getDomainState_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDomainState_result getResult(I iface, getDomainState_args args) throws org.apache.thrift.TException {
        getDomainState_result result = new getDomainState_result();
        try {
          result.success = iface.getDomainState(args.domainName);
        } catch (LibvirtException libvirtException) {
          result.libvirtException = libvirtException;
        }
        return result;
      }
    }

    public static class getDomainInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDomainInfo_args> {
      public getDomainInfo() {
        super("getDomainInfo");
      }

      public getDomainInfo_args getEmptyArgsInstance() {
        return new getDomainInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDomainInfo_result getResult(I iface, getDomainInfo_args args) throws org.apache.thrift.TException {
        getDomainInfo_result result = new getDomainInfo_result();
        try {
          result.success = iface.getDomainInfo(args.domainName);
        } catch (LibvirtException libvirtException) {
          result.libvirtException = libvirtException;
        }
        return result;
      }
    }

    public static class powerOn<I extends Iface> extends org.apache.thrift.ProcessFunction<I, powerOn_args> {
      public powerOn() {
        super("powerOn");
      }

      public powerOn_args getEmptyArgsInstance() {
        return new powerOn_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public powerOn_result getResult(I iface, powerOn_args args) throws org.apache.thrift.TException {
        powerOn_result result = new powerOn_result();
        try {
          iface.powerOn(args.domainName);
        } catch (LibvirtException libvirtException) {
          result.libvirtException = libvirtException;
        }
        return result;
      }
    }

    public static class powerOff<I extends Iface> extends org.apache.thrift.ProcessFunction<I, powerOff_args> {
      public powerOff() {
        super("powerOff");
      }

      public powerOff_args getEmptyArgsInstance() {
        return new powerOff_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public powerOff_result getResult(I iface, powerOff_args args) throws org.apache.thrift.TException {
        powerOff_result result = new powerOff_result();
        try {
          iface.powerOff(args.domainName);
        } catch (LibvirtException libvirtException) {
          result.libvirtException = libvirtException;
        }
        return result;
      }
    }

    public static class reset<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reset_args> {
      public reset() {
        super("reset");
      }

      public reset_args getEmptyArgsInstance() {
        return new reset_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reset_result getResult(I iface, reset_args args) throws org.apache.thrift.TException {
        reset_result result = new reset_result();
        try {
          iface.reset(args.domainName);
        } catch (LibvirtException libvirtException) {
          result.libvirtException = libvirtException;
        }
        return result;
      }
    }

    public static class pause<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pause_args> {
      public pause() {
        super("pause");
      }

      public pause_args getEmptyArgsInstance() {
        return new pause_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public pause_result getResult(I iface, pause_args args) throws org.apache.thrift.TException {
        pause_result result = new pause_result();
        try {
          iface.pause(args.domainName);
        } catch (LibvirtException libvirtException) {
          result.libvirtException = libvirtException;
        }
        return result;
      }
    }

    public static class resume<I extends Iface> extends org.apache.thrift.ProcessFunction<I, resume_args> {
      public resume() {
        super("resume");
      }

      public resume_args getEmptyArgsInstance() {
        return new resume_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public resume_result getResult(I iface, resume_args args) throws org.apache.thrift.TException {
        resume_result result = new resume_result();
        try {
          iface.resume(args.domainName);
        } catch (LibvirtException libvirtException) {
          result.libvirtException = libvirtException;
        }
        return result;
      }
    }

    public static class createStoragePool<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createStoragePool_args> {
      public createStoragePool() {
        super("createStoragePool");
      }

      public createStoragePool_args getEmptyArgsInstance() {
        return new createStoragePool_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createStoragePool_result getResult(I iface, createStoragePool_args args) throws org.apache.thrift.TException {
        createStoragePool_result result = new createStoragePool_result();
        try {
          iface.createStoragePool(args.xmlDesc);
        } catch (LibvirtException libvirtException) {
          result.libvirtException = libvirtException;
        }
        return result;
      }
    }

    public static class resizeDisk<I extends Iface> extends org.apache.thrift.ProcessFunction<I, resizeDisk_args> {
      public resizeDisk() {
        super("resizeDisk");
      }

      public resizeDisk_args getEmptyArgsInstance() {
        return new resizeDisk_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public resizeDisk_result getResult(I iface, resizeDisk_args args) throws org.apache.thrift.TException {
        resizeDisk_result result = new resizeDisk_result();
        try {
          iface.resizeDisk(args.domainName, args.diskPath, args.diskSizeInKb);
        } catch (LibvirtException libvirtException) {
          result.libvirtException = libvirtException;
        }
        return result;
      }
    }

  }

  public static class checkRimpConfiguration_args implements org.apache.thrift.TBase<checkRimpConfiguration_args, checkRimpConfiguration_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkRimpConfiguration_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkRimpConfiguration_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkRimpConfiguration_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkRimpConfiguration_args.class, metaDataMap);
    }

    public checkRimpConfiguration_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkRimpConfiguration_args(checkRimpConfiguration_args other) {
    }

    public checkRimpConfiguration_args deepCopy() {
      return new checkRimpConfiguration_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkRimpConfiguration_args)
        return this.equals((checkRimpConfiguration_args)that);
      return false;
    }

    public boolean equals(checkRimpConfiguration_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(checkRimpConfiguration_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      checkRimpConfiguration_args typedOther = (checkRimpConfiguration_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkRimpConfiguration_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkRimpConfiguration_argsStandardSchemeFactory implements SchemeFactory {
      public checkRimpConfiguration_argsStandardScheme getScheme() {
        return new checkRimpConfiguration_argsStandardScheme();
      }
    }

    private static class checkRimpConfiguration_argsStandardScheme extends StandardScheme<checkRimpConfiguration_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkRimpConfiguration_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkRimpConfiguration_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkRimpConfiguration_argsTupleSchemeFactory implements SchemeFactory {
      public checkRimpConfiguration_argsTupleScheme getScheme() {
        return new checkRimpConfiguration_argsTupleScheme();
      }
    }

    private static class checkRimpConfiguration_argsTupleScheme extends TupleScheme<checkRimpConfiguration_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkRimpConfiguration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkRimpConfiguration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class checkRimpConfiguration_result implements org.apache.thrift.TBase<checkRimpConfiguration_result, checkRimpConfiguration_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkRimpConfiguration_result");

    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkRimpConfiguration_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkRimpConfiguration_resultTupleSchemeFactory());
    }

    public RimpException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RE((short)1, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkRimpConfiguration_result.class, metaDataMap);
    }

    public checkRimpConfiguration_result() {
    }

    public checkRimpConfiguration_result(
      RimpException re)
    {
      this();
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkRimpConfiguration_result(checkRimpConfiguration_result other) {
      if (other.isSetRe()) {
        this.re = new RimpException(other.re);
      }
    }

    public checkRimpConfiguration_result deepCopy() {
      return new checkRimpConfiguration_result(this);
    }

    @Override
    public void clear() {
      this.re = null;
    }

    public RimpException getRe() {
      return this.re;
    }

    public checkRimpConfiguration_result setRe(RimpException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((RimpException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkRimpConfiguration_result)
        return this.equals((checkRimpConfiguration_result)that);
      return false;
    }

    public boolean equals(checkRimpConfiguration_result that) {
      if (that == null)
        return false;

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(checkRimpConfiguration_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      checkRimpConfiguration_result typedOther = (checkRimpConfiguration_result)other;

      lastComparison = Boolean.valueOf(isSetRe()).compareTo(typedOther.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, typedOther.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkRimpConfiguration_result(");
      boolean first = true;

      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkRimpConfiguration_resultStandardSchemeFactory implements SchemeFactory {
      public checkRimpConfiguration_resultStandardScheme getScheme() {
        return new checkRimpConfiguration_resultStandardScheme();
      }
    }

    private static class checkRimpConfiguration_resultStandardScheme extends StandardScheme<checkRimpConfiguration_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkRimpConfiguration_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new RimpException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkRimpConfiguration_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkRimpConfiguration_resultTupleSchemeFactory implements SchemeFactory {
      public checkRimpConfiguration_resultTupleScheme getScheme() {
        return new checkRimpConfiguration_resultTupleScheme();
      }
    }

    private static class checkRimpConfiguration_resultTupleScheme extends TupleScheme<checkRimpConfiguration_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkRimpConfiguration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRe()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkRimpConfiguration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.re = new RimpException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class getDiskFileSize_args implements org.apache.thrift.TBase<getDiskFileSize_args, getDiskFileSize_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDiskFileSize_args");

    private static final org.apache.thrift.protocol.TField VIRTUAL_IMAGE_DATASTORE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("virtualImageDatastorePath", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDiskFileSize_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDiskFileSize_argsTupleSchemeFactory());
    }

    public String virtualImageDatastorePath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VIRTUAL_IMAGE_DATASTORE_PATH((short)1, "virtualImageDatastorePath");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VIRTUAL_IMAGE_DATASTORE_PATH
            return VIRTUAL_IMAGE_DATASTORE_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VIRTUAL_IMAGE_DATASTORE_PATH, new org.apache.thrift.meta_data.FieldMetaData("virtualImageDatastorePath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDiskFileSize_args.class, metaDataMap);
    }

    public getDiskFileSize_args() {
    }

    public getDiskFileSize_args(
      String virtualImageDatastorePath)
    {
      this();
      this.virtualImageDatastorePath = virtualImageDatastorePath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDiskFileSize_args(getDiskFileSize_args other) {
      if (other.isSetVirtualImageDatastorePath()) {
        this.virtualImageDatastorePath = other.virtualImageDatastorePath;
      }
    }

    public getDiskFileSize_args deepCopy() {
      return new getDiskFileSize_args(this);
    }

    @Override
    public void clear() {
      this.virtualImageDatastorePath = null;
    }

    public String getVirtualImageDatastorePath() {
      return this.virtualImageDatastorePath;
    }

    public getDiskFileSize_args setVirtualImageDatastorePath(String virtualImageDatastorePath) {
      this.virtualImageDatastorePath = virtualImageDatastorePath;
      return this;
    }

    public void unsetVirtualImageDatastorePath() {
      this.virtualImageDatastorePath = null;
    }

    /** Returns true if field virtualImageDatastorePath is set (has been assigned a value) and false otherwise */
    public boolean isSetVirtualImageDatastorePath() {
      return this.virtualImageDatastorePath != null;
    }

    public void setVirtualImageDatastorePathIsSet(boolean value) {
      if (!value) {
        this.virtualImageDatastorePath = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VIRTUAL_IMAGE_DATASTORE_PATH:
        if (value == null) {
          unsetVirtualImageDatastorePath();
        } else {
          setVirtualImageDatastorePath((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VIRTUAL_IMAGE_DATASTORE_PATH:
        return getVirtualImageDatastorePath();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VIRTUAL_IMAGE_DATASTORE_PATH:
        return isSetVirtualImageDatastorePath();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDiskFileSize_args)
        return this.equals((getDiskFileSize_args)that);
      return false;
    }

    public boolean equals(getDiskFileSize_args that) {
      if (that == null)
        return false;

      boolean this_present_virtualImageDatastorePath = true && this.isSetVirtualImageDatastorePath();
      boolean that_present_virtualImageDatastorePath = true && that.isSetVirtualImageDatastorePath();
      if (this_present_virtualImageDatastorePath || that_present_virtualImageDatastorePath) {
        if (!(this_present_virtualImageDatastorePath && that_present_virtualImageDatastorePath))
          return false;
        if (!this.virtualImageDatastorePath.equals(that.virtualImageDatastorePath))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getDiskFileSize_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getDiskFileSize_args typedOther = (getDiskFileSize_args)other;

      lastComparison = Boolean.valueOf(isSetVirtualImageDatastorePath()).compareTo(typedOther.isSetVirtualImageDatastorePath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVirtualImageDatastorePath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.virtualImageDatastorePath, typedOther.virtualImageDatastorePath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDiskFileSize_args(");
      boolean first = true;

      sb.append("virtualImageDatastorePath:");
      if (this.virtualImageDatastorePath == null) {
        sb.append("null");
      } else {
        sb.append(this.virtualImageDatastorePath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDiskFileSize_argsStandardSchemeFactory implements SchemeFactory {
      public getDiskFileSize_argsStandardScheme getScheme() {
        return new getDiskFileSize_argsStandardScheme();
      }
    }

    private static class getDiskFileSize_argsStandardScheme extends StandardScheme<getDiskFileSize_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDiskFileSize_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VIRTUAL_IMAGE_DATASTORE_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.virtualImageDatastorePath = iprot.readString();
                struct.setVirtualImageDatastorePathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDiskFileSize_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.virtualImageDatastorePath != null) {
          oprot.writeFieldBegin(VIRTUAL_IMAGE_DATASTORE_PATH_FIELD_DESC);
          oprot.writeString(struct.virtualImageDatastorePath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDiskFileSize_argsTupleSchemeFactory implements SchemeFactory {
      public getDiskFileSize_argsTupleScheme getScheme() {
        return new getDiskFileSize_argsTupleScheme();
      }
    }

    private static class getDiskFileSize_argsTupleScheme extends TupleScheme<getDiskFileSize_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDiskFileSize_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVirtualImageDatastorePath()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetVirtualImageDatastorePath()) {
          oprot.writeString(struct.virtualImageDatastorePath);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDiskFileSize_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.virtualImageDatastorePath = iprot.readString();
          struct.setVirtualImageDatastorePathIsSet(true);
        }
      }
    }

  }

  public static class getDiskFileSize_result implements org.apache.thrift.TBase<getDiskFileSize_result, getDiskFileSize_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDiskFileSize_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDiskFileSize_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDiskFileSize_resultTupleSchemeFactory());
    }

    public long success; // required
    public RimpException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      RE((short)1, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDiskFileSize_result.class, metaDataMap);
    }

    public getDiskFileSize_result() {
    }

    public getDiskFileSize_result(
      long success,
      RimpException re)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDiskFileSize_result(getDiskFileSize_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetRe()) {
        this.re = new RimpException(other.re);
      }
    }

    public getDiskFileSize_result deepCopy() {
      return new getDiskFileSize_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.re = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public getDiskFileSize_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public RimpException getRe() {
      return this.re;
    }

    public getDiskFileSize_result setRe(RimpException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((RimpException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDiskFileSize_result)
        return this.equals((getDiskFileSize_result)that);
      return false;
    }

    public boolean equals(getDiskFileSize_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getDiskFileSize_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getDiskFileSize_result typedOther = (getDiskFileSize_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(typedOther.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, typedOther.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDiskFileSize_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDiskFileSize_resultStandardSchemeFactory implements SchemeFactory {
      public getDiskFileSize_resultStandardScheme getScheme() {
        return new getDiskFileSize_resultStandardScheme();
      }
    }

    private static class getDiskFileSize_resultStandardScheme extends StandardScheme<getDiskFileSize_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDiskFileSize_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new RimpException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDiskFileSize_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDiskFileSize_resultTupleSchemeFactory implements SchemeFactory {
      public getDiskFileSize_resultTupleScheme getScheme() {
        return new getDiskFileSize_resultTupleScheme();
      }
    }

    private static class getDiskFileSize_resultTupleScheme extends TupleScheme<getDiskFileSize_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDiskFileSize_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetRe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDiskFileSize_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.re = new RimpException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class getDatastores_args implements org.apache.thrift.TBase<getDatastores_args, getDatastores_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDatastores_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDatastores_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDatastores_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDatastores_args.class, metaDataMap);
    }

    public getDatastores_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDatastores_args(getDatastores_args other) {
    }

    public getDatastores_args deepCopy() {
      return new getDatastores_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDatastores_args)
        return this.equals((getDatastores_args)that);
      return false;
    }

    public boolean equals(getDatastores_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getDatastores_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getDatastores_args typedOther = (getDatastores_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDatastores_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDatastores_argsStandardSchemeFactory implements SchemeFactory {
      public getDatastores_argsStandardScheme getScheme() {
        return new getDatastores_argsStandardScheme();
      }
    }

    private static class getDatastores_argsStandardScheme extends StandardScheme<getDatastores_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDatastores_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDatastores_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDatastores_argsTupleSchemeFactory implements SchemeFactory {
      public getDatastores_argsTupleScheme getScheme() {
        return new getDatastores_argsTupleScheme();
      }
    }

    private static class getDatastores_argsTupleScheme extends TupleScheme<getDatastores_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDatastores_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDatastores_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getDatastores_result implements org.apache.thrift.TBase<getDatastores_result, getDatastores_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDatastores_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDatastores_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDatastores_resultTupleSchemeFactory());
    }

    public List<Datastore> success; // required
    public RimpException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      RE((short)1, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Datastore.class))));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDatastores_result.class, metaDataMap);
    }

    public getDatastores_result() {
    }

    public getDatastores_result(
      List<Datastore> success,
      RimpException re)
    {
      this();
      this.success = success;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDatastores_result(getDatastores_result other) {
      if (other.isSetSuccess()) {
        List<Datastore> __this__success = new ArrayList<Datastore>();
        for (Datastore other_element : other.success) {
          __this__success.add(new Datastore(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetRe()) {
        this.re = new RimpException(other.re);
      }
    }

    public getDatastores_result deepCopy() {
      return new getDatastores_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.re = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Datastore> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Datastore elem) {
      if (this.success == null) {
        this.success = new ArrayList<Datastore>();
      }
      this.success.add(elem);
    }

    public List<Datastore> getSuccess() {
      return this.success;
    }

    public getDatastores_result setSuccess(List<Datastore> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public RimpException getRe() {
      return this.re;
    }

    public getDatastores_result setRe(RimpException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Datastore>)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((RimpException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDatastores_result)
        return this.equals((getDatastores_result)that);
      return false;
    }

    public boolean equals(getDatastores_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getDatastores_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getDatastores_result typedOther = (getDatastores_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(typedOther.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, typedOther.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDatastores_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDatastores_resultStandardSchemeFactory implements SchemeFactory {
      public getDatastores_resultStandardScheme getScheme() {
        return new getDatastores_resultStandardScheme();
      }
    }

    private static class getDatastores_resultStandardScheme extends StandardScheme<getDatastores_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDatastores_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<Datastore>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    Datastore _elem2; // required
                    _elem2 = new Datastore();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new RimpException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDatastores_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Datastore _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDatastores_resultTupleSchemeFactory implements SchemeFactory {
      public getDatastores_resultTupleScheme getScheme() {
        return new getDatastores_resultTupleScheme();
      }
    }

    private static class getDatastores_resultTupleScheme extends TupleScheme<getDatastores_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDatastores_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetRe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Datastore _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDatastores_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Datastore>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              Datastore _elem7; // required
              _elem7 = new Datastore();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.re = new RimpException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class getNetInterfaces_args implements org.apache.thrift.TBase<getNetInterfaces_args, getNetInterfaces_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNetInterfaces_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNetInterfaces_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNetInterfaces_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNetInterfaces_args.class, metaDataMap);
    }

    public getNetInterfaces_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNetInterfaces_args(getNetInterfaces_args other) {
    }

    public getNetInterfaces_args deepCopy() {
      return new getNetInterfaces_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNetInterfaces_args)
        return this.equals((getNetInterfaces_args)that);
      return false;
    }

    public boolean equals(getNetInterfaces_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getNetInterfaces_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getNetInterfaces_args typedOther = (getNetInterfaces_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNetInterfaces_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNetInterfaces_argsStandardSchemeFactory implements SchemeFactory {
      public getNetInterfaces_argsStandardScheme getScheme() {
        return new getNetInterfaces_argsStandardScheme();
      }
    }

    private static class getNetInterfaces_argsStandardScheme extends StandardScheme<getNetInterfaces_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNetInterfaces_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNetInterfaces_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNetInterfaces_argsTupleSchemeFactory implements SchemeFactory {
      public getNetInterfaces_argsTupleScheme getScheme() {
        return new getNetInterfaces_argsTupleScheme();
      }
    }

    private static class getNetInterfaces_argsTupleScheme extends TupleScheme<getNetInterfaces_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNetInterfaces_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNetInterfaces_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getNetInterfaces_result implements org.apache.thrift.TBase<getNetInterfaces_result, getNetInterfaces_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNetInterfaces_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNetInterfaces_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNetInterfaces_resultTupleSchemeFactory());
    }

    public List<NetInterface> success; // required
    public RimpException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      RE((short)1, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NetInterface.class))));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNetInterfaces_result.class, metaDataMap);
    }

    public getNetInterfaces_result() {
    }

    public getNetInterfaces_result(
      List<NetInterface> success,
      RimpException re)
    {
      this();
      this.success = success;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNetInterfaces_result(getNetInterfaces_result other) {
      if (other.isSetSuccess()) {
        List<NetInterface> __this__success = new ArrayList<NetInterface>();
        for (NetInterface other_element : other.success) {
          __this__success.add(new NetInterface(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetRe()) {
        this.re = new RimpException(other.re);
      }
    }

    public getNetInterfaces_result deepCopy() {
      return new getNetInterfaces_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.re = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<NetInterface> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(NetInterface elem) {
      if (this.success == null) {
        this.success = new ArrayList<NetInterface>();
      }
      this.success.add(elem);
    }

    public List<NetInterface> getSuccess() {
      return this.success;
    }

    public getNetInterfaces_result setSuccess(List<NetInterface> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public RimpException getRe() {
      return this.re;
    }

    public getNetInterfaces_result setRe(RimpException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<NetInterface>)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((RimpException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNetInterfaces_result)
        return this.equals((getNetInterfaces_result)that);
      return false;
    }

    public boolean equals(getNetInterfaces_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getNetInterfaces_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getNetInterfaces_result typedOther = (getNetInterfaces_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRe()).compareTo(typedOther.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, typedOther.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNetInterfaces_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNetInterfaces_resultStandardSchemeFactory implements SchemeFactory {
      public getNetInterfaces_resultStandardScheme getScheme() {
        return new getNetInterfaces_resultStandardScheme();
      }
    }

    private static class getNetInterfaces_resultStandardScheme extends StandardScheme<getNetInterfaces_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNetInterfaces_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<NetInterface>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    NetInterface _elem10; // required
                    _elem10 = new NetInterface();
                    _elem10.read(iprot);
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new RimpException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNetInterfaces_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (NetInterface _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNetInterfaces_resultTupleSchemeFactory implements SchemeFactory {
      public getNetInterfaces_resultTupleScheme getScheme() {
        return new getNetInterfaces_resultTupleScheme();
      }
    }

    private static class getNetInterfaces_resultTupleScheme extends TupleScheme<getNetInterfaces_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNetInterfaces_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetRe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (NetInterface _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNetInterfaces_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<NetInterface>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              NetInterface _elem15; // required
              _elem15 = new NetInterface();
              _elem15.read(iprot);
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.re = new RimpException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class copyFromRepositoryToDatastore_args implements org.apache.thrift.TBase<copyFromRepositoryToDatastore_args, copyFromRepositoryToDatastore_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("copyFromRepositoryToDatastore_args");

    private static final org.apache.thrift.protocol.TField VIRTUAL_IMAGE_REPOSITORY_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("virtualImageRepositoryPath", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DATASTORE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("datastorePath", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField VIRTUAL_MACHINE_UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("virtualMachineUUID", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new copyFromRepositoryToDatastore_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new copyFromRepositoryToDatastore_argsTupleSchemeFactory());
    }

    public String virtualImageRepositoryPath; // required
    public String datastorePath; // required
    public String virtualMachineUUID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VIRTUAL_IMAGE_REPOSITORY_PATH((short)1, "virtualImageRepositoryPath"),
      DATASTORE_PATH((short)2, "datastorePath"),
      VIRTUAL_MACHINE_UUID((short)3, "virtualMachineUUID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VIRTUAL_IMAGE_REPOSITORY_PATH
            return VIRTUAL_IMAGE_REPOSITORY_PATH;
          case 2: // DATASTORE_PATH
            return DATASTORE_PATH;
          case 3: // VIRTUAL_MACHINE_UUID
            return VIRTUAL_MACHINE_UUID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VIRTUAL_IMAGE_REPOSITORY_PATH, new org.apache.thrift.meta_data.FieldMetaData("virtualImageRepositoryPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATASTORE_PATH, new org.apache.thrift.meta_data.FieldMetaData("datastorePath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VIRTUAL_MACHINE_UUID, new org.apache.thrift.meta_data.FieldMetaData("virtualMachineUUID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(copyFromRepositoryToDatastore_args.class, metaDataMap);
    }

    public copyFromRepositoryToDatastore_args() {
    }

    public copyFromRepositoryToDatastore_args(
      String virtualImageRepositoryPath,
      String datastorePath,
      String virtualMachineUUID)
    {
      this();
      this.virtualImageRepositoryPath = virtualImageRepositoryPath;
      this.datastorePath = datastorePath;
      this.virtualMachineUUID = virtualMachineUUID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public copyFromRepositoryToDatastore_args(copyFromRepositoryToDatastore_args other) {
      if (other.isSetVirtualImageRepositoryPath()) {
        this.virtualImageRepositoryPath = other.virtualImageRepositoryPath;
      }
      if (other.isSetDatastorePath()) {
        this.datastorePath = other.datastorePath;
      }
      if (other.isSetVirtualMachineUUID()) {
        this.virtualMachineUUID = other.virtualMachineUUID;
      }
    }

    public copyFromRepositoryToDatastore_args deepCopy() {
      return new copyFromRepositoryToDatastore_args(this);
    }

    @Override
    public void clear() {
      this.virtualImageRepositoryPath = null;
      this.datastorePath = null;
      this.virtualMachineUUID = null;
    }

    public String getVirtualImageRepositoryPath() {
      return this.virtualImageRepositoryPath;
    }

    public copyFromRepositoryToDatastore_args setVirtualImageRepositoryPath(String virtualImageRepositoryPath) {
      this.virtualImageRepositoryPath = virtualImageRepositoryPath;
      return this;
    }

    public void unsetVirtualImageRepositoryPath() {
      this.virtualImageRepositoryPath = null;
    }

    /** Returns true if field virtualImageRepositoryPath is set (has been assigned a value) and false otherwise */
    public boolean isSetVirtualImageRepositoryPath() {
      return this.virtualImageRepositoryPath != null;
    }

    public void setVirtualImageRepositoryPathIsSet(boolean value) {
      if (!value) {
        this.virtualImageRepositoryPath = null;
      }
    }

    public String getDatastorePath() {
      return this.datastorePath;
    }

    public copyFromRepositoryToDatastore_args setDatastorePath(String datastorePath) {
      this.datastorePath = datastorePath;
      return this;
    }

    public void unsetDatastorePath() {
      this.datastorePath = null;
    }

    /** Returns true if field datastorePath is set (has been assigned a value) and false otherwise */
    public boolean isSetDatastorePath() {
      return this.datastorePath != null;
    }

    public void setDatastorePathIsSet(boolean value) {
      if (!value) {
        this.datastorePath = null;
      }
    }

    public String getVirtualMachineUUID() {
      return this.virtualMachineUUID;
    }

    public copyFromRepositoryToDatastore_args setVirtualMachineUUID(String virtualMachineUUID) {
      this.virtualMachineUUID = virtualMachineUUID;
      return this;
    }

    public void unsetVirtualMachineUUID() {
      this.virtualMachineUUID = null;
    }

    /** Returns true if field virtualMachineUUID is set (has been assigned a value) and false otherwise */
    public boolean isSetVirtualMachineUUID() {
      return this.virtualMachineUUID != null;
    }

    public void setVirtualMachineUUIDIsSet(boolean value) {
      if (!value) {
        this.virtualMachineUUID = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VIRTUAL_IMAGE_REPOSITORY_PATH:
        if (value == null) {
          unsetVirtualImageRepositoryPath();
        } else {
          setVirtualImageRepositoryPath((String)value);
        }
        break;

      case DATASTORE_PATH:
        if (value == null) {
          unsetDatastorePath();
        } else {
          setDatastorePath((String)value);
        }
        break;

      case VIRTUAL_MACHINE_UUID:
        if (value == null) {
          unsetVirtualMachineUUID();
        } else {
          setVirtualMachineUUID((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VIRTUAL_IMAGE_REPOSITORY_PATH:
        return getVirtualImageRepositoryPath();

      case DATASTORE_PATH:
        return getDatastorePath();

      case VIRTUAL_MACHINE_UUID:
        return getVirtualMachineUUID();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VIRTUAL_IMAGE_REPOSITORY_PATH:
        return isSetVirtualImageRepositoryPath();
      case DATASTORE_PATH:
        return isSetDatastorePath();
      case VIRTUAL_MACHINE_UUID:
        return isSetVirtualMachineUUID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof copyFromRepositoryToDatastore_args)
        return this.equals((copyFromRepositoryToDatastore_args)that);
      return false;
    }

    public boolean equals(copyFromRepositoryToDatastore_args that) {
      if (that == null)
        return false;

      boolean this_present_virtualImageRepositoryPath = true && this.isSetVirtualImageRepositoryPath();
      boolean that_present_virtualImageRepositoryPath = true && that.isSetVirtualImageRepositoryPath();
      if (this_present_virtualImageRepositoryPath || that_present_virtualImageRepositoryPath) {
        if (!(this_present_virtualImageRepositoryPath && that_present_virtualImageRepositoryPath))
          return false;
        if (!this.virtualImageRepositoryPath.equals(that.virtualImageRepositoryPath))
          return false;
      }

      boolean this_present_datastorePath = true && this.isSetDatastorePath();
      boolean that_present_datastorePath = true && that.isSetDatastorePath();
      if (this_present_datastorePath || that_present_datastorePath) {
        if (!(this_present_datastorePath && that_present_datastorePath))
          return false;
        if (!this.datastorePath.equals(that.datastorePath))
          return false;
      }

      boolean this_present_virtualMachineUUID = true && this.isSetVirtualMachineUUID();
      boolean that_present_virtualMachineUUID = true && that.isSetVirtualMachineUUID();
      if (this_present_virtualMachineUUID || that_present_virtualMachineUUID) {
        if (!(this_present_virtualMachineUUID && that_present_virtualMachineUUID))
          return false;
        if (!this.virtualMachineUUID.equals(that.virtualMachineUUID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(copyFromRepositoryToDatastore_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      copyFromRepositoryToDatastore_args typedOther = (copyFromRepositoryToDatastore_args)other;

      lastComparison = Boolean.valueOf(isSetVirtualImageRepositoryPath()).compareTo(typedOther.isSetVirtualImageRepositoryPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVirtualImageRepositoryPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.virtualImageRepositoryPath, typedOther.virtualImageRepositoryPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDatastorePath()).compareTo(typedOther.isSetDatastorePath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatastorePath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datastorePath, typedOther.datastorePath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVirtualMachineUUID()).compareTo(typedOther.isSetVirtualMachineUUID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVirtualMachineUUID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.virtualMachineUUID, typedOther.virtualMachineUUID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("copyFromRepositoryToDatastore_args(");
      boolean first = true;

      sb.append("virtualImageRepositoryPath:");
      if (this.virtualImageRepositoryPath == null) {
        sb.append("null");
      } else {
        sb.append(this.virtualImageRepositoryPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("datastorePath:");
      if (this.datastorePath == null) {
        sb.append("null");
      } else {
        sb.append(this.datastorePath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("virtualMachineUUID:");
      if (this.virtualMachineUUID == null) {
        sb.append("null");
      } else {
        sb.append(this.virtualMachineUUID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class copyFromRepositoryToDatastore_argsStandardSchemeFactory implements SchemeFactory {
      public copyFromRepositoryToDatastore_argsStandardScheme getScheme() {
        return new copyFromRepositoryToDatastore_argsStandardScheme();
      }
    }

    private static class copyFromRepositoryToDatastore_argsStandardScheme extends StandardScheme<copyFromRepositoryToDatastore_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, copyFromRepositoryToDatastore_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VIRTUAL_IMAGE_REPOSITORY_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.virtualImageRepositoryPath = iprot.readString();
                struct.setVirtualImageRepositoryPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DATASTORE_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.datastorePath = iprot.readString();
                struct.setDatastorePathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VIRTUAL_MACHINE_UUID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.virtualMachineUUID = iprot.readString();
                struct.setVirtualMachineUUIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, copyFromRepositoryToDatastore_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.virtualImageRepositoryPath != null) {
          oprot.writeFieldBegin(VIRTUAL_IMAGE_REPOSITORY_PATH_FIELD_DESC);
          oprot.writeString(struct.virtualImageRepositoryPath);
          oprot.writeFieldEnd();
        }
        if (struct.datastorePath != null) {
          oprot.writeFieldBegin(DATASTORE_PATH_FIELD_DESC);
          oprot.writeString(struct.datastorePath);
          oprot.writeFieldEnd();
        }
        if (struct.virtualMachineUUID != null) {
          oprot.writeFieldBegin(VIRTUAL_MACHINE_UUID_FIELD_DESC);
          oprot.writeString(struct.virtualMachineUUID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class copyFromRepositoryToDatastore_argsTupleSchemeFactory implements SchemeFactory {
      public copyFromRepositoryToDatastore_argsTupleScheme getScheme() {
        return new copyFromRepositoryToDatastore_argsTupleScheme();
      }
    }

    private static class copyFromRepositoryToDatastore_argsTupleScheme extends TupleScheme<copyFromRepositoryToDatastore_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, copyFromRepositoryToDatastore_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVirtualImageRepositoryPath()) {
          optionals.set(0);
        }
        if (struct.isSetDatastorePath()) {
          optionals.set(1);
        }
        if (struct.isSetVirtualMachineUUID()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetVirtualImageRepositoryPath()) {
          oprot.writeString(struct.virtualImageRepositoryPath);
        }
        if (struct.isSetDatastorePath()) {
          oprot.writeString(struct.datastorePath);
        }
        if (struct.isSetVirtualMachineUUID()) {
          oprot.writeString(struct.virtualMachineUUID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, copyFromRepositoryToDatastore_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.virtualImageRepositoryPath = iprot.readString();
          struct.setVirtualImageRepositoryPathIsSet(true);
        }
        if (incoming.get(1)) {
          struct.datastorePath = iprot.readString();
          struct.setDatastorePathIsSet(true);
        }
        if (incoming.get(2)) {
          struct.virtualMachineUUID = iprot.readString();
          struct.setVirtualMachineUUIDIsSet(true);
        }
      }
    }

  }

  public static class copyFromRepositoryToDatastore_result implements org.apache.thrift.TBase<copyFromRepositoryToDatastore_result, copyFromRepositoryToDatastore_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("copyFromRepositoryToDatastore_result");

    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new copyFromRepositoryToDatastore_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new copyFromRepositoryToDatastore_resultTupleSchemeFactory());
    }

    public RimpException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RE((short)1, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(copyFromRepositoryToDatastore_result.class, metaDataMap);
    }

    public copyFromRepositoryToDatastore_result() {
    }

    public copyFromRepositoryToDatastore_result(
      RimpException re)
    {
      this();
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public copyFromRepositoryToDatastore_result(copyFromRepositoryToDatastore_result other) {
      if (other.isSetRe()) {
        this.re = new RimpException(other.re);
      }
    }

    public copyFromRepositoryToDatastore_result deepCopy() {
      return new copyFromRepositoryToDatastore_result(this);
    }

    @Override
    public void clear() {
      this.re = null;
    }

    public RimpException getRe() {
      return this.re;
    }

    public copyFromRepositoryToDatastore_result setRe(RimpException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((RimpException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof copyFromRepositoryToDatastore_result)
        return this.equals((copyFromRepositoryToDatastore_result)that);
      return false;
    }

    public boolean equals(copyFromRepositoryToDatastore_result that) {
      if (that == null)
        return false;

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(copyFromRepositoryToDatastore_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      copyFromRepositoryToDatastore_result typedOther = (copyFromRepositoryToDatastore_result)other;

      lastComparison = Boolean.valueOf(isSetRe()).compareTo(typedOther.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, typedOther.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("copyFromRepositoryToDatastore_result(");
      boolean first = true;

      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class copyFromRepositoryToDatastore_resultStandardSchemeFactory implements SchemeFactory {
      public copyFromRepositoryToDatastore_resultStandardScheme getScheme() {
        return new copyFromRepositoryToDatastore_resultStandardScheme();
      }
    }

    private static class copyFromRepositoryToDatastore_resultStandardScheme extends StandardScheme<copyFromRepositoryToDatastore_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, copyFromRepositoryToDatastore_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new RimpException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, copyFromRepositoryToDatastore_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class copyFromRepositoryToDatastore_resultTupleSchemeFactory implements SchemeFactory {
      public copyFromRepositoryToDatastore_resultTupleScheme getScheme() {
        return new copyFromRepositoryToDatastore_resultTupleScheme();
      }
    }

    private static class copyFromRepositoryToDatastore_resultTupleScheme extends TupleScheme<copyFromRepositoryToDatastore_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, copyFromRepositoryToDatastore_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRe()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, copyFromRepositoryToDatastore_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.re = new RimpException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class deleteVirtualImageFromDatastore_args implements org.apache.thrift.TBase<deleteVirtualImageFromDatastore_args, deleteVirtualImageFromDatastore_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteVirtualImageFromDatastore_args");

    private static final org.apache.thrift.protocol.TField DATASTORE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("datastorePath", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VIRTUAL_MACHINE_UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("virtualMachineUUID", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteVirtualImageFromDatastore_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteVirtualImageFromDatastore_argsTupleSchemeFactory());
    }

    public String datastorePath; // required
    public String virtualMachineUUID; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATASTORE_PATH((short)1, "datastorePath"),
      VIRTUAL_MACHINE_UUID((short)2, "virtualMachineUUID");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATASTORE_PATH
            return DATASTORE_PATH;
          case 2: // VIRTUAL_MACHINE_UUID
            return VIRTUAL_MACHINE_UUID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATASTORE_PATH, new org.apache.thrift.meta_data.FieldMetaData("datastorePath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VIRTUAL_MACHINE_UUID, new org.apache.thrift.meta_data.FieldMetaData("virtualMachineUUID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteVirtualImageFromDatastore_args.class, metaDataMap);
    }

    public deleteVirtualImageFromDatastore_args() {
    }

    public deleteVirtualImageFromDatastore_args(
      String datastorePath,
      String virtualMachineUUID)
    {
      this();
      this.datastorePath = datastorePath;
      this.virtualMachineUUID = virtualMachineUUID;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteVirtualImageFromDatastore_args(deleteVirtualImageFromDatastore_args other) {
      if (other.isSetDatastorePath()) {
        this.datastorePath = other.datastorePath;
      }
      if (other.isSetVirtualMachineUUID()) {
        this.virtualMachineUUID = other.virtualMachineUUID;
      }
    }

    public deleteVirtualImageFromDatastore_args deepCopy() {
      return new deleteVirtualImageFromDatastore_args(this);
    }

    @Override
    public void clear() {
      this.datastorePath = null;
      this.virtualMachineUUID = null;
    }

    public String getDatastorePath() {
      return this.datastorePath;
    }

    public deleteVirtualImageFromDatastore_args setDatastorePath(String datastorePath) {
      this.datastorePath = datastorePath;
      return this;
    }

    public void unsetDatastorePath() {
      this.datastorePath = null;
    }

    /** Returns true if field datastorePath is set (has been assigned a value) and false otherwise */
    public boolean isSetDatastorePath() {
      return this.datastorePath != null;
    }

    public void setDatastorePathIsSet(boolean value) {
      if (!value) {
        this.datastorePath = null;
      }
    }

    public String getVirtualMachineUUID() {
      return this.virtualMachineUUID;
    }

    public deleteVirtualImageFromDatastore_args setVirtualMachineUUID(String virtualMachineUUID) {
      this.virtualMachineUUID = virtualMachineUUID;
      return this;
    }

    public void unsetVirtualMachineUUID() {
      this.virtualMachineUUID = null;
    }

    /** Returns true if field virtualMachineUUID is set (has been assigned a value) and false otherwise */
    public boolean isSetVirtualMachineUUID() {
      return this.virtualMachineUUID != null;
    }

    public void setVirtualMachineUUIDIsSet(boolean value) {
      if (!value) {
        this.virtualMachineUUID = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATASTORE_PATH:
        if (value == null) {
          unsetDatastorePath();
        } else {
          setDatastorePath((String)value);
        }
        break;

      case VIRTUAL_MACHINE_UUID:
        if (value == null) {
          unsetVirtualMachineUUID();
        } else {
          setVirtualMachineUUID((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATASTORE_PATH:
        return getDatastorePath();

      case VIRTUAL_MACHINE_UUID:
        return getVirtualMachineUUID();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATASTORE_PATH:
        return isSetDatastorePath();
      case VIRTUAL_MACHINE_UUID:
        return isSetVirtualMachineUUID();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteVirtualImageFromDatastore_args)
        return this.equals((deleteVirtualImageFromDatastore_args)that);
      return false;
    }

    public boolean equals(deleteVirtualImageFromDatastore_args that) {
      if (that == null)
        return false;

      boolean this_present_datastorePath = true && this.isSetDatastorePath();
      boolean that_present_datastorePath = true && that.isSetDatastorePath();
      if (this_present_datastorePath || that_present_datastorePath) {
        if (!(this_present_datastorePath && that_present_datastorePath))
          return false;
        if (!this.datastorePath.equals(that.datastorePath))
          return false;
      }

      boolean this_present_virtualMachineUUID = true && this.isSetVirtualMachineUUID();
      boolean that_present_virtualMachineUUID = true && that.isSetVirtualMachineUUID();
      if (this_present_virtualMachineUUID || that_present_virtualMachineUUID) {
        if (!(this_present_virtualMachineUUID && that_present_virtualMachineUUID))
          return false;
        if (!this.virtualMachineUUID.equals(that.virtualMachineUUID))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteVirtualImageFromDatastore_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteVirtualImageFromDatastore_args typedOther = (deleteVirtualImageFromDatastore_args)other;

      lastComparison = Boolean.valueOf(isSetDatastorePath()).compareTo(typedOther.isSetDatastorePath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatastorePath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datastorePath, typedOther.datastorePath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVirtualMachineUUID()).compareTo(typedOther.isSetVirtualMachineUUID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVirtualMachineUUID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.virtualMachineUUID, typedOther.virtualMachineUUID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteVirtualImageFromDatastore_args(");
      boolean first = true;

      sb.append("datastorePath:");
      if (this.datastorePath == null) {
        sb.append("null");
      } else {
        sb.append(this.datastorePath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("virtualMachineUUID:");
      if (this.virtualMachineUUID == null) {
        sb.append("null");
      } else {
        sb.append(this.virtualMachineUUID);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteVirtualImageFromDatastore_argsStandardSchemeFactory implements SchemeFactory {
      public deleteVirtualImageFromDatastore_argsStandardScheme getScheme() {
        return new deleteVirtualImageFromDatastore_argsStandardScheme();
      }
    }

    private static class deleteVirtualImageFromDatastore_argsStandardScheme extends StandardScheme<deleteVirtualImageFromDatastore_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteVirtualImageFromDatastore_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATASTORE_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.datastorePath = iprot.readString();
                struct.setDatastorePathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VIRTUAL_MACHINE_UUID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.virtualMachineUUID = iprot.readString();
                struct.setVirtualMachineUUIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteVirtualImageFromDatastore_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.datastorePath != null) {
          oprot.writeFieldBegin(DATASTORE_PATH_FIELD_DESC);
          oprot.writeString(struct.datastorePath);
          oprot.writeFieldEnd();
        }
        if (struct.virtualMachineUUID != null) {
          oprot.writeFieldBegin(VIRTUAL_MACHINE_UUID_FIELD_DESC);
          oprot.writeString(struct.virtualMachineUUID);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteVirtualImageFromDatastore_argsTupleSchemeFactory implements SchemeFactory {
      public deleteVirtualImageFromDatastore_argsTupleScheme getScheme() {
        return new deleteVirtualImageFromDatastore_argsTupleScheme();
      }
    }

    private static class deleteVirtualImageFromDatastore_argsTupleScheme extends TupleScheme<deleteVirtualImageFromDatastore_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteVirtualImageFromDatastore_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDatastorePath()) {
          optionals.set(0);
        }
        if (struct.isSetVirtualMachineUUID()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDatastorePath()) {
          oprot.writeString(struct.datastorePath);
        }
        if (struct.isSetVirtualMachineUUID()) {
          oprot.writeString(struct.virtualMachineUUID);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteVirtualImageFromDatastore_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.datastorePath = iprot.readString();
          struct.setDatastorePathIsSet(true);
        }
        if (incoming.get(1)) {
          struct.virtualMachineUUID = iprot.readString();
          struct.setVirtualMachineUUIDIsSet(true);
        }
      }
    }

  }

  public static class deleteVirtualImageFromDatastore_result implements org.apache.thrift.TBase<deleteVirtualImageFromDatastore_result, deleteVirtualImageFromDatastore_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteVirtualImageFromDatastore_result");

    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteVirtualImageFromDatastore_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteVirtualImageFromDatastore_resultTupleSchemeFactory());
    }

    public RimpException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RE((short)1, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteVirtualImageFromDatastore_result.class, metaDataMap);
    }

    public deleteVirtualImageFromDatastore_result() {
    }

    public deleteVirtualImageFromDatastore_result(
      RimpException re)
    {
      this();
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteVirtualImageFromDatastore_result(deleteVirtualImageFromDatastore_result other) {
      if (other.isSetRe()) {
        this.re = new RimpException(other.re);
      }
    }

    public deleteVirtualImageFromDatastore_result deepCopy() {
      return new deleteVirtualImageFromDatastore_result(this);
    }

    @Override
    public void clear() {
      this.re = null;
    }

    public RimpException getRe() {
      return this.re;
    }

    public deleteVirtualImageFromDatastore_result setRe(RimpException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((RimpException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteVirtualImageFromDatastore_result)
        return this.equals((deleteVirtualImageFromDatastore_result)that);
      return false;
    }

    public boolean equals(deleteVirtualImageFromDatastore_result that) {
      if (that == null)
        return false;

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteVirtualImageFromDatastore_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteVirtualImageFromDatastore_result typedOther = (deleteVirtualImageFromDatastore_result)other;

      lastComparison = Boolean.valueOf(isSetRe()).compareTo(typedOther.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, typedOther.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteVirtualImageFromDatastore_result(");
      boolean first = true;

      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteVirtualImageFromDatastore_resultStandardSchemeFactory implements SchemeFactory {
      public deleteVirtualImageFromDatastore_resultStandardScheme getScheme() {
        return new deleteVirtualImageFromDatastore_resultStandardScheme();
      }
    }

    private static class deleteVirtualImageFromDatastore_resultStandardScheme extends StandardScheme<deleteVirtualImageFromDatastore_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteVirtualImageFromDatastore_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new RimpException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteVirtualImageFromDatastore_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteVirtualImageFromDatastore_resultTupleSchemeFactory implements SchemeFactory {
      public deleteVirtualImageFromDatastore_resultTupleScheme getScheme() {
        return new deleteVirtualImageFromDatastore_resultTupleScheme();
      }
    }

    private static class deleteVirtualImageFromDatastore_resultTupleScheme extends TupleScheme<deleteVirtualImageFromDatastore_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteVirtualImageFromDatastore_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRe()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteVirtualImageFromDatastore_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.re = new RimpException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class copyFromDatastoreToRepository_args implements org.apache.thrift.TBase<copyFromDatastoreToRepository_args, copyFromDatastoreToRepository_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("copyFromDatastoreToRepository_args");

    private static final org.apache.thrift.protocol.TField VIRTUAL_MACHINE_UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("virtualMachineUUID", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SNAPSHOT_FIELD_DESC = new org.apache.thrift.protocol.TField("snapshot", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DESTINATION_REPOSITORY_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("destinationRepositoryPath", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SOURCE_DATASTORE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceDatastorePath", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new copyFromDatastoreToRepository_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new copyFromDatastoreToRepository_argsTupleSchemeFactory());
    }

    public String virtualMachineUUID; // required
    public String snapshot; // required
    public String destinationRepositoryPath; // required
    public String sourceDatastorePath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VIRTUAL_MACHINE_UUID((short)1, "virtualMachineUUID"),
      SNAPSHOT((short)2, "snapshot"),
      DESTINATION_REPOSITORY_PATH((short)3, "destinationRepositoryPath"),
      SOURCE_DATASTORE_PATH((short)4, "sourceDatastorePath");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VIRTUAL_MACHINE_UUID
            return VIRTUAL_MACHINE_UUID;
          case 2: // SNAPSHOT
            return SNAPSHOT;
          case 3: // DESTINATION_REPOSITORY_PATH
            return DESTINATION_REPOSITORY_PATH;
          case 4: // SOURCE_DATASTORE_PATH
            return SOURCE_DATASTORE_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VIRTUAL_MACHINE_UUID, new org.apache.thrift.meta_data.FieldMetaData("virtualMachineUUID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SNAPSHOT, new org.apache.thrift.meta_data.FieldMetaData("snapshot", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DESTINATION_REPOSITORY_PATH, new org.apache.thrift.meta_data.FieldMetaData("destinationRepositoryPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SOURCE_DATASTORE_PATH, new org.apache.thrift.meta_data.FieldMetaData("sourceDatastorePath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(copyFromDatastoreToRepository_args.class, metaDataMap);
    }

    public copyFromDatastoreToRepository_args() {
    }

    public copyFromDatastoreToRepository_args(
      String virtualMachineUUID,
      String snapshot,
      String destinationRepositoryPath,
      String sourceDatastorePath)
    {
      this();
      this.virtualMachineUUID = virtualMachineUUID;
      this.snapshot = snapshot;
      this.destinationRepositoryPath = destinationRepositoryPath;
      this.sourceDatastorePath = sourceDatastorePath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public copyFromDatastoreToRepository_args(copyFromDatastoreToRepository_args other) {
      if (other.isSetVirtualMachineUUID()) {
        this.virtualMachineUUID = other.virtualMachineUUID;
      }
      if (other.isSetSnapshot()) {
        this.snapshot = other.snapshot;
      }
      if (other.isSetDestinationRepositoryPath()) {
        this.destinationRepositoryPath = other.destinationRepositoryPath;
      }
      if (other.isSetSourceDatastorePath()) {
        this.sourceDatastorePath = other.sourceDatastorePath;
      }
    }

    public copyFromDatastoreToRepository_args deepCopy() {
      return new copyFromDatastoreToRepository_args(this);
    }

    @Override
    public void clear() {
      this.virtualMachineUUID = null;
      this.snapshot = null;
      this.destinationRepositoryPath = null;
      this.sourceDatastorePath = null;
    }

    public String getVirtualMachineUUID() {
      return this.virtualMachineUUID;
    }

    public copyFromDatastoreToRepository_args setVirtualMachineUUID(String virtualMachineUUID) {
      this.virtualMachineUUID = virtualMachineUUID;
      return this;
    }

    public void unsetVirtualMachineUUID() {
      this.virtualMachineUUID = null;
    }

    /** Returns true if field virtualMachineUUID is set (has been assigned a value) and false otherwise */
    public boolean isSetVirtualMachineUUID() {
      return this.virtualMachineUUID != null;
    }

    public void setVirtualMachineUUIDIsSet(boolean value) {
      if (!value) {
        this.virtualMachineUUID = null;
      }
    }

    public String getSnapshot() {
      return this.snapshot;
    }

    public copyFromDatastoreToRepository_args setSnapshot(String snapshot) {
      this.snapshot = snapshot;
      return this;
    }

    public void unsetSnapshot() {
      this.snapshot = null;
    }

    /** Returns true if field snapshot is set (has been assigned a value) and false otherwise */
    public boolean isSetSnapshot() {
      return this.snapshot != null;
    }

    public void setSnapshotIsSet(boolean value) {
      if (!value) {
        this.snapshot = null;
      }
    }

    public String getDestinationRepositoryPath() {
      return this.destinationRepositoryPath;
    }

    public copyFromDatastoreToRepository_args setDestinationRepositoryPath(String destinationRepositoryPath) {
      this.destinationRepositoryPath = destinationRepositoryPath;
      return this;
    }

    public void unsetDestinationRepositoryPath() {
      this.destinationRepositoryPath = null;
    }

    /** Returns true if field destinationRepositoryPath is set (has been assigned a value) and false otherwise */
    public boolean isSetDestinationRepositoryPath() {
      return this.destinationRepositoryPath != null;
    }

    public void setDestinationRepositoryPathIsSet(boolean value) {
      if (!value) {
        this.destinationRepositoryPath = null;
      }
    }

    public String getSourceDatastorePath() {
      return this.sourceDatastorePath;
    }

    public copyFromDatastoreToRepository_args setSourceDatastorePath(String sourceDatastorePath) {
      this.sourceDatastorePath = sourceDatastorePath;
      return this;
    }

    public void unsetSourceDatastorePath() {
      this.sourceDatastorePath = null;
    }

    /** Returns true if field sourceDatastorePath is set (has been assigned a value) and false otherwise */
    public boolean isSetSourceDatastorePath() {
      return this.sourceDatastorePath != null;
    }

    public void setSourceDatastorePathIsSet(boolean value) {
      if (!value) {
        this.sourceDatastorePath = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VIRTUAL_MACHINE_UUID:
        if (value == null) {
          unsetVirtualMachineUUID();
        } else {
          setVirtualMachineUUID((String)value);
        }
        break;

      case SNAPSHOT:
        if (value == null) {
          unsetSnapshot();
        } else {
          setSnapshot((String)value);
        }
        break;

      case DESTINATION_REPOSITORY_PATH:
        if (value == null) {
          unsetDestinationRepositoryPath();
        } else {
          setDestinationRepositoryPath((String)value);
        }
        break;

      case SOURCE_DATASTORE_PATH:
        if (value == null) {
          unsetSourceDatastorePath();
        } else {
          setSourceDatastorePath((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VIRTUAL_MACHINE_UUID:
        return getVirtualMachineUUID();

      case SNAPSHOT:
        return getSnapshot();

      case DESTINATION_REPOSITORY_PATH:
        return getDestinationRepositoryPath();

      case SOURCE_DATASTORE_PATH:
        return getSourceDatastorePath();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VIRTUAL_MACHINE_UUID:
        return isSetVirtualMachineUUID();
      case SNAPSHOT:
        return isSetSnapshot();
      case DESTINATION_REPOSITORY_PATH:
        return isSetDestinationRepositoryPath();
      case SOURCE_DATASTORE_PATH:
        return isSetSourceDatastorePath();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof copyFromDatastoreToRepository_args)
        return this.equals((copyFromDatastoreToRepository_args)that);
      return false;
    }

    public boolean equals(copyFromDatastoreToRepository_args that) {
      if (that == null)
        return false;

      boolean this_present_virtualMachineUUID = true && this.isSetVirtualMachineUUID();
      boolean that_present_virtualMachineUUID = true && that.isSetVirtualMachineUUID();
      if (this_present_virtualMachineUUID || that_present_virtualMachineUUID) {
        if (!(this_present_virtualMachineUUID && that_present_virtualMachineUUID))
          return false;
        if (!this.virtualMachineUUID.equals(that.virtualMachineUUID))
          return false;
      }

      boolean this_present_snapshot = true && this.isSetSnapshot();
      boolean that_present_snapshot = true && that.isSetSnapshot();
      if (this_present_snapshot || that_present_snapshot) {
        if (!(this_present_snapshot && that_present_snapshot))
          return false;
        if (!this.snapshot.equals(that.snapshot))
          return false;
      }

      boolean this_present_destinationRepositoryPath = true && this.isSetDestinationRepositoryPath();
      boolean that_present_destinationRepositoryPath = true && that.isSetDestinationRepositoryPath();
      if (this_present_destinationRepositoryPath || that_present_destinationRepositoryPath) {
        if (!(this_present_destinationRepositoryPath && that_present_destinationRepositoryPath))
          return false;
        if (!this.destinationRepositoryPath.equals(that.destinationRepositoryPath))
          return false;
      }

      boolean this_present_sourceDatastorePath = true && this.isSetSourceDatastorePath();
      boolean that_present_sourceDatastorePath = true && that.isSetSourceDatastorePath();
      if (this_present_sourceDatastorePath || that_present_sourceDatastorePath) {
        if (!(this_present_sourceDatastorePath && that_present_sourceDatastorePath))
          return false;
        if (!this.sourceDatastorePath.equals(that.sourceDatastorePath))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(copyFromDatastoreToRepository_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      copyFromDatastoreToRepository_args typedOther = (copyFromDatastoreToRepository_args)other;

      lastComparison = Boolean.valueOf(isSetVirtualMachineUUID()).compareTo(typedOther.isSetVirtualMachineUUID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVirtualMachineUUID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.virtualMachineUUID, typedOther.virtualMachineUUID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSnapshot()).compareTo(typedOther.isSetSnapshot());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSnapshot()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snapshot, typedOther.snapshot);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDestinationRepositoryPath()).compareTo(typedOther.isSetDestinationRepositoryPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDestinationRepositoryPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.destinationRepositoryPath, typedOther.destinationRepositoryPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSourceDatastorePath()).compareTo(typedOther.isSetSourceDatastorePath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSourceDatastorePath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceDatastorePath, typedOther.sourceDatastorePath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("copyFromDatastoreToRepository_args(");
      boolean first = true;

      sb.append("virtualMachineUUID:");
      if (this.virtualMachineUUID == null) {
        sb.append("null");
      } else {
        sb.append(this.virtualMachineUUID);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("snapshot:");
      if (this.snapshot == null) {
        sb.append("null");
      } else {
        sb.append(this.snapshot);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("destinationRepositoryPath:");
      if (this.destinationRepositoryPath == null) {
        sb.append("null");
      } else {
        sb.append(this.destinationRepositoryPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sourceDatastorePath:");
      if (this.sourceDatastorePath == null) {
        sb.append("null");
      } else {
        sb.append(this.sourceDatastorePath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class copyFromDatastoreToRepository_argsStandardSchemeFactory implements SchemeFactory {
      public copyFromDatastoreToRepository_argsStandardScheme getScheme() {
        return new copyFromDatastoreToRepository_argsStandardScheme();
      }
    }

    private static class copyFromDatastoreToRepository_argsStandardScheme extends StandardScheme<copyFromDatastoreToRepository_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, copyFromDatastoreToRepository_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VIRTUAL_MACHINE_UUID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.virtualMachineUUID = iprot.readString();
                struct.setVirtualMachineUUIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SNAPSHOT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.snapshot = iprot.readString();
                struct.setSnapshotIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DESTINATION_REPOSITORY_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.destinationRepositoryPath = iprot.readString();
                struct.setDestinationRepositoryPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SOURCE_DATASTORE_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sourceDatastorePath = iprot.readString();
                struct.setSourceDatastorePathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, copyFromDatastoreToRepository_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.virtualMachineUUID != null) {
          oprot.writeFieldBegin(VIRTUAL_MACHINE_UUID_FIELD_DESC);
          oprot.writeString(struct.virtualMachineUUID);
          oprot.writeFieldEnd();
        }
        if (struct.snapshot != null) {
          oprot.writeFieldBegin(SNAPSHOT_FIELD_DESC);
          oprot.writeString(struct.snapshot);
          oprot.writeFieldEnd();
        }
        if (struct.destinationRepositoryPath != null) {
          oprot.writeFieldBegin(DESTINATION_REPOSITORY_PATH_FIELD_DESC);
          oprot.writeString(struct.destinationRepositoryPath);
          oprot.writeFieldEnd();
        }
        if (struct.sourceDatastorePath != null) {
          oprot.writeFieldBegin(SOURCE_DATASTORE_PATH_FIELD_DESC);
          oprot.writeString(struct.sourceDatastorePath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class copyFromDatastoreToRepository_argsTupleSchemeFactory implements SchemeFactory {
      public copyFromDatastoreToRepository_argsTupleScheme getScheme() {
        return new copyFromDatastoreToRepository_argsTupleScheme();
      }
    }

    private static class copyFromDatastoreToRepository_argsTupleScheme extends TupleScheme<copyFromDatastoreToRepository_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, copyFromDatastoreToRepository_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVirtualMachineUUID()) {
          optionals.set(0);
        }
        if (struct.isSetSnapshot()) {
          optionals.set(1);
        }
        if (struct.isSetDestinationRepositoryPath()) {
          optionals.set(2);
        }
        if (struct.isSetSourceDatastorePath()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetVirtualMachineUUID()) {
          oprot.writeString(struct.virtualMachineUUID);
        }
        if (struct.isSetSnapshot()) {
          oprot.writeString(struct.snapshot);
        }
        if (struct.isSetDestinationRepositoryPath()) {
          oprot.writeString(struct.destinationRepositoryPath);
        }
        if (struct.isSetSourceDatastorePath()) {
          oprot.writeString(struct.sourceDatastorePath);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, copyFromDatastoreToRepository_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.virtualMachineUUID = iprot.readString();
          struct.setVirtualMachineUUIDIsSet(true);
        }
        if (incoming.get(1)) {
          struct.snapshot = iprot.readString();
          struct.setSnapshotIsSet(true);
        }
        if (incoming.get(2)) {
          struct.destinationRepositoryPath = iprot.readString();
          struct.setDestinationRepositoryPathIsSet(true);
        }
        if (incoming.get(3)) {
          struct.sourceDatastorePath = iprot.readString();
          struct.setSourceDatastorePathIsSet(true);
        }
      }
    }

  }

  public static class copyFromDatastoreToRepository_result implements org.apache.thrift.TBase<copyFromDatastoreToRepository_result, copyFromDatastoreToRepository_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("copyFromDatastoreToRepository_result");

    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new copyFromDatastoreToRepository_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new copyFromDatastoreToRepository_resultTupleSchemeFactory());
    }

    public RimpException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RE((short)1, "re");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(copyFromDatastoreToRepository_result.class, metaDataMap);
    }

    public copyFromDatastoreToRepository_result() {
    }

    public copyFromDatastoreToRepository_result(
      RimpException re)
    {
      this();
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public copyFromDatastoreToRepository_result(copyFromDatastoreToRepository_result other) {
      if (other.isSetRe()) {
        this.re = new RimpException(other.re);
      }
    }

    public copyFromDatastoreToRepository_result deepCopy() {
      return new copyFromDatastoreToRepository_result(this);
    }

    @Override
    public void clear() {
      this.re = null;
    }

    public RimpException getRe() {
      return this.re;
    }

    public copyFromDatastoreToRepository_result setRe(RimpException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((RimpException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RE:
        return getRe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RE:
        return isSetRe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof copyFromDatastoreToRepository_result)
        return this.equals((copyFromDatastoreToRepository_result)that);
      return false;
    }

    public boolean equals(copyFromDatastoreToRepository_result that) {
      if (that == null)
        return false;

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(copyFromDatastoreToRepository_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      copyFromDatastoreToRepository_result typedOther = (copyFromDatastoreToRepository_result)other;

      lastComparison = Boolean.valueOf(isSetRe()).compareTo(typedOther.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, typedOther.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("copyFromDatastoreToRepository_result(");
      boolean first = true;

      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class copyFromDatastoreToRepository_resultStandardSchemeFactory implements SchemeFactory {
      public copyFromDatastoreToRepository_resultStandardScheme getScheme() {
        return new copyFromDatastoreToRepository_resultStandardScheme();
      }
    }

    private static class copyFromDatastoreToRepository_resultStandardScheme extends StandardScheme<copyFromDatastoreToRepository_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, copyFromDatastoreToRepository_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new RimpException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, copyFromDatastoreToRepository_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class copyFromDatastoreToRepository_resultTupleSchemeFactory implements SchemeFactory {
      public copyFromDatastoreToRepository_resultTupleScheme getScheme() {
        return new copyFromDatastoreToRepository_resultTupleScheme();
      }
    }

    private static class copyFromDatastoreToRepository_resultTupleScheme extends TupleScheme<copyFromDatastoreToRepository_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, copyFromDatastoreToRepository_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRe()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, copyFromDatastoreToRepository_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.re = new RimpException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

  }

  public static class createVLAN_args implements org.apache.thrift.TBase<createVLAN_args, createVLAN_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createVLAN_args");

    private static final org.apache.thrift.protocol.TField VLAN_TAG_FIELD_DESC = new org.apache.thrift.protocol.TField("vlanTag", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField VLAN_INTERFACE_FIELD_DESC = new org.apache.thrift.protocol.TField("vlanInterface", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField BRIDGE_INTERFACE_FIELD_DESC = new org.apache.thrift.protocol.TField("bridgeInterface", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createVLAN_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createVLAN_argsTupleSchemeFactory());
    }

    public int vlanTag; // required
    public String vlanInterface; // required
    public String bridgeInterface; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VLAN_TAG((short)1, "vlanTag"),
      VLAN_INTERFACE((short)2, "vlanInterface"),
      BRIDGE_INTERFACE((short)3, "bridgeInterface");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VLAN_TAG
            return VLAN_TAG;
          case 2: // VLAN_INTERFACE
            return VLAN_INTERFACE;
          case 3: // BRIDGE_INTERFACE
            return BRIDGE_INTERFACE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VLANTAG_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VLAN_TAG, new org.apache.thrift.meta_data.FieldMetaData("vlanTag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VLAN_INTERFACE, new org.apache.thrift.meta_data.FieldMetaData("vlanInterface", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BRIDGE_INTERFACE, new org.apache.thrift.meta_data.FieldMetaData("bridgeInterface", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createVLAN_args.class, metaDataMap);
    }

    public createVLAN_args() {
    }

    public createVLAN_args(
      int vlanTag,
      String vlanInterface,
      String bridgeInterface)
    {
      this();
      this.vlanTag = vlanTag;
      setVlanTagIsSet(true);
      this.vlanInterface = vlanInterface;
      this.bridgeInterface = bridgeInterface;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createVLAN_args(createVLAN_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.vlanTag = other.vlanTag;
      if (other.isSetVlanInterface()) {
        this.vlanInterface = other.vlanInterface;
      }
      if (other.isSetBridgeInterface()) {
        this.bridgeInterface = other.bridgeInterface;
      }
    }

    public createVLAN_args deepCopy() {
      return new createVLAN_args(this);
    }

    @Override
    public void clear() {
      setVlanTagIsSet(false);
      this.vlanTag = 0;
      this.vlanInterface = null;
      this.bridgeInterface = null;
    }

    public int getVlanTag() {
      return this.vlanTag;
    }

    public createVLAN_args setVlanTag(int vlanTag) {
      this.vlanTag = vlanTag;
      setVlanTagIsSet(true);
      return this;
    }

    public void unsetVlanTag() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VLANTAG_ISSET_ID);
    }

    /** Returns true if field vlanTag is set (has been assigned a value) and false otherwise */
    public boolean isSetVlanTag() {
      return EncodingUtils.testBit(__isset_bitfield, __VLANTAG_ISSET_ID);
    }

    public void setVlanTagIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VLANTAG_ISSET_ID, value);
    }

    public String getVlanInterface() {
      return this.vlanInterface;
    }

    public createVLAN_args setVlanInterface(String vlanInterface) {
      this.vlanInterface = vlanInterface;
      return this;
    }

    public void unsetVlanInterface() {
      this.vlanInterface = null;
    }

    /** Returns true if field vlanInterface is set (has been assigned a value) and false otherwise */
    public boolean isSetVlanInterface() {
      return this.vlanInterface != null;
    }

    public void setVlanInterfaceIsSet(boolean value) {
      if (!value) {
        this.vlanInterface = null;
      }
    }

    public String getBridgeInterface() {
      return this.bridgeInterface;
    }

    public createVLAN_args setBridgeInterface(String bridgeInterface) {
      this.bridgeInterface = bridgeInterface;
      return this;
    }

    public void unsetBridgeInterface() {
      this.bridgeInterface = null;
    }

    /** Returns true if field bridgeInterface is set (has been assigned a value) and false otherwise */
    public boolean isSetBridgeInterface() {
      return this.bridgeInterface != null;
    }

    public void setBridgeInterfaceIsSet(boolean value) {
      if (!value) {
        this.bridgeInterface = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VLAN_TAG:
        if (value == null) {
          unsetVlanTag();
        } else {
          setVlanTag((Integer)value);
        }
        break;

      case VLAN_INTERFACE:
        if (value == null) {
          unsetVlanInterface();
        } else {
          setVlanInterface((String)value);
        }
        break;

      case BRIDGE_INTERFACE:
        if (value == null) {
          unsetBridgeInterface();
        } else {
          setBridgeInterface((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VLAN_TAG:
        return Integer.valueOf(getVlanTag());

      case VLAN_INTERFACE:
        return getVlanInterface();

      case BRIDGE_INTERFACE:
        return getBridgeInterface();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VLAN_TAG:
        return isSetVlanTag();
      case VLAN_INTERFACE:
        return isSetVlanInterface();
      case BRIDGE_INTERFACE:
        return isSetBridgeInterface();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createVLAN_args)
        return this.equals((createVLAN_args)that);
      return false;
    }

    public boolean equals(createVLAN_args that) {
      if (that == null)
        return false;

      boolean this_present_vlanTag = true;
      boolean that_present_vlanTag = true;
      if (this_present_vlanTag || that_present_vlanTag) {
        if (!(this_present_vlanTag && that_present_vlanTag))
          return false;
        if (this.vlanTag != that.vlanTag)
          return false;
      }

      boolean this_present_vlanInterface = true && this.isSetVlanInterface();
      boolean that_present_vlanInterface = true && that.isSetVlanInterface();
      if (this_present_vlanInterface || that_present_vlanInterface) {
        if (!(this_present_vlanInterface && that_present_vlanInterface))
          return false;
        if (!this.vlanInterface.equals(that.vlanInterface))
          return false;
      }

      boolean this_present_bridgeInterface = true && this.isSetBridgeInterface();
      boolean that_present_bridgeInterface = true && that.isSetBridgeInterface();
      if (this_present_bridgeInterface || that_present_bridgeInterface) {
        if (!(this_present_bridgeInterface && that_present_bridgeInterface))
          return false;
        if (!this.bridgeInterface.equals(that.bridgeInterface))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createVLAN_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createVLAN_args typedOther = (createVLAN_args)other;

      lastComparison = Boolean.valueOf(isSetVlanTag()).compareTo(typedOther.isSetVlanTag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVlanTag()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vlanTag, typedOther.vlanTag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVlanInterface()).compareTo(typedOther.isSetVlanInterface());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVlanInterface()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vlanInterface, typedOther.vlanInterface);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBridgeInterface()).compareTo(typedOther.isSetBridgeInterface());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBridgeInterface()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bridgeInterface, typedOther.bridgeInterface);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createVLAN_args(");
      boolean first = true;

      sb.append("vlanTag:");
      sb.append(this.vlanTag);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vlanInterface:");
      if (this.vlanInterface == null) {
        sb.append("null");
      } else {
        sb.append(this.vlanInterface);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bridgeInterface:");
      if (this.bridgeInterface == null) {
        sb.append("null");
      } else {
        sb.append(this.bridgeInterface);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createVLAN_argsStandardSchemeFactory implements SchemeFactory {
      public createVLAN_argsStandardScheme getScheme() {
        return new createVLAN_argsStandardScheme();
      }
    }

    private static class createVLAN_argsStandardScheme extends StandardScheme<createVLAN_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createVLAN_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VLAN_TAG
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vlanTag = iprot.readI32();
                struct.setVlanTagIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VLAN_INTERFACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.vlanInterface = iprot.readString();
                struct.setVlanInterfaceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BRIDGE_INTERFACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bridgeInterface = iprot.readString();
                struct.setBridgeInterfaceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createVLAN_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VLAN_TAG_FIELD_DESC);
        oprot.writeI32(struct.vlanTag);
        oprot.writeFieldEnd();
        if (struct.vlanInterface != null) {
          oprot.writeFieldBegin(VLAN_INTERFACE_FIELD_DESC);
          oprot.writeString(struct.vlanInterface);
          oprot.writeFieldEnd();
        }
        if (struct.bridgeInterface != null) {
          oprot.writeFieldBegin(BRIDGE_INTERFACE_FIELD_DESC);
          oprot.writeString(struct.bridgeInterface);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createVLAN_argsTupleSchemeFactory implements SchemeFactory {
      public createVLAN_argsTupleScheme getScheme() {
        return new createVLAN_argsTupleScheme();
      }
    }

    private static class createVLAN_argsTupleScheme extends TupleScheme<createVLAN_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createVLAN_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVlanTag()) {
          optionals.set(0);
        }
        if (struct.isSetVlanInterface()) {
          optionals.set(1);
        }
        if (struct.isSetBridgeInterface()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetVlanTag()) {
          oprot.writeI32(struct.vlanTag);
        }
        if (struct.isSetVlanInterface()) {
          oprot.writeString(struct.vlanInterface);
        }
        if (struct.isSetBridgeInterface()) {
          oprot.writeString(struct.bridgeInterface);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createVLAN_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.vlanTag = iprot.readI32();
          struct.setVlanTagIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vlanInterface = iprot.readString();
          struct.setVlanInterfaceIsSet(true);
        }
        if (incoming.get(2)) {
          struct.bridgeInterface = iprot.readString();
          struct.setBridgeInterfaceIsSet(true);
        }
      }
    }

  }

  public static class createVLAN_result implements org.apache.thrift.TBase<createVLAN_result, createVLAN_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createVLAN_result");

    private static final org.apache.thrift.protocol.TField VE_FIELD_DESC = new org.apache.thrift.protocol.TField("ve", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createVLAN_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createVLAN_resultTupleSchemeFactory());
    }

    public VLanException ve; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VE((short)1, "ve");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VE
            return VE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VE, new org.apache.thrift.meta_data.FieldMetaData("ve", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createVLAN_result.class, metaDataMap);
    }

    public createVLAN_result() {
    }

    public createVLAN_result(
      VLanException ve)
    {
      this();
      this.ve = ve;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createVLAN_result(createVLAN_result other) {
      if (other.isSetVe()) {
        this.ve = new VLanException(other.ve);
      }
    }

    public createVLAN_result deepCopy() {
      return new createVLAN_result(this);
    }

    @Override
    public void clear() {
      this.ve = null;
    }

    public VLanException getVe() {
      return this.ve;
    }

    public createVLAN_result setVe(VLanException ve) {
      this.ve = ve;
      return this;
    }

    public void unsetVe() {
      this.ve = null;
    }

    /** Returns true if field ve is set (has been assigned a value) and false otherwise */
    public boolean isSetVe() {
      return this.ve != null;
    }

    public void setVeIsSet(boolean value) {
      if (!value) {
        this.ve = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VE:
        if (value == null) {
          unsetVe();
        } else {
          setVe((VLanException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VE:
        return getVe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VE:
        return isSetVe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createVLAN_result)
        return this.equals((createVLAN_result)that);
      return false;
    }

    public boolean equals(createVLAN_result that) {
      if (that == null)
        return false;

      boolean this_present_ve = true && this.isSetVe();
      boolean that_present_ve = true && that.isSetVe();
      if (this_present_ve || that_present_ve) {
        if (!(this_present_ve && that_present_ve))
          return false;
        if (!this.ve.equals(that.ve))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createVLAN_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createVLAN_result typedOther = (createVLAN_result)other;

      lastComparison = Boolean.valueOf(isSetVe()).compareTo(typedOther.isSetVe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ve, typedOther.ve);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createVLAN_result(");
      boolean first = true;

      sb.append("ve:");
      if (this.ve == null) {
        sb.append("null");
      } else {
        sb.append(this.ve);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createVLAN_resultStandardSchemeFactory implements SchemeFactory {
      public createVLAN_resultStandardScheme getScheme() {
        return new createVLAN_resultStandardScheme();
      }
    }

    private static class createVLAN_resultStandardScheme extends StandardScheme<createVLAN_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createVLAN_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ve = new VLanException();
                struct.ve.read(iprot);
                struct.setVeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createVLAN_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ve != null) {
          oprot.writeFieldBegin(VE_FIELD_DESC);
          struct.ve.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createVLAN_resultTupleSchemeFactory implements SchemeFactory {
      public createVLAN_resultTupleScheme getScheme() {
        return new createVLAN_resultTupleScheme();
      }
    }

    private static class createVLAN_resultTupleScheme extends TupleScheme<createVLAN_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createVLAN_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVe()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetVe()) {
          struct.ve.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createVLAN_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ve = new VLanException();
          struct.ve.read(iprot);
          struct.setVeIsSet(true);
        }
      }
    }

  }

  public static class deleteVLAN_args implements org.apache.thrift.TBase<deleteVLAN_args, deleteVLAN_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteVLAN_args");

    private static final org.apache.thrift.protocol.TField VLAN_TAG_FIELD_DESC = new org.apache.thrift.protocol.TField("vlanTag", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField VLAN_INTERFACE_FIELD_DESC = new org.apache.thrift.protocol.TField("vlanInterface", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField BRIDGE_INTERFACE_FIELD_DESC = new org.apache.thrift.protocol.TField("bridgeInterface", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteVLAN_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteVLAN_argsTupleSchemeFactory());
    }

    public int vlanTag; // required
    public String vlanInterface; // required
    public String bridgeInterface; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VLAN_TAG((short)1, "vlanTag"),
      VLAN_INTERFACE((short)2, "vlanInterface"),
      BRIDGE_INTERFACE((short)3, "bridgeInterface");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VLAN_TAG
            return VLAN_TAG;
          case 2: // VLAN_INTERFACE
            return VLAN_INTERFACE;
          case 3: // BRIDGE_INTERFACE
            return BRIDGE_INTERFACE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VLANTAG_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VLAN_TAG, new org.apache.thrift.meta_data.FieldMetaData("vlanTag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VLAN_INTERFACE, new org.apache.thrift.meta_data.FieldMetaData("vlanInterface", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BRIDGE_INTERFACE, new org.apache.thrift.meta_data.FieldMetaData("bridgeInterface", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteVLAN_args.class, metaDataMap);
    }

    public deleteVLAN_args() {
    }

    public deleteVLAN_args(
      int vlanTag,
      String vlanInterface,
      String bridgeInterface)
    {
      this();
      this.vlanTag = vlanTag;
      setVlanTagIsSet(true);
      this.vlanInterface = vlanInterface;
      this.bridgeInterface = bridgeInterface;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteVLAN_args(deleteVLAN_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.vlanTag = other.vlanTag;
      if (other.isSetVlanInterface()) {
        this.vlanInterface = other.vlanInterface;
      }
      if (other.isSetBridgeInterface()) {
        this.bridgeInterface = other.bridgeInterface;
      }
    }

    public deleteVLAN_args deepCopy() {
      return new deleteVLAN_args(this);
    }

    @Override
    public void clear() {
      setVlanTagIsSet(false);
      this.vlanTag = 0;
      this.vlanInterface = null;
      this.bridgeInterface = null;
    }

    public int getVlanTag() {
      return this.vlanTag;
    }

    public deleteVLAN_args setVlanTag(int vlanTag) {
      this.vlanTag = vlanTag;
      setVlanTagIsSet(true);
      return this;
    }

    public void unsetVlanTag() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VLANTAG_ISSET_ID);
    }

    /** Returns true if field vlanTag is set (has been assigned a value) and false otherwise */
    public boolean isSetVlanTag() {
      return EncodingUtils.testBit(__isset_bitfield, __VLANTAG_ISSET_ID);
    }

    public void setVlanTagIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VLANTAG_ISSET_ID, value);
    }

    public String getVlanInterface() {
      return this.vlanInterface;
    }

    public deleteVLAN_args setVlanInterface(String vlanInterface) {
      this.vlanInterface = vlanInterface;
      return this;
    }

    public void unsetVlanInterface() {
      this.vlanInterface = null;
    }

    /** Returns true if field vlanInterface is set (has been assigned a value) and false otherwise */
    public boolean isSetVlanInterface() {
      return this.vlanInterface != null;
    }

    public void setVlanInterfaceIsSet(boolean value) {
      if (!value) {
        this.vlanInterface = null;
      }
    }

    public String getBridgeInterface() {
      return this.bridgeInterface;
    }

    public deleteVLAN_args setBridgeInterface(String bridgeInterface) {
      this.bridgeInterface = bridgeInterface;
      return this;
    }

    public void unsetBridgeInterface() {
      this.bridgeInterface = null;
    }

    /** Returns true if field bridgeInterface is set (has been assigned a value) and false otherwise */
    public boolean isSetBridgeInterface() {
      return this.bridgeInterface != null;
    }

    public void setBridgeInterfaceIsSet(boolean value) {
      if (!value) {
        this.bridgeInterface = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VLAN_TAG:
        if (value == null) {
          unsetVlanTag();
        } else {
          setVlanTag((Integer)value);
        }
        break;

      case VLAN_INTERFACE:
        if (value == null) {
          unsetVlanInterface();
        } else {
          setVlanInterface((String)value);
        }
        break;

      case BRIDGE_INTERFACE:
        if (value == null) {
          unsetBridgeInterface();
        } else {
          setBridgeInterface((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VLAN_TAG:
        return Integer.valueOf(getVlanTag());

      case VLAN_INTERFACE:
        return getVlanInterface();

      case BRIDGE_INTERFACE:
        return getBridgeInterface();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VLAN_TAG:
        return isSetVlanTag();
      case VLAN_INTERFACE:
        return isSetVlanInterface();
      case BRIDGE_INTERFACE:
        return isSetBridgeInterface();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteVLAN_args)
        return this.equals((deleteVLAN_args)that);
      return false;
    }

    public boolean equals(deleteVLAN_args that) {
      if (that == null)
        return false;

      boolean this_present_vlanTag = true;
      boolean that_present_vlanTag = true;
      if (this_present_vlanTag || that_present_vlanTag) {
        if (!(this_present_vlanTag && that_present_vlanTag))
          return false;
        if (this.vlanTag != that.vlanTag)
          return false;
      }

      boolean this_present_vlanInterface = true && this.isSetVlanInterface();
      boolean that_present_vlanInterface = true && that.isSetVlanInterface();
      if (this_present_vlanInterface || that_present_vlanInterface) {
        if (!(this_present_vlanInterface && that_present_vlanInterface))
          return false;
        if (!this.vlanInterface.equals(that.vlanInterface))
          return false;
      }

      boolean this_present_bridgeInterface = true && this.isSetBridgeInterface();
      boolean that_present_bridgeInterface = true && that.isSetBridgeInterface();
      if (this_present_bridgeInterface || that_present_bridgeInterface) {
        if (!(this_present_bridgeInterface && that_present_bridgeInterface))
          return false;
        if (!this.bridgeInterface.equals(that.bridgeInterface))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteVLAN_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteVLAN_args typedOther = (deleteVLAN_args)other;

      lastComparison = Boolean.valueOf(isSetVlanTag()).compareTo(typedOther.isSetVlanTag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVlanTag()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vlanTag, typedOther.vlanTag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVlanInterface()).compareTo(typedOther.isSetVlanInterface());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVlanInterface()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vlanInterface, typedOther.vlanInterface);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetBridgeInterface()).compareTo(typedOther.isSetBridgeInterface());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBridgeInterface()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bridgeInterface, typedOther.bridgeInterface);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteVLAN_args(");
      boolean first = true;

      sb.append("vlanTag:");
      sb.append(this.vlanTag);
      first = false;
      if (!first) sb.append(", ");
      sb.append("vlanInterface:");
      if (this.vlanInterface == null) {
        sb.append("null");
      } else {
        sb.append(this.vlanInterface);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("bridgeInterface:");
      if (this.bridgeInterface == null) {
        sb.append("null");
      } else {
        sb.append(this.bridgeInterface);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteVLAN_argsStandardSchemeFactory implements SchemeFactory {
      public deleteVLAN_argsStandardScheme getScheme() {
        return new deleteVLAN_argsStandardScheme();
      }
    }

    private static class deleteVLAN_argsStandardScheme extends StandardScheme<deleteVLAN_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteVLAN_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VLAN_TAG
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.vlanTag = iprot.readI32();
                struct.setVlanTagIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VLAN_INTERFACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.vlanInterface = iprot.readString();
                struct.setVlanInterfaceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BRIDGE_INTERFACE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bridgeInterface = iprot.readString();
                struct.setBridgeInterfaceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteVLAN_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VLAN_TAG_FIELD_DESC);
        oprot.writeI32(struct.vlanTag);
        oprot.writeFieldEnd();
        if (struct.vlanInterface != null) {
          oprot.writeFieldBegin(VLAN_INTERFACE_FIELD_DESC);
          oprot.writeString(struct.vlanInterface);
          oprot.writeFieldEnd();
        }
        if (struct.bridgeInterface != null) {
          oprot.writeFieldBegin(BRIDGE_INTERFACE_FIELD_DESC);
          oprot.writeString(struct.bridgeInterface);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteVLAN_argsTupleSchemeFactory implements SchemeFactory {
      public deleteVLAN_argsTupleScheme getScheme() {
        return new deleteVLAN_argsTupleScheme();
      }
    }

    private static class deleteVLAN_argsTupleScheme extends TupleScheme<deleteVLAN_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteVLAN_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVlanTag()) {
          optionals.set(0);
        }
        if (struct.isSetVlanInterface()) {
          optionals.set(1);
        }
        if (struct.isSetBridgeInterface()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetVlanTag()) {
          oprot.writeI32(struct.vlanTag);
        }
        if (struct.isSetVlanInterface()) {
          oprot.writeString(struct.vlanInterface);
        }
        if (struct.isSetBridgeInterface()) {
          oprot.writeString(struct.bridgeInterface);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteVLAN_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.vlanTag = iprot.readI32();
          struct.setVlanTagIsSet(true);
        }
        if (incoming.get(1)) {
          struct.vlanInterface = iprot.readString();
          struct.setVlanInterfaceIsSet(true);
        }
        if (incoming.get(2)) {
          struct.bridgeInterface = iprot.readString();
          struct.setBridgeInterfaceIsSet(true);
        }
      }
    }

  }

  public static class deleteVLAN_result implements org.apache.thrift.TBase<deleteVLAN_result, deleteVLAN_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteVLAN_result");

    private static final org.apache.thrift.protocol.TField VE_FIELD_DESC = new org.apache.thrift.protocol.TField("ve", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteVLAN_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteVLAN_resultTupleSchemeFactory());
    }

    public VLanException ve; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VE((short)1, "ve");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VE
            return VE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VE, new org.apache.thrift.meta_data.FieldMetaData("ve", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteVLAN_result.class, metaDataMap);
    }

    public deleteVLAN_result() {
    }

    public deleteVLAN_result(
      VLanException ve)
    {
      this();
      this.ve = ve;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteVLAN_result(deleteVLAN_result other) {
      if (other.isSetVe()) {
        this.ve = new VLanException(other.ve);
      }
    }

    public deleteVLAN_result deepCopy() {
      return new deleteVLAN_result(this);
    }

    @Override
    public void clear() {
      this.ve = null;
    }

    public VLanException getVe() {
      return this.ve;
    }

    public deleteVLAN_result setVe(VLanException ve) {
      this.ve = ve;
      return this;
    }

    public void unsetVe() {
      this.ve = null;
    }

    /** Returns true if field ve is set (has been assigned a value) and false otherwise */
    public boolean isSetVe() {
      return this.ve != null;
    }

    public void setVeIsSet(boolean value) {
      if (!value) {
        this.ve = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VE:
        if (value == null) {
          unsetVe();
        } else {
          setVe((VLanException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VE:
        return getVe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VE:
        return isSetVe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteVLAN_result)
        return this.equals((deleteVLAN_result)that);
      return false;
    }

    public boolean equals(deleteVLAN_result that) {
      if (that == null)
        return false;

      boolean this_present_ve = true && this.isSetVe();
      boolean that_present_ve = true && that.isSetVe();
      if (this_present_ve || that_present_ve) {
        if (!(this_present_ve && that_present_ve))
          return false;
        if (!this.ve.equals(that.ve))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(deleteVLAN_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      deleteVLAN_result typedOther = (deleteVLAN_result)other;

      lastComparison = Boolean.valueOf(isSetVe()).compareTo(typedOther.isSetVe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ve, typedOther.ve);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteVLAN_result(");
      boolean first = true;

      sb.append("ve:");
      if (this.ve == null) {
        sb.append("null");
      } else {
        sb.append(this.ve);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteVLAN_resultStandardSchemeFactory implements SchemeFactory {
      public deleteVLAN_resultStandardScheme getScheme() {
        return new deleteVLAN_resultStandardScheme();
      }
    }

    private static class deleteVLAN_resultStandardScheme extends StandardScheme<deleteVLAN_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteVLAN_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ve = new VLanException();
                struct.ve.read(iprot);
                struct.setVeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteVLAN_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ve != null) {
          oprot.writeFieldBegin(VE_FIELD_DESC);
          struct.ve.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteVLAN_resultTupleSchemeFactory implements SchemeFactory {
      public deleteVLAN_resultTupleScheme getScheme() {
        return new deleteVLAN_resultTupleScheme();
      }
    }

    private static class deleteVLAN_resultTupleScheme extends TupleScheme<deleteVLAN_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteVLAN_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVe()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetVe()) {
          struct.ve.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteVLAN_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ve = new VLanException();
          struct.ve.read(iprot);
          struct.setVeIsSet(true);
        }
      }
    }

  }

  public static class checkVLANConfiguration_args implements org.apache.thrift.TBase<checkVLANConfiguration_args, checkVLANConfiguration_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkVLANConfiguration_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkVLANConfiguration_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkVLANConfiguration_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkVLANConfiguration_args.class, metaDataMap);
    }

    public checkVLANConfiguration_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkVLANConfiguration_args(checkVLANConfiguration_args other) {
    }

    public checkVLANConfiguration_args deepCopy() {
      return new checkVLANConfiguration_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkVLANConfiguration_args)
        return this.equals((checkVLANConfiguration_args)that);
      return false;
    }

    public boolean equals(checkVLANConfiguration_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(checkVLANConfiguration_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      checkVLANConfiguration_args typedOther = (checkVLANConfiguration_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkVLANConfiguration_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkVLANConfiguration_argsStandardSchemeFactory implements SchemeFactory {
      public checkVLANConfiguration_argsStandardScheme getScheme() {
        return new checkVLANConfiguration_argsStandardScheme();
      }
    }

    private static class checkVLANConfiguration_argsStandardScheme extends StandardScheme<checkVLANConfiguration_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkVLANConfiguration_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkVLANConfiguration_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkVLANConfiguration_argsTupleSchemeFactory implements SchemeFactory {
      public checkVLANConfiguration_argsTupleScheme getScheme() {
        return new checkVLANConfiguration_argsTupleScheme();
      }
    }

    private static class checkVLANConfiguration_argsTupleScheme extends TupleScheme<checkVLANConfiguration_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkVLANConfiguration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkVLANConfiguration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class checkVLANConfiguration_result implements org.apache.thrift.TBase<checkVLANConfiguration_result, checkVLANConfiguration_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkVLANConfiguration_result");

    private static final org.apache.thrift.protocol.TField VE_FIELD_DESC = new org.apache.thrift.protocol.TField("ve", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkVLANConfiguration_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkVLANConfiguration_resultTupleSchemeFactory());
    }

    public VLanException ve; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VE((short)1, "ve");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VE
            return VE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VE, new org.apache.thrift.meta_data.FieldMetaData("ve", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkVLANConfiguration_result.class, metaDataMap);
    }

    public checkVLANConfiguration_result() {
    }

    public checkVLANConfiguration_result(
      VLanException ve)
    {
      this();
      this.ve = ve;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkVLANConfiguration_result(checkVLANConfiguration_result other) {
      if (other.isSetVe()) {
        this.ve = new VLanException(other.ve);
      }
    }

    public checkVLANConfiguration_result deepCopy() {
      return new checkVLANConfiguration_result(this);
    }

    @Override
    public void clear() {
      this.ve = null;
    }

    public VLanException getVe() {
      return this.ve;
    }

    public checkVLANConfiguration_result setVe(VLanException ve) {
      this.ve = ve;
      return this;
    }

    public void unsetVe() {
      this.ve = null;
    }

    /** Returns true if field ve is set (has been assigned a value) and false otherwise */
    public boolean isSetVe() {
      return this.ve != null;
    }

    public void setVeIsSet(boolean value) {
      if (!value) {
        this.ve = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VE:
        if (value == null) {
          unsetVe();
        } else {
          setVe((VLanException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VE:
        return getVe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VE:
        return isSetVe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkVLANConfiguration_result)
        return this.equals((checkVLANConfiguration_result)that);
      return false;
    }

    public boolean equals(checkVLANConfiguration_result that) {
      if (that == null)
        return false;

      boolean this_present_ve = true && this.isSetVe();
      boolean that_present_ve = true && that.isSetVe();
      if (this_present_ve || that_present_ve) {
        if (!(this_present_ve && that_present_ve))
          return false;
        if (!this.ve.equals(that.ve))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(checkVLANConfiguration_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      checkVLANConfiguration_result typedOther = (checkVLANConfiguration_result)other;

      lastComparison = Boolean.valueOf(isSetVe()).compareTo(typedOther.isSetVe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ve, typedOther.ve);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkVLANConfiguration_result(");
      boolean first = true;

      sb.append("ve:");
      if (this.ve == null) {
        sb.append("null");
      } else {
        sb.append(this.ve);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkVLANConfiguration_resultStandardSchemeFactory implements SchemeFactory {
      public checkVLANConfiguration_resultStandardScheme getScheme() {
        return new checkVLANConfiguration_resultStandardScheme();
      }
    }

    private static class checkVLANConfiguration_resultStandardScheme extends StandardScheme<checkVLANConfiguration_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkVLANConfiguration_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ve = new VLanException();
                struct.ve.read(iprot);
                struct.setVeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkVLANConfiguration_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ve != null) {
          oprot.writeFieldBegin(VE_FIELD_DESC);
          struct.ve.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkVLANConfiguration_resultTupleSchemeFactory implements SchemeFactory {
      public checkVLANConfiguration_resultTupleScheme getScheme() {
        return new checkVLANConfiguration_resultTupleScheme();
      }
    }

    private static class checkVLANConfiguration_resultTupleScheme extends TupleScheme<checkVLANConfiguration_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkVLANConfiguration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVe()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetVe()) {
          struct.ve.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkVLANConfiguration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.ve = new VLanException();
          struct.ve.read(iprot);
          struct.setVeIsSet(true);
        }
      }
    }

  }

  public static class getInitiatorIQN_args implements org.apache.thrift.TBase<getInitiatorIQN_args, getInitiatorIQN_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getInitiatorIQN_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getInitiatorIQN_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getInitiatorIQN_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getInitiatorIQN_args.class, metaDataMap);
    }

    public getInitiatorIQN_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getInitiatorIQN_args(getInitiatorIQN_args other) {
    }

    public getInitiatorIQN_args deepCopy() {
      return new getInitiatorIQN_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getInitiatorIQN_args)
        return this.equals((getInitiatorIQN_args)that);
      return false;
    }

    public boolean equals(getInitiatorIQN_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getInitiatorIQN_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getInitiatorIQN_args typedOther = (getInitiatorIQN_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getInitiatorIQN_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getInitiatorIQN_argsStandardSchemeFactory implements SchemeFactory {
      public getInitiatorIQN_argsStandardScheme getScheme() {
        return new getInitiatorIQN_argsStandardScheme();
      }
    }

    private static class getInitiatorIQN_argsStandardScheme extends StandardScheme<getInitiatorIQN_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getInitiatorIQN_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getInitiatorIQN_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getInitiatorIQN_argsTupleSchemeFactory implements SchemeFactory {
      public getInitiatorIQN_argsTupleScheme getScheme() {
        return new getInitiatorIQN_argsTupleScheme();
      }
    }

    private static class getInitiatorIQN_argsTupleScheme extends TupleScheme<getInitiatorIQN_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getInitiatorIQN_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getInitiatorIQN_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getInitiatorIQN_result implements org.apache.thrift.TBase<getInitiatorIQN_result, getInitiatorIQN_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getInitiatorIQN_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField SE_FIELD_DESC = new org.apache.thrift.protocol.TField("se", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getInitiatorIQN_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getInitiatorIQN_resultTupleSchemeFactory());
    }

    public String success; // required
    public StorageException se; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SE((short)1, "se");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SE
            return SE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SE, new org.apache.thrift.meta_data.FieldMetaData("se", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getInitiatorIQN_result.class, metaDataMap);
    }

    public getInitiatorIQN_result() {
    }

    public getInitiatorIQN_result(
      String success,
      StorageException se)
    {
      this();
      this.success = success;
      this.se = se;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getInitiatorIQN_result(getInitiatorIQN_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetSe()) {
        this.se = new StorageException(other.se);
      }
    }

    public getInitiatorIQN_result deepCopy() {
      return new getInitiatorIQN_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.se = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getInitiatorIQN_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public StorageException getSe() {
      return this.se;
    }

    public getInitiatorIQN_result setSe(StorageException se) {
      this.se = se;
      return this;
    }

    public void unsetSe() {
      this.se = null;
    }

    /** Returns true if field se is set (has been assigned a value) and false otherwise */
    public boolean isSetSe() {
      return this.se != null;
    }

    public void setSeIsSet(boolean value) {
      if (!value) {
        this.se = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case SE:
        if (value == null) {
          unsetSe();
        } else {
          setSe((StorageException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SE:
        return getSe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SE:
        return isSetSe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getInitiatorIQN_result)
        return this.equals((getInitiatorIQN_result)that);
      return false;
    }

    public boolean equals(getInitiatorIQN_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_se = true && this.isSetSe();
      boolean that_present_se = true && that.isSetSe();
      if (this_present_se || that_present_se) {
        if (!(this_present_se && that_present_se))
          return false;
        if (!this.se.equals(that.se))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getInitiatorIQN_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getInitiatorIQN_result typedOther = (getInitiatorIQN_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSe()).compareTo(typedOther.isSetSe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.se, typedOther.se);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getInitiatorIQN_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("se:");
      if (this.se == null) {
        sb.append("null");
      } else {
        sb.append(this.se);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getInitiatorIQN_resultStandardSchemeFactory implements SchemeFactory {
      public getInitiatorIQN_resultStandardScheme getScheme() {
        return new getInitiatorIQN_resultStandardScheme();
      }
    }

    private static class getInitiatorIQN_resultStandardScheme extends StandardScheme<getInitiatorIQN_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getInitiatorIQN_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.se = new StorageException();
                struct.se.read(iprot);
                struct.setSeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getInitiatorIQN_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.se != null) {
          oprot.writeFieldBegin(SE_FIELD_DESC);
          struct.se.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getInitiatorIQN_resultTupleSchemeFactory implements SchemeFactory {
      public getInitiatorIQN_resultTupleScheme getScheme() {
        return new getInitiatorIQN_resultTupleScheme();
      }
    }

    private static class getInitiatorIQN_resultTupleScheme extends TupleScheme<getInitiatorIQN_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getInitiatorIQN_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetSe()) {
          struct.se.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getInitiatorIQN_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.se = new StorageException();
          struct.se.read(iprot);
          struct.setSeIsSet(true);
        }
      }
    }

  }

  public static class rescanISCSI_args implements org.apache.thrift.TBase<rescanISCSI_args, rescanISCSI_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rescanISCSI_args");

    private static final org.apache.thrift.protocol.TField TARGETS_FIELD_DESC = new org.apache.thrift.protocol.TField("targets", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rescanISCSI_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rescanISCSI_argsTupleSchemeFactory());
    }

    public List<String> targets; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TARGETS((short)1, "targets");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TARGETS
            return TARGETS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TARGETS, new org.apache.thrift.meta_data.FieldMetaData("targets", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rescanISCSI_args.class, metaDataMap);
    }

    public rescanISCSI_args() {
    }

    public rescanISCSI_args(
      List<String> targets)
    {
      this();
      this.targets = targets;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rescanISCSI_args(rescanISCSI_args other) {
      if (other.isSetTargets()) {
        List<String> __this__targets = new ArrayList<String>();
        for (String other_element : other.targets) {
          __this__targets.add(other_element);
        }
        this.targets = __this__targets;
      }
    }

    public rescanISCSI_args deepCopy() {
      return new rescanISCSI_args(this);
    }

    @Override
    public void clear() {
      this.targets = null;
    }

    public int getTargetsSize() {
      return (this.targets == null) ? 0 : this.targets.size();
    }

    public java.util.Iterator<String> getTargetsIterator() {
      return (this.targets == null) ? null : this.targets.iterator();
    }

    public void addToTargets(String elem) {
      if (this.targets == null) {
        this.targets = new ArrayList<String>();
      }
      this.targets.add(elem);
    }

    public List<String> getTargets() {
      return this.targets;
    }

    public rescanISCSI_args setTargets(List<String> targets) {
      this.targets = targets;
      return this;
    }

    public void unsetTargets() {
      this.targets = null;
    }

    /** Returns true if field targets is set (has been assigned a value) and false otherwise */
    public boolean isSetTargets() {
      return this.targets != null;
    }

    public void setTargetsIsSet(boolean value) {
      if (!value) {
        this.targets = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TARGETS:
        if (value == null) {
          unsetTargets();
        } else {
          setTargets((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TARGETS:
        return getTargets();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TARGETS:
        return isSetTargets();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rescanISCSI_args)
        return this.equals((rescanISCSI_args)that);
      return false;
    }

    public boolean equals(rescanISCSI_args that) {
      if (that == null)
        return false;

      boolean this_present_targets = true && this.isSetTargets();
      boolean that_present_targets = true && that.isSetTargets();
      if (this_present_targets || that_present_targets) {
        if (!(this_present_targets && that_present_targets))
          return false;
        if (!this.targets.equals(that.targets))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(rescanISCSI_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      rescanISCSI_args typedOther = (rescanISCSI_args)other;

      lastComparison = Boolean.valueOf(isSetTargets()).compareTo(typedOther.isSetTargets());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTargets()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targets, typedOther.targets);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rescanISCSI_args(");
      boolean first = true;

      sb.append("targets:");
      if (this.targets == null) {
        sb.append("null");
      } else {
        sb.append(this.targets);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rescanISCSI_argsStandardSchemeFactory implements SchemeFactory {
      public rescanISCSI_argsStandardScheme getScheme() {
        return new rescanISCSI_argsStandardScheme();
      }
    }

    private static class rescanISCSI_argsStandardScheme extends StandardScheme<rescanISCSI_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rescanISCSI_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TARGETS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.targets = new ArrayList<String>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    String _elem18; // required
                    _elem18 = iprot.readString();
                    struct.targets.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setTargetsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rescanISCSI_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.targets != null) {
          oprot.writeFieldBegin(TARGETS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.targets.size()));
            for (String _iter19 : struct.targets)
            {
              oprot.writeString(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rescanISCSI_argsTupleSchemeFactory implements SchemeFactory {
      public rescanISCSI_argsTupleScheme getScheme() {
        return new rescanISCSI_argsTupleScheme();
      }
    }

    private static class rescanISCSI_argsTupleScheme extends TupleScheme<rescanISCSI_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rescanISCSI_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTargets()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTargets()) {
          {
            oprot.writeI32(struct.targets.size());
            for (String _iter20 : struct.targets)
            {
              oprot.writeString(_iter20);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rescanISCSI_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.targets = new ArrayList<String>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              String _elem23; // required
              _elem23 = iprot.readString();
              struct.targets.add(_elem23);
            }
          }
          struct.setTargetsIsSet(true);
        }
      }
    }

  }

  public static class rescanISCSI_result implements org.apache.thrift.TBase<rescanISCSI_result, rescanISCSI_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rescanISCSI_result");

    private static final org.apache.thrift.protocol.TField SE_FIELD_DESC = new org.apache.thrift.protocol.TField("se", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rescanISCSI_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rescanISCSI_resultTupleSchemeFactory());
    }

    public StorageException se; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SE((short)1, "se");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SE
            return SE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SE, new org.apache.thrift.meta_data.FieldMetaData("se", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rescanISCSI_result.class, metaDataMap);
    }

    public rescanISCSI_result() {
    }

    public rescanISCSI_result(
      StorageException se)
    {
      this();
      this.se = se;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rescanISCSI_result(rescanISCSI_result other) {
      if (other.isSetSe()) {
        this.se = new StorageException(other.se);
      }
    }

    public rescanISCSI_result deepCopy() {
      return new rescanISCSI_result(this);
    }

    @Override
    public void clear() {
      this.se = null;
    }

    public StorageException getSe() {
      return this.se;
    }

    public rescanISCSI_result setSe(StorageException se) {
      this.se = se;
      return this;
    }

    public void unsetSe() {
      this.se = null;
    }

    /** Returns true if field se is set (has been assigned a value) and false otherwise */
    public boolean isSetSe() {
      return this.se != null;
    }

    public void setSeIsSet(boolean value) {
      if (!value) {
        this.se = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SE:
        if (value == null) {
          unsetSe();
        } else {
          setSe((StorageException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SE:
        return getSe();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SE:
        return isSetSe();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rescanISCSI_result)
        return this.equals((rescanISCSI_result)that);
      return false;
    }

    public boolean equals(rescanISCSI_result that) {
      if (that == null)
        return false;

      boolean this_present_se = true && this.isSetSe();
      boolean that_present_se = true && that.isSetSe();
      if (this_present_se || that_present_se) {
        if (!(this_present_se && that_present_se))
          return false;
        if (!this.se.equals(that.se))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(rescanISCSI_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      rescanISCSI_result typedOther = (rescanISCSI_result)other;

      lastComparison = Boolean.valueOf(isSetSe()).compareTo(typedOther.isSetSe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.se, typedOther.se);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rescanISCSI_result(");
      boolean first = true;

      sb.append("se:");
      if (this.se == null) {
        sb.append("null");
      } else {
        sb.append(this.se);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rescanISCSI_resultStandardSchemeFactory implements SchemeFactory {
      public rescanISCSI_resultStandardScheme getScheme() {
        return new rescanISCSI_resultStandardScheme();
      }
    }

    private static class rescanISCSI_resultStandardScheme extends StandardScheme<rescanISCSI_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rescanISCSI_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.se = new StorageException();
                struct.se.read(iprot);
                struct.setSeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rescanISCSI_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.se != null) {
          oprot.writeFieldBegin(SE_FIELD_DESC);
          struct.se.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rescanISCSI_resultTupleSchemeFactory implements SchemeFactory {
      public rescanISCSI_resultTupleScheme getScheme() {
        return new rescanISCSI_resultTupleScheme();
      }
    }

    private static class rescanISCSI_resultTupleScheme extends TupleScheme<rescanISCSI_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rescanISCSI_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSe()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSe()) {
          struct.se.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rescanISCSI_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.se = new StorageException();
          struct.se.read(iprot);
          struct.setSeIsSet(true);
        }
      }
    }

  }

  public static class getNodeInfo_args implements org.apache.thrift.TBase<getNodeInfo_args, getNodeInfo_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNodeInfo_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNodeInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNodeInfo_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNodeInfo_args.class, metaDataMap);
    }

    public getNodeInfo_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNodeInfo_args(getNodeInfo_args other) {
    }

    public getNodeInfo_args deepCopy() {
      return new getNodeInfo_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNodeInfo_args)
        return this.equals((getNodeInfo_args)that);
      return false;
    }

    public boolean equals(getNodeInfo_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getNodeInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getNodeInfo_args typedOther = (getNodeInfo_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNodeInfo_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNodeInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getNodeInfo_argsStandardScheme getScheme() {
        return new getNodeInfo_argsStandardScheme();
      }
    }

    private static class getNodeInfo_argsStandardScheme extends StandardScheme<getNodeInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNodeInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNodeInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNodeInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getNodeInfo_argsTupleScheme getScheme() {
        return new getNodeInfo_argsTupleScheme();
      }
    }

    private static class getNodeInfo_argsTupleScheme extends TupleScheme<getNodeInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNodeInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNodeInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getNodeInfo_result implements org.apache.thrift.TBase<getNodeInfo_result, getNodeInfo_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNodeInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField LIBVIRT_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("libvirtException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNodeInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNodeInfo_resultTupleSchemeFactory());
    }

    public NodeInfo success; // required
    public LibvirtException libvirtException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      LIBVIRT_EXCEPTION((short)1, "libvirtException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // LIBVIRT_EXCEPTION
            return LIBVIRT_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodeInfo.class)));
      tmpMap.put(_Fields.LIBVIRT_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("libvirtException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNodeInfo_result.class, metaDataMap);
    }

    public getNodeInfo_result() {
    }

    public getNodeInfo_result(
      NodeInfo success,
      LibvirtException libvirtException)
    {
      this();
      this.success = success;
      this.libvirtException = libvirtException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNodeInfo_result(getNodeInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new NodeInfo(other.success);
      }
      if (other.isSetLibvirtException()) {
        this.libvirtException = new LibvirtException(other.libvirtException);
      }
    }

    public getNodeInfo_result deepCopy() {
      return new getNodeInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.libvirtException = null;
    }

    public NodeInfo getSuccess() {
      return this.success;
    }

    public getNodeInfo_result setSuccess(NodeInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public LibvirtException getLibvirtException() {
      return this.libvirtException;
    }

    public getNodeInfo_result setLibvirtException(LibvirtException libvirtException) {
      this.libvirtException = libvirtException;
      return this;
    }

    public void unsetLibvirtException() {
      this.libvirtException = null;
    }

    /** Returns true if field libvirtException is set (has been assigned a value) and false otherwise */
    public boolean isSetLibvirtException() {
      return this.libvirtException != null;
    }

    public void setLibvirtExceptionIsSet(boolean value) {
      if (!value) {
        this.libvirtException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((NodeInfo)value);
        }
        break;

      case LIBVIRT_EXCEPTION:
        if (value == null) {
          unsetLibvirtException();
        } else {
          setLibvirtException((LibvirtException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case LIBVIRT_EXCEPTION:
        return getLibvirtException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case LIBVIRT_EXCEPTION:
        return isSetLibvirtException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNodeInfo_result)
        return this.equals((getNodeInfo_result)that);
      return false;
    }

    public boolean equals(getNodeInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_libvirtException = true && this.isSetLibvirtException();
      boolean that_present_libvirtException = true && that.isSetLibvirtException();
      if (this_present_libvirtException || that_present_libvirtException) {
        if (!(this_present_libvirtException && that_present_libvirtException))
          return false;
        if (!this.libvirtException.equals(that.libvirtException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getNodeInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getNodeInfo_result typedOther = (getNodeInfo_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLibvirtException()).compareTo(typedOther.isSetLibvirtException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLibvirtException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.libvirtException, typedOther.libvirtException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNodeInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("libvirtException:");
      if (this.libvirtException == null) {
        sb.append("null");
      } else {
        sb.append(this.libvirtException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNodeInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getNodeInfo_resultStandardScheme getScheme() {
        return new getNodeInfo_resultStandardScheme();
      }
    }

    private static class getNodeInfo_resultStandardScheme extends StandardScheme<getNodeInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNodeInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new NodeInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // LIBVIRT_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.libvirtException = new LibvirtException();
                struct.libvirtException.read(iprot);
                struct.setLibvirtExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNodeInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.libvirtException != null) {
          oprot.writeFieldBegin(LIBVIRT_EXCEPTION_FIELD_DESC);
          struct.libvirtException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNodeInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getNodeInfo_resultTupleScheme getScheme() {
        return new getNodeInfo_resultTupleScheme();
      }
    }

    private static class getNodeInfo_resultTupleScheme extends TupleScheme<getNodeInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNodeInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetLibvirtException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetLibvirtException()) {
          struct.libvirtException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNodeInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new NodeInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.libvirtException = new LibvirtException();
          struct.libvirtException.read(iprot);
          struct.setLibvirtExceptionIsSet(true);
        }
      }
    }

  }

  public static class getDomains_args implements org.apache.thrift.TBase<getDomains_args, getDomains_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDomains_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDomains_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDomains_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDomains_args.class, metaDataMap);
    }

    public getDomains_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDomains_args(getDomains_args other) {
    }

    public getDomains_args deepCopy() {
      return new getDomains_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDomains_args)
        return this.equals((getDomains_args)that);
      return false;
    }

    public boolean equals(getDomains_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getDomains_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getDomains_args typedOther = (getDomains_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDomains_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDomains_argsStandardSchemeFactory implements SchemeFactory {
      public getDomains_argsStandardScheme getScheme() {
        return new getDomains_argsStandardScheme();
      }
    }

    private static class getDomains_argsStandardScheme extends StandardScheme<getDomains_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDomains_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDomains_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDomains_argsTupleSchemeFactory implements SchemeFactory {
      public getDomains_argsTupleScheme getScheme() {
        return new getDomains_argsTupleScheme();
      }
    }

    private static class getDomains_argsTupleScheme extends TupleScheme<getDomains_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDomains_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDomains_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getDomains_result implements org.apache.thrift.TBase<getDomains_result, getDomains_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDomains_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField LIBVIRT_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("libvirtException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDomains_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDomains_resultTupleSchemeFactory());
    }

    public List<DomainInfo> success; // required
    public LibvirtException libvirtException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      LIBVIRT_EXCEPTION((short)1, "libvirtException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // LIBVIRT_EXCEPTION
            return LIBVIRT_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DomainInfo.class))));
      tmpMap.put(_Fields.LIBVIRT_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("libvirtException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDomains_result.class, metaDataMap);
    }

    public getDomains_result() {
    }

    public getDomains_result(
      List<DomainInfo> success,
      LibvirtException libvirtException)
    {
      this();
      this.success = success;
      this.libvirtException = libvirtException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDomains_result(getDomains_result other) {
      if (other.isSetSuccess()) {
        List<DomainInfo> __this__success = new ArrayList<DomainInfo>();
        for (DomainInfo other_element : other.success) {
          __this__success.add(new DomainInfo(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetLibvirtException()) {
        this.libvirtException = new LibvirtException(other.libvirtException);
      }
    }

    public getDomains_result deepCopy() {
      return new getDomains_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.libvirtException = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<DomainInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(DomainInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<DomainInfo>();
      }
      this.success.add(elem);
    }

    public List<DomainInfo> getSuccess() {
      return this.success;
    }

    public getDomains_result setSuccess(List<DomainInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public LibvirtException getLibvirtException() {
      return this.libvirtException;
    }

    public getDomains_result setLibvirtException(LibvirtException libvirtException) {
      this.libvirtException = libvirtException;
      return this;
    }

    public void unsetLibvirtException() {
      this.libvirtException = null;
    }

    /** Returns true if field libvirtException is set (has been assigned a value) and false otherwise */
    public boolean isSetLibvirtException() {
      return this.libvirtException != null;
    }

    public void setLibvirtExceptionIsSet(boolean value) {
      if (!value) {
        this.libvirtException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<DomainInfo>)value);
        }
        break;

      case LIBVIRT_EXCEPTION:
        if (value == null) {
          unsetLibvirtException();
        } else {
          setLibvirtException((LibvirtException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case LIBVIRT_EXCEPTION:
        return getLibvirtException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case LIBVIRT_EXCEPTION:
        return isSetLibvirtException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDomains_result)
        return this.equals((getDomains_result)that);
      return false;
    }

    public boolean equals(getDomains_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_libvirtException = true && this.isSetLibvirtException();
      boolean that_present_libvirtException = true && that.isSetLibvirtException();
      if (this_present_libvirtException || that_present_libvirtException) {
        if (!(this_present_libvirtException && that_present_libvirtException))
          return false;
        if (!this.libvirtException.equals(that.libvirtException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getDomains_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getDomains_result typedOther = (getDomains_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLibvirtException()).compareTo(typedOther.isSetLibvirtException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLibvirtException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.libvirtException, typedOther.libvirtException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDomains_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("libvirtException:");
      if (this.libvirtException == null) {
        sb.append("null");
      } else {
        sb.append(this.libvirtException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDomains_resultStandardSchemeFactory implements SchemeFactory {
      public getDomains_resultStandardScheme getScheme() {
        return new getDomains_resultStandardScheme();
      }
    }

    private static class getDomains_resultStandardScheme extends StandardScheme<getDomains_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDomains_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<DomainInfo>(_list24.size);
                  for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                  {
                    DomainInfo _elem26; // required
                    _elem26 = new DomainInfo();
                    _elem26.read(iprot);
                    struct.success.add(_elem26);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // LIBVIRT_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.libvirtException = new LibvirtException();
                struct.libvirtException.read(iprot);
                struct.setLibvirtExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDomains_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (DomainInfo _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.libvirtException != null) {
          oprot.writeFieldBegin(LIBVIRT_EXCEPTION_FIELD_DESC);
          struct.libvirtException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDomains_resultTupleSchemeFactory implements SchemeFactory {
      public getDomains_resultTupleScheme getScheme() {
        return new getDomains_resultTupleScheme();
      }
    }

    private static class getDomains_resultTupleScheme extends TupleScheme<getDomains_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDomains_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetLibvirtException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (DomainInfo _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
        if (struct.isSetLibvirtException()) {
          struct.libvirtException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDomains_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<DomainInfo>(_list29.size);
            for (int _i30 = 0; _i30 < _list29.size; ++_i30)
            {
              DomainInfo _elem31; // required
              _elem31 = new DomainInfo();
              _elem31.read(iprot);
              struct.success.add(_elem31);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.libvirtException = new LibvirtException();
          struct.libvirtException.read(iprot);
          struct.setLibvirtExceptionIsSet(true);
        }
      }
    }

  }

  public static class defineDomain_args implements org.apache.thrift.TBase<defineDomain_args, defineDomain_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("defineDomain_args");

    private static final org.apache.thrift.protocol.TField XML_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("xmlDesc", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new defineDomain_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new defineDomain_argsTupleSchemeFactory());
    }

    public String xmlDesc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      XML_DESC((short)1, "xmlDesc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // XML_DESC
            return XML_DESC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.XML_DESC, new org.apache.thrift.meta_data.FieldMetaData("xmlDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(defineDomain_args.class, metaDataMap);
    }

    public defineDomain_args() {
    }

    public defineDomain_args(
      String xmlDesc)
    {
      this();
      this.xmlDesc = xmlDesc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public defineDomain_args(defineDomain_args other) {
      if (other.isSetXmlDesc()) {
        this.xmlDesc = other.xmlDesc;
      }
    }

    public defineDomain_args deepCopy() {
      return new defineDomain_args(this);
    }

    @Override
    public void clear() {
      this.xmlDesc = null;
    }

    public String getXmlDesc() {
      return this.xmlDesc;
    }

    public defineDomain_args setXmlDesc(String xmlDesc) {
      this.xmlDesc = xmlDesc;
      return this;
    }

    public void unsetXmlDesc() {
      this.xmlDesc = null;
    }

    /** Returns true if field xmlDesc is set (has been assigned a value) and false otherwise */
    public boolean isSetXmlDesc() {
      return this.xmlDesc != null;
    }

    public void setXmlDescIsSet(boolean value) {
      if (!value) {
        this.xmlDesc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case XML_DESC:
        if (value == null) {
          unsetXmlDesc();
        } else {
          setXmlDesc((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case XML_DESC:
        return getXmlDesc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case XML_DESC:
        return isSetXmlDesc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof defineDomain_args)
        return this.equals((defineDomain_args)that);
      return false;
    }

    public boolean equals(defineDomain_args that) {
      if (that == null)
        return false;

      boolean this_present_xmlDesc = true && this.isSetXmlDesc();
      boolean that_present_xmlDesc = true && that.isSetXmlDesc();
      if (this_present_xmlDesc || that_present_xmlDesc) {
        if (!(this_present_xmlDesc && that_present_xmlDesc))
          return false;
        if (!this.xmlDesc.equals(that.xmlDesc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(defineDomain_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      defineDomain_args typedOther = (defineDomain_args)other;

      lastComparison = Boolean.valueOf(isSetXmlDesc()).compareTo(typedOther.isSetXmlDesc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetXmlDesc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xmlDesc, typedOther.xmlDesc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("defineDomain_args(");
      boolean first = true;

      sb.append("xmlDesc:");
      if (this.xmlDesc == null) {
        sb.append("null");
      } else {
        sb.append(this.xmlDesc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class defineDomain_argsStandardSchemeFactory implements SchemeFactory {
      public defineDomain_argsStandardScheme getScheme() {
        return new defineDomain_argsStandardScheme();
      }
    }

    private static class defineDomain_argsStandardScheme extends StandardScheme<defineDomain_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, defineDomain_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // XML_DESC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.xmlDesc = iprot.readString();
                struct.setXmlDescIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, defineDomain_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.xmlDesc != null) {
          oprot.writeFieldBegin(XML_DESC_FIELD_DESC);
          oprot.writeString(struct.xmlDesc);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class defineDomain_argsTupleSchemeFactory implements SchemeFactory {
      public defineDomain_argsTupleScheme getScheme() {
        return new defineDomain_argsTupleScheme();
      }
    }

    private static class defineDomain_argsTupleScheme extends TupleScheme<defineDomain_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, defineDomain_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetXmlDesc()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetXmlDesc()) {
          oprot.writeString(struct.xmlDesc);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, defineDomain_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.xmlDesc = iprot.readString();
          struct.setXmlDescIsSet(true);
        }
      }
    }

  }

  public static class defineDomain_result implements org.apache.thrift.TBase<defineDomain_result, defineDomain_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("defineDomain_result");

    private static final org.apache.thrift.protocol.TField LIBVIRT_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("libvirtException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new defineDomain_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new defineDomain_resultTupleSchemeFactory());
    }

    public LibvirtException libvirtException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LIBVIRT_EXCEPTION((short)1, "libvirtException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LIBVIRT_EXCEPTION
            return LIBVIRT_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LIBVIRT_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("libvirtException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(defineDomain_result.class, metaDataMap);
    }

    public defineDomain_result() {
    }

    public defineDomain_result(
      LibvirtException libvirtException)
    {
      this();
      this.libvirtException = libvirtException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public defineDomain_result(defineDomain_result other) {
      if (other.isSetLibvirtException()) {
        this.libvirtException = new LibvirtException(other.libvirtException);
      }
    }

    public defineDomain_result deepCopy() {
      return new defineDomain_result(this);
    }

    @Override
    public void clear() {
      this.libvirtException = null;
    }

    public LibvirtException getLibvirtException() {
      return this.libvirtException;
    }

    public defineDomain_result setLibvirtException(LibvirtException libvirtException) {
      this.libvirtException = libvirtException;
      return this;
    }

    public void unsetLibvirtException() {
      this.libvirtException = null;
    }

    /** Returns true if field libvirtException is set (has been assigned a value) and false otherwise */
    public boolean isSetLibvirtException() {
      return this.libvirtException != null;
    }

    public void setLibvirtExceptionIsSet(boolean value) {
      if (!value) {
        this.libvirtException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LIBVIRT_EXCEPTION:
        if (value == null) {
          unsetLibvirtException();
        } else {
          setLibvirtException((LibvirtException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LIBVIRT_EXCEPTION:
        return getLibvirtException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LIBVIRT_EXCEPTION:
        return isSetLibvirtException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof defineDomain_result)
        return this.equals((defineDomain_result)that);
      return false;
    }

    public boolean equals(defineDomain_result that) {
      if (that == null)
        return false;

      boolean this_present_libvirtException = true && this.isSetLibvirtException();
      boolean that_present_libvirtException = true && that.isSetLibvirtException();
      if (this_present_libvirtException || that_present_libvirtException) {
        if (!(this_present_libvirtException && that_present_libvirtException))
          return false;
        if (!this.libvirtException.equals(that.libvirtException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(defineDomain_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      defineDomain_result typedOther = (defineDomain_result)other;

      lastComparison = Boolean.valueOf(isSetLibvirtException()).compareTo(typedOther.isSetLibvirtException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLibvirtException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.libvirtException, typedOther.libvirtException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("defineDomain_result(");
      boolean first = true;

      sb.append("libvirtException:");
      if (this.libvirtException == null) {
        sb.append("null");
      } else {
        sb.append(this.libvirtException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class defineDomain_resultStandardSchemeFactory implements SchemeFactory {
      public defineDomain_resultStandardScheme getScheme() {
        return new defineDomain_resultStandardScheme();
      }
    }

    private static class defineDomain_resultStandardScheme extends StandardScheme<defineDomain_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, defineDomain_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LIBVIRT_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.libvirtException = new LibvirtException();
                struct.libvirtException.read(iprot);
                struct.setLibvirtExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, defineDomain_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.libvirtException != null) {
          oprot.writeFieldBegin(LIBVIRT_EXCEPTION_FIELD_DESC);
          struct.libvirtException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class defineDomain_resultTupleSchemeFactory implements SchemeFactory {
      public defineDomain_resultTupleScheme getScheme() {
        return new defineDomain_resultTupleScheme();
      }
    }

    private static class defineDomain_resultTupleScheme extends TupleScheme<defineDomain_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, defineDomain_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLibvirtException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLibvirtException()) {
          struct.libvirtException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, defineDomain_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.libvirtException = new LibvirtException();
          struct.libvirtException.read(iprot);
          struct.setLibvirtExceptionIsSet(true);
        }
      }
    }

  }

  public static class undefineDomain_args implements org.apache.thrift.TBase<undefineDomain_args, undefineDomain_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("undefineDomain_args");

    private static final org.apache.thrift.protocol.TField DOMAIN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("domainName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new undefineDomain_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new undefineDomain_argsTupleSchemeFactory());
    }

    public String domainName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DOMAIN_NAME((short)1, "domainName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOMAIN_NAME
            return DOMAIN_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOMAIN_NAME, new org.apache.thrift.meta_data.FieldMetaData("domainName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(undefineDomain_args.class, metaDataMap);
    }

    public undefineDomain_args() {
    }

    public undefineDomain_args(
      String domainName)
    {
      this();
      this.domainName = domainName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public undefineDomain_args(undefineDomain_args other) {
      if (other.isSetDomainName()) {
        this.domainName = other.domainName;
      }
    }

    public undefineDomain_args deepCopy() {
      return new undefineDomain_args(this);
    }

    @Override
    public void clear() {
      this.domainName = null;
    }

    public String getDomainName() {
      return this.domainName;
    }

    public undefineDomain_args setDomainName(String domainName) {
      this.domainName = domainName;
      return this;
    }

    public void unsetDomainName() {
      this.domainName = null;
    }

    /** Returns true if field domainName is set (has been assigned a value) and false otherwise */
    public boolean isSetDomainName() {
      return this.domainName != null;
    }

    public void setDomainNameIsSet(boolean value) {
      if (!value) {
        this.domainName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOMAIN_NAME:
        if (value == null) {
          unsetDomainName();
        } else {
          setDomainName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOMAIN_NAME:
        return getDomainName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DOMAIN_NAME:
        return isSetDomainName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof undefineDomain_args)
        return this.equals((undefineDomain_args)that);
      return false;
    }

    public boolean equals(undefineDomain_args that) {
      if (that == null)
        return false;

      boolean this_present_domainName = true && this.isSetDomainName();
      boolean that_present_domainName = true && that.isSetDomainName();
      if (this_present_domainName || that_present_domainName) {
        if (!(this_present_domainName && that_present_domainName))
          return false;
        if (!this.domainName.equals(that.domainName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(undefineDomain_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      undefineDomain_args typedOther = (undefineDomain_args)other;

      lastComparison = Boolean.valueOf(isSetDomainName()).compareTo(typedOther.isSetDomainName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDomainName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domainName, typedOther.domainName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("undefineDomain_args(");
      boolean first = true;

      sb.append("domainName:");
      if (this.domainName == null) {
        sb.append("null");
      } else {
        sb.append(this.domainName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class undefineDomain_argsStandardSchemeFactory implements SchemeFactory {
      public undefineDomain_argsStandardScheme getScheme() {
        return new undefineDomain_argsStandardScheme();
      }
    }

    private static class undefineDomain_argsStandardScheme extends StandardScheme<undefineDomain_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, undefineDomain_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DOMAIN_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.domainName = iprot.readString();
                struct.setDomainNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, undefineDomain_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.domainName != null) {
          oprot.writeFieldBegin(DOMAIN_NAME_FIELD_DESC);
          oprot.writeString(struct.domainName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class undefineDomain_argsTupleSchemeFactory implements SchemeFactory {
      public undefineDomain_argsTupleScheme getScheme() {
        return new undefineDomain_argsTupleScheme();
      }
    }

    private static class undefineDomain_argsTupleScheme extends TupleScheme<undefineDomain_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, undefineDomain_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDomainName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDomainName()) {
          oprot.writeString(struct.domainName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, undefineDomain_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.domainName = iprot.readString();
          struct.setDomainNameIsSet(true);
        }
      }
    }

  }

  public static class undefineDomain_result implements org.apache.thrift.TBase<undefineDomain_result, undefineDomain_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("undefineDomain_result");

    private static final org.apache.thrift.protocol.TField LIBVIRT_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("libvirtException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new undefineDomain_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new undefineDomain_resultTupleSchemeFactory());
    }

    public LibvirtException libvirtException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LIBVIRT_EXCEPTION((short)1, "libvirtException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LIBVIRT_EXCEPTION
            return LIBVIRT_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LIBVIRT_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("libvirtException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(undefineDomain_result.class, metaDataMap);
    }

    public undefineDomain_result() {
    }

    public undefineDomain_result(
      LibvirtException libvirtException)
    {
      this();
      this.libvirtException = libvirtException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public undefineDomain_result(undefineDomain_result other) {
      if (other.isSetLibvirtException()) {
        this.libvirtException = new LibvirtException(other.libvirtException);
      }
    }

    public undefineDomain_result deepCopy() {
      return new undefineDomain_result(this);
    }

    @Override
    public void clear() {
      this.libvirtException = null;
    }

    public LibvirtException getLibvirtException() {
      return this.libvirtException;
    }

    public undefineDomain_result setLibvirtException(LibvirtException libvirtException) {
      this.libvirtException = libvirtException;
      return this;
    }

    public void unsetLibvirtException() {
      this.libvirtException = null;
    }

    /** Returns true if field libvirtException is set (has been assigned a value) and false otherwise */
    public boolean isSetLibvirtException() {
      return this.libvirtException != null;
    }

    public void setLibvirtExceptionIsSet(boolean value) {
      if (!value) {
        this.libvirtException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LIBVIRT_EXCEPTION:
        if (value == null) {
          unsetLibvirtException();
        } else {
          setLibvirtException((LibvirtException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LIBVIRT_EXCEPTION:
        return getLibvirtException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LIBVIRT_EXCEPTION:
        return isSetLibvirtException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof undefineDomain_result)
        return this.equals((undefineDomain_result)that);
      return false;
    }

    public boolean equals(undefineDomain_result that) {
      if (that == null)
        return false;

      boolean this_present_libvirtException = true && this.isSetLibvirtException();
      boolean that_present_libvirtException = true && that.isSetLibvirtException();
      if (this_present_libvirtException || that_present_libvirtException) {
        if (!(this_present_libvirtException && that_present_libvirtException))
          return false;
        if (!this.libvirtException.equals(that.libvirtException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(undefineDomain_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      undefineDomain_result typedOther = (undefineDomain_result)other;

      lastComparison = Boolean.valueOf(isSetLibvirtException()).compareTo(typedOther.isSetLibvirtException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLibvirtException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.libvirtException, typedOther.libvirtException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("undefineDomain_result(");
      boolean first = true;

      sb.append("libvirtException:");
      if (this.libvirtException == null) {
        sb.append("null");
      } else {
        sb.append(this.libvirtException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class undefineDomain_resultStandardSchemeFactory implements SchemeFactory {
      public undefineDomain_resultStandardScheme getScheme() {
        return new undefineDomain_resultStandardScheme();
      }
    }

    private static class undefineDomain_resultStandardScheme extends StandardScheme<undefineDomain_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, undefineDomain_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LIBVIRT_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.libvirtException = new LibvirtException();
                struct.libvirtException.read(iprot);
                struct.setLibvirtExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, undefineDomain_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.libvirtException != null) {
          oprot.writeFieldBegin(LIBVIRT_EXCEPTION_FIELD_DESC);
          struct.libvirtException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class undefineDomain_resultTupleSchemeFactory implements SchemeFactory {
      public undefineDomain_resultTupleScheme getScheme() {
        return new undefineDomain_resultTupleScheme();
      }
    }

    private static class undefineDomain_resultTupleScheme extends TupleScheme<undefineDomain_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, undefineDomain_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLibvirtException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLibvirtException()) {
          struct.libvirtException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, undefineDomain_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.libvirtException = new LibvirtException();
          struct.libvirtException.read(iprot);
          struct.setLibvirtExceptionIsSet(true);
        }
      }
    }

  }

  public static class existDomain_args implements org.apache.thrift.TBase<existDomain_args, existDomain_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("existDomain_args");

    private static final org.apache.thrift.protocol.TField DOMAIN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("domainName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new existDomain_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new existDomain_argsTupleSchemeFactory());
    }

    public String domainName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DOMAIN_NAME((short)1, "domainName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOMAIN_NAME
            return DOMAIN_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOMAIN_NAME, new org.apache.thrift.meta_data.FieldMetaData("domainName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(existDomain_args.class, metaDataMap);
    }

    public existDomain_args() {
    }

    public existDomain_args(
      String domainName)
    {
      this();
      this.domainName = domainName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public existDomain_args(existDomain_args other) {
      if (other.isSetDomainName()) {
        this.domainName = other.domainName;
      }
    }

    public existDomain_args deepCopy() {
      return new existDomain_args(this);
    }

    @Override
    public void clear() {
      this.domainName = null;
    }

    public String getDomainName() {
      return this.domainName;
    }

    public existDomain_args setDomainName(String domainName) {
      this.domainName = domainName;
      return this;
    }

    public void unsetDomainName() {
      this.domainName = null;
    }

    /** Returns true if field domainName is set (has been assigned a value) and false otherwise */
    public boolean isSetDomainName() {
      return this.domainName != null;
    }

    public void setDomainNameIsSet(boolean value) {
      if (!value) {
        this.domainName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOMAIN_NAME:
        if (value == null) {
          unsetDomainName();
        } else {
          setDomainName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOMAIN_NAME:
        return getDomainName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DOMAIN_NAME:
        return isSetDomainName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof existDomain_args)
        return this.equals((existDomain_args)that);
      return false;
    }

    public boolean equals(existDomain_args that) {
      if (that == null)
        return false;

      boolean this_present_domainName = true && this.isSetDomainName();
      boolean that_present_domainName = true && that.isSetDomainName();
      if (this_present_domainName || that_present_domainName) {
        if (!(this_present_domainName && that_present_domainName))
          return false;
        if (!this.domainName.equals(that.domainName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(existDomain_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      existDomain_args typedOther = (existDomain_args)other;

      lastComparison = Boolean.valueOf(isSetDomainName()).compareTo(typedOther.isSetDomainName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDomainName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domainName, typedOther.domainName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("existDomain_args(");
      boolean first = true;

      sb.append("domainName:");
      if (this.domainName == null) {
        sb.append("null");
      } else {
        sb.append(this.domainName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class existDomain_argsStandardSchemeFactory implements SchemeFactory {
      public existDomain_argsStandardScheme getScheme() {
        return new existDomain_argsStandardScheme();
      }
    }

    private static class existDomain_argsStandardScheme extends StandardScheme<existDomain_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, existDomain_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DOMAIN_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.domainName = iprot.readString();
                struct.setDomainNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, existDomain_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.domainName != null) {
          oprot.writeFieldBegin(DOMAIN_NAME_FIELD_DESC);
          oprot.writeString(struct.domainName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class existDomain_argsTupleSchemeFactory implements SchemeFactory {
      public existDomain_argsTupleScheme getScheme() {
        return new existDomain_argsTupleScheme();
      }
    }

    private static class existDomain_argsTupleScheme extends TupleScheme<existDomain_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, existDomain_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDomainName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDomainName()) {
          oprot.writeString(struct.domainName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, existDomain_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.domainName = iprot.readString();
          struct.setDomainNameIsSet(true);
        }
      }
    }

  }

  public static class existDomain_result implements org.apache.thrift.TBase<existDomain_result, existDomain_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("existDomain_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new existDomain_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new existDomain_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(existDomain_result.class, metaDataMap);
    }

    public existDomain_result() {
    }

    public existDomain_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public existDomain_result(existDomain_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public existDomain_result deepCopy() {
      return new existDomain_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public existDomain_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof existDomain_result)
        return this.equals((existDomain_result)that);
      return false;
    }

    public boolean equals(existDomain_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(existDomain_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      existDomain_result typedOther = (existDomain_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("existDomain_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class existDomain_resultStandardSchemeFactory implements SchemeFactory {
      public existDomain_resultStandardScheme getScheme() {
        return new existDomain_resultStandardScheme();
      }
    }

    private static class existDomain_resultStandardScheme extends StandardScheme<existDomain_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, existDomain_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, existDomain_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class existDomain_resultTupleSchemeFactory implements SchemeFactory {
      public existDomain_resultTupleScheme getScheme() {
        return new existDomain_resultTupleScheme();
      }
    }

    private static class existDomain_resultTupleScheme extends TupleScheme<existDomain_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, existDomain_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, existDomain_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getDomainState_args implements org.apache.thrift.TBase<getDomainState_args, getDomainState_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDomainState_args");

    private static final org.apache.thrift.protocol.TField DOMAIN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("domainName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDomainState_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDomainState_argsTupleSchemeFactory());
    }

    public String domainName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DOMAIN_NAME((short)1, "domainName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOMAIN_NAME
            return DOMAIN_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOMAIN_NAME, new org.apache.thrift.meta_data.FieldMetaData("domainName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDomainState_args.class, metaDataMap);
    }

    public getDomainState_args() {
    }

    public getDomainState_args(
      String domainName)
    {
      this();
      this.domainName = domainName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDomainState_args(getDomainState_args other) {
      if (other.isSetDomainName()) {
        this.domainName = other.domainName;
      }
    }

    public getDomainState_args deepCopy() {
      return new getDomainState_args(this);
    }

    @Override
    public void clear() {
      this.domainName = null;
    }

    public String getDomainName() {
      return this.domainName;
    }

    public getDomainState_args setDomainName(String domainName) {
      this.domainName = domainName;
      return this;
    }

    public void unsetDomainName() {
      this.domainName = null;
    }

    /** Returns true if field domainName is set (has been assigned a value) and false otherwise */
    public boolean isSetDomainName() {
      return this.domainName != null;
    }

    public void setDomainNameIsSet(boolean value) {
      if (!value) {
        this.domainName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOMAIN_NAME:
        if (value == null) {
          unsetDomainName();
        } else {
          setDomainName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOMAIN_NAME:
        return getDomainName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DOMAIN_NAME:
        return isSetDomainName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDomainState_args)
        return this.equals((getDomainState_args)that);
      return false;
    }

    public boolean equals(getDomainState_args that) {
      if (that == null)
        return false;

      boolean this_present_domainName = true && this.isSetDomainName();
      boolean that_present_domainName = true && that.isSetDomainName();
      if (this_present_domainName || that_present_domainName) {
        if (!(this_present_domainName && that_present_domainName))
          return false;
        if (!this.domainName.equals(that.domainName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getDomainState_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getDomainState_args typedOther = (getDomainState_args)other;

      lastComparison = Boolean.valueOf(isSetDomainName()).compareTo(typedOther.isSetDomainName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDomainName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domainName, typedOther.domainName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDomainState_args(");
      boolean first = true;

      sb.append("domainName:");
      if (this.domainName == null) {
        sb.append("null");
      } else {
        sb.append(this.domainName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDomainState_argsStandardSchemeFactory implements SchemeFactory {
      public getDomainState_argsStandardScheme getScheme() {
        return new getDomainState_argsStandardScheme();
      }
    }

    private static class getDomainState_argsStandardScheme extends StandardScheme<getDomainState_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDomainState_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DOMAIN_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.domainName = iprot.readString();
                struct.setDomainNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDomainState_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.domainName != null) {
          oprot.writeFieldBegin(DOMAIN_NAME_FIELD_DESC);
          oprot.writeString(struct.domainName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDomainState_argsTupleSchemeFactory implements SchemeFactory {
      public getDomainState_argsTupleScheme getScheme() {
        return new getDomainState_argsTupleScheme();
      }
    }

    private static class getDomainState_argsTupleScheme extends TupleScheme<getDomainState_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDomainState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDomainName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDomainName()) {
          oprot.writeString(struct.domainName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDomainState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.domainName = iprot.readString();
          struct.setDomainNameIsSet(true);
        }
      }
    }

  }

  public static class getDomainState_result implements org.apache.thrift.TBase<getDomainState_result, getDomainState_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDomainState_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField LIBVIRT_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("libvirtException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDomainState_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDomainState_resultTupleSchemeFactory());
    }

    /**
     * 
     * @see DomainState
     */
    public DomainState success; // required
    public LibvirtException libvirtException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see DomainState
       */
      SUCCESS((short)0, "success"),
      LIBVIRT_EXCEPTION((short)1, "libvirtException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // LIBVIRT_EXCEPTION
            return LIBVIRT_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DomainState.class)));
      tmpMap.put(_Fields.LIBVIRT_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("libvirtException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDomainState_result.class, metaDataMap);
    }

    public getDomainState_result() {
    }

    public getDomainState_result(
      DomainState success,
      LibvirtException libvirtException)
    {
      this();
      this.success = success;
      this.libvirtException = libvirtException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDomainState_result(getDomainState_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetLibvirtException()) {
        this.libvirtException = new LibvirtException(other.libvirtException);
      }
    }

    public getDomainState_result deepCopy() {
      return new getDomainState_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.libvirtException = null;
    }

    /**
     * 
     * @see DomainState
     */
    public DomainState getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see DomainState
     */
    public getDomainState_result setSuccess(DomainState success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public LibvirtException getLibvirtException() {
      return this.libvirtException;
    }

    public getDomainState_result setLibvirtException(LibvirtException libvirtException) {
      this.libvirtException = libvirtException;
      return this;
    }

    public void unsetLibvirtException() {
      this.libvirtException = null;
    }

    /** Returns true if field libvirtException is set (has been assigned a value) and false otherwise */
    public boolean isSetLibvirtException() {
      return this.libvirtException != null;
    }

    public void setLibvirtExceptionIsSet(boolean value) {
      if (!value) {
        this.libvirtException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DomainState)value);
        }
        break;

      case LIBVIRT_EXCEPTION:
        if (value == null) {
          unsetLibvirtException();
        } else {
          setLibvirtException((LibvirtException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case LIBVIRT_EXCEPTION:
        return getLibvirtException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case LIBVIRT_EXCEPTION:
        return isSetLibvirtException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDomainState_result)
        return this.equals((getDomainState_result)that);
      return false;
    }

    public boolean equals(getDomainState_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_libvirtException = true && this.isSetLibvirtException();
      boolean that_present_libvirtException = true && that.isSetLibvirtException();
      if (this_present_libvirtException || that_present_libvirtException) {
        if (!(this_present_libvirtException && that_present_libvirtException))
          return false;
        if (!this.libvirtException.equals(that.libvirtException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getDomainState_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getDomainState_result typedOther = (getDomainState_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLibvirtException()).compareTo(typedOther.isSetLibvirtException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLibvirtException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.libvirtException, typedOther.libvirtException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDomainState_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("libvirtException:");
      if (this.libvirtException == null) {
        sb.append("null");
      } else {
        sb.append(this.libvirtException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDomainState_resultStandardSchemeFactory implements SchemeFactory {
      public getDomainState_resultStandardScheme getScheme() {
        return new getDomainState_resultStandardScheme();
      }
    }

    private static class getDomainState_resultStandardScheme extends StandardScheme<getDomainState_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDomainState_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = DomainState.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // LIBVIRT_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.libvirtException = new LibvirtException();
                struct.libvirtException.read(iprot);
                struct.setLibvirtExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDomainState_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.libvirtException != null) {
          oprot.writeFieldBegin(LIBVIRT_EXCEPTION_FIELD_DESC);
          struct.libvirtException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDomainState_resultTupleSchemeFactory implements SchemeFactory {
      public getDomainState_resultTupleScheme getScheme() {
        return new getDomainState_resultTupleScheme();
      }
    }

    private static class getDomainState_resultTupleScheme extends TupleScheme<getDomainState_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDomainState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetLibvirtException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetLibvirtException()) {
          struct.libvirtException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDomainState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = DomainState.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.libvirtException = new LibvirtException();
          struct.libvirtException.read(iprot);
          struct.setLibvirtExceptionIsSet(true);
        }
      }
    }

  }

  public static class getDomainInfo_args implements org.apache.thrift.TBase<getDomainInfo_args, getDomainInfo_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDomainInfo_args");

    private static final org.apache.thrift.protocol.TField DOMAIN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("domainName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDomainInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDomainInfo_argsTupleSchemeFactory());
    }

    public String domainName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DOMAIN_NAME((short)1, "domainName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOMAIN_NAME
            return DOMAIN_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOMAIN_NAME, new org.apache.thrift.meta_data.FieldMetaData("domainName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDomainInfo_args.class, metaDataMap);
    }

    public getDomainInfo_args() {
    }

    public getDomainInfo_args(
      String domainName)
    {
      this();
      this.domainName = domainName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDomainInfo_args(getDomainInfo_args other) {
      if (other.isSetDomainName()) {
        this.domainName = other.domainName;
      }
    }

    public getDomainInfo_args deepCopy() {
      return new getDomainInfo_args(this);
    }

    @Override
    public void clear() {
      this.domainName = null;
    }

    public String getDomainName() {
      return this.domainName;
    }

    public getDomainInfo_args setDomainName(String domainName) {
      this.domainName = domainName;
      return this;
    }

    public void unsetDomainName() {
      this.domainName = null;
    }

    /** Returns true if field domainName is set (has been assigned a value) and false otherwise */
    public boolean isSetDomainName() {
      return this.domainName != null;
    }

    public void setDomainNameIsSet(boolean value) {
      if (!value) {
        this.domainName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOMAIN_NAME:
        if (value == null) {
          unsetDomainName();
        } else {
          setDomainName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOMAIN_NAME:
        return getDomainName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DOMAIN_NAME:
        return isSetDomainName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDomainInfo_args)
        return this.equals((getDomainInfo_args)that);
      return false;
    }

    public boolean equals(getDomainInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_domainName = true && this.isSetDomainName();
      boolean that_present_domainName = true && that.isSetDomainName();
      if (this_present_domainName || that_present_domainName) {
        if (!(this_present_domainName && that_present_domainName))
          return false;
        if (!this.domainName.equals(that.domainName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getDomainInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getDomainInfo_args typedOther = (getDomainInfo_args)other;

      lastComparison = Boolean.valueOf(isSetDomainName()).compareTo(typedOther.isSetDomainName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDomainName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domainName, typedOther.domainName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDomainInfo_args(");
      boolean first = true;

      sb.append("domainName:");
      if (this.domainName == null) {
        sb.append("null");
      } else {
        sb.append(this.domainName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDomainInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getDomainInfo_argsStandardScheme getScheme() {
        return new getDomainInfo_argsStandardScheme();
      }
    }

    private static class getDomainInfo_argsStandardScheme extends StandardScheme<getDomainInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDomainInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DOMAIN_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.domainName = iprot.readString();
                struct.setDomainNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDomainInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.domainName != null) {
          oprot.writeFieldBegin(DOMAIN_NAME_FIELD_DESC);
          oprot.writeString(struct.domainName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDomainInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getDomainInfo_argsTupleScheme getScheme() {
        return new getDomainInfo_argsTupleScheme();
      }
    }

    private static class getDomainInfo_argsTupleScheme extends TupleScheme<getDomainInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDomainInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDomainName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDomainName()) {
          oprot.writeString(struct.domainName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDomainInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.domainName = iprot.readString();
          struct.setDomainNameIsSet(true);
        }
      }
    }

  }

  public static class getDomainInfo_result implements org.apache.thrift.TBase<getDomainInfo_result, getDomainInfo_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDomainInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField LIBVIRT_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("libvirtException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getDomainInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getDomainInfo_resultTupleSchemeFactory());
    }

    public DomainInfo success; // required
    public LibvirtException libvirtException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      LIBVIRT_EXCEPTION((short)1, "libvirtException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // LIBVIRT_EXCEPTION
            return LIBVIRT_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DomainInfo.class)));
      tmpMap.put(_Fields.LIBVIRT_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("libvirtException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDomainInfo_result.class, metaDataMap);
    }

    public getDomainInfo_result() {
    }

    public getDomainInfo_result(
      DomainInfo success,
      LibvirtException libvirtException)
    {
      this();
      this.success = success;
      this.libvirtException = libvirtException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDomainInfo_result(getDomainInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new DomainInfo(other.success);
      }
      if (other.isSetLibvirtException()) {
        this.libvirtException = new LibvirtException(other.libvirtException);
      }
    }

    public getDomainInfo_result deepCopy() {
      return new getDomainInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.libvirtException = null;
    }

    public DomainInfo getSuccess() {
      return this.success;
    }

    public getDomainInfo_result setSuccess(DomainInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public LibvirtException getLibvirtException() {
      return this.libvirtException;
    }

    public getDomainInfo_result setLibvirtException(LibvirtException libvirtException) {
      this.libvirtException = libvirtException;
      return this;
    }

    public void unsetLibvirtException() {
      this.libvirtException = null;
    }

    /** Returns true if field libvirtException is set (has been assigned a value) and false otherwise */
    public boolean isSetLibvirtException() {
      return this.libvirtException != null;
    }

    public void setLibvirtExceptionIsSet(boolean value) {
      if (!value) {
        this.libvirtException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DomainInfo)value);
        }
        break;

      case LIBVIRT_EXCEPTION:
        if (value == null) {
          unsetLibvirtException();
        } else {
          setLibvirtException((LibvirtException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case LIBVIRT_EXCEPTION:
        return getLibvirtException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case LIBVIRT_EXCEPTION:
        return isSetLibvirtException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDomainInfo_result)
        return this.equals((getDomainInfo_result)that);
      return false;
    }

    public boolean equals(getDomainInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_libvirtException = true && this.isSetLibvirtException();
      boolean that_present_libvirtException = true && that.isSetLibvirtException();
      if (this_present_libvirtException || that_present_libvirtException) {
        if (!(this_present_libvirtException && that_present_libvirtException))
          return false;
        if (!this.libvirtException.equals(that.libvirtException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getDomainInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getDomainInfo_result typedOther = (getDomainInfo_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLibvirtException()).compareTo(typedOther.isSetLibvirtException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLibvirtException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.libvirtException, typedOther.libvirtException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getDomainInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("libvirtException:");
      if (this.libvirtException == null) {
        sb.append("null");
      } else {
        sb.append(this.libvirtException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDomainInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getDomainInfo_resultStandardScheme getScheme() {
        return new getDomainInfo_resultStandardScheme();
      }
    }

    private static class getDomainInfo_resultStandardScheme extends StandardScheme<getDomainInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDomainInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new DomainInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // LIBVIRT_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.libvirtException = new LibvirtException();
                struct.libvirtException.read(iprot);
                struct.setLibvirtExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDomainInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.libvirtException != null) {
          oprot.writeFieldBegin(LIBVIRT_EXCEPTION_FIELD_DESC);
          struct.libvirtException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDomainInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getDomainInfo_resultTupleScheme getScheme() {
        return new getDomainInfo_resultTupleScheme();
      }
    }

    private static class getDomainInfo_resultTupleScheme extends TupleScheme<getDomainInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDomainInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetLibvirtException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetLibvirtException()) {
          struct.libvirtException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDomainInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new DomainInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.libvirtException = new LibvirtException();
          struct.libvirtException.read(iprot);
          struct.setLibvirtExceptionIsSet(true);
        }
      }
    }

  }

  public static class powerOn_args implements org.apache.thrift.TBase<powerOn_args, powerOn_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("powerOn_args");

    private static final org.apache.thrift.protocol.TField DOMAIN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("domainName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new powerOn_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new powerOn_argsTupleSchemeFactory());
    }

    public String domainName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DOMAIN_NAME((short)1, "domainName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOMAIN_NAME
            return DOMAIN_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOMAIN_NAME, new org.apache.thrift.meta_data.FieldMetaData("domainName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(powerOn_args.class, metaDataMap);
    }

    public powerOn_args() {
    }

    public powerOn_args(
      String domainName)
    {
      this();
      this.domainName = domainName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public powerOn_args(powerOn_args other) {
      if (other.isSetDomainName()) {
        this.domainName = other.domainName;
      }
    }

    public powerOn_args deepCopy() {
      return new powerOn_args(this);
    }

    @Override
    public void clear() {
      this.domainName = null;
    }

    public String getDomainName() {
      return this.domainName;
    }

    public powerOn_args setDomainName(String domainName) {
      this.domainName = domainName;
      return this;
    }

    public void unsetDomainName() {
      this.domainName = null;
    }

    /** Returns true if field domainName is set (has been assigned a value) and false otherwise */
    public boolean isSetDomainName() {
      return this.domainName != null;
    }

    public void setDomainNameIsSet(boolean value) {
      if (!value) {
        this.domainName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOMAIN_NAME:
        if (value == null) {
          unsetDomainName();
        } else {
          setDomainName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOMAIN_NAME:
        return getDomainName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DOMAIN_NAME:
        return isSetDomainName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof powerOn_args)
        return this.equals((powerOn_args)that);
      return false;
    }

    public boolean equals(powerOn_args that) {
      if (that == null)
        return false;

      boolean this_present_domainName = true && this.isSetDomainName();
      boolean that_present_domainName = true && that.isSetDomainName();
      if (this_present_domainName || that_present_domainName) {
        if (!(this_present_domainName && that_present_domainName))
          return false;
        if (!this.domainName.equals(that.domainName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(powerOn_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      powerOn_args typedOther = (powerOn_args)other;

      lastComparison = Boolean.valueOf(isSetDomainName()).compareTo(typedOther.isSetDomainName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDomainName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domainName, typedOther.domainName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("powerOn_args(");
      boolean first = true;

      sb.append("domainName:");
      if (this.domainName == null) {
        sb.append("null");
      } else {
        sb.append(this.domainName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class powerOn_argsStandardSchemeFactory implements SchemeFactory {
      public powerOn_argsStandardScheme getScheme() {
        return new powerOn_argsStandardScheme();
      }
    }

    private static class powerOn_argsStandardScheme extends StandardScheme<powerOn_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, powerOn_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DOMAIN_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.domainName = iprot.readString();
                struct.setDomainNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, powerOn_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.domainName != null) {
          oprot.writeFieldBegin(DOMAIN_NAME_FIELD_DESC);
          oprot.writeString(struct.domainName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class powerOn_argsTupleSchemeFactory implements SchemeFactory {
      public powerOn_argsTupleScheme getScheme() {
        return new powerOn_argsTupleScheme();
      }
    }

    private static class powerOn_argsTupleScheme extends TupleScheme<powerOn_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, powerOn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDomainName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDomainName()) {
          oprot.writeString(struct.domainName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, powerOn_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.domainName = iprot.readString();
          struct.setDomainNameIsSet(true);
        }
      }
    }

  }

  public static class powerOn_result implements org.apache.thrift.TBase<powerOn_result, powerOn_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("powerOn_result");

    private static final org.apache.thrift.protocol.TField LIBVIRT_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("libvirtException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new powerOn_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new powerOn_resultTupleSchemeFactory());
    }

    public LibvirtException libvirtException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LIBVIRT_EXCEPTION((short)1, "libvirtException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LIBVIRT_EXCEPTION
            return LIBVIRT_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LIBVIRT_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("libvirtException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(powerOn_result.class, metaDataMap);
    }

    public powerOn_result() {
    }

    public powerOn_result(
      LibvirtException libvirtException)
    {
      this();
      this.libvirtException = libvirtException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public powerOn_result(powerOn_result other) {
      if (other.isSetLibvirtException()) {
        this.libvirtException = new LibvirtException(other.libvirtException);
      }
    }

    public powerOn_result deepCopy() {
      return new powerOn_result(this);
    }

    @Override
    public void clear() {
      this.libvirtException = null;
    }

    public LibvirtException getLibvirtException() {
      return this.libvirtException;
    }

    public powerOn_result setLibvirtException(LibvirtException libvirtException) {
      this.libvirtException = libvirtException;
      return this;
    }

    public void unsetLibvirtException() {
      this.libvirtException = null;
    }

    /** Returns true if field libvirtException is set (has been assigned a value) and false otherwise */
    public boolean isSetLibvirtException() {
      return this.libvirtException != null;
    }

    public void setLibvirtExceptionIsSet(boolean value) {
      if (!value) {
        this.libvirtException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LIBVIRT_EXCEPTION:
        if (value == null) {
          unsetLibvirtException();
        } else {
          setLibvirtException((LibvirtException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LIBVIRT_EXCEPTION:
        return getLibvirtException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LIBVIRT_EXCEPTION:
        return isSetLibvirtException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof powerOn_result)
        return this.equals((powerOn_result)that);
      return false;
    }

    public boolean equals(powerOn_result that) {
      if (that == null)
        return false;

      boolean this_present_libvirtException = true && this.isSetLibvirtException();
      boolean that_present_libvirtException = true && that.isSetLibvirtException();
      if (this_present_libvirtException || that_present_libvirtException) {
        if (!(this_present_libvirtException && that_present_libvirtException))
          return false;
        if (!this.libvirtException.equals(that.libvirtException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(powerOn_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      powerOn_result typedOther = (powerOn_result)other;

      lastComparison = Boolean.valueOf(isSetLibvirtException()).compareTo(typedOther.isSetLibvirtException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLibvirtException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.libvirtException, typedOther.libvirtException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("powerOn_result(");
      boolean first = true;

      sb.append("libvirtException:");
      if (this.libvirtException == null) {
        sb.append("null");
      } else {
        sb.append(this.libvirtException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class powerOn_resultStandardSchemeFactory implements SchemeFactory {
      public powerOn_resultStandardScheme getScheme() {
        return new powerOn_resultStandardScheme();
      }
    }

    private static class powerOn_resultStandardScheme extends StandardScheme<powerOn_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, powerOn_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LIBVIRT_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.libvirtException = new LibvirtException();
                struct.libvirtException.read(iprot);
                struct.setLibvirtExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, powerOn_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.libvirtException != null) {
          oprot.writeFieldBegin(LIBVIRT_EXCEPTION_FIELD_DESC);
          struct.libvirtException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class powerOn_resultTupleSchemeFactory implements SchemeFactory {
      public powerOn_resultTupleScheme getScheme() {
        return new powerOn_resultTupleScheme();
      }
    }

    private static class powerOn_resultTupleScheme extends TupleScheme<powerOn_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, powerOn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLibvirtException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLibvirtException()) {
          struct.libvirtException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, powerOn_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.libvirtException = new LibvirtException();
          struct.libvirtException.read(iprot);
          struct.setLibvirtExceptionIsSet(true);
        }
      }
    }

  }

  public static class powerOff_args implements org.apache.thrift.TBase<powerOff_args, powerOff_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("powerOff_args");

    private static final org.apache.thrift.protocol.TField DOMAIN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("domainName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new powerOff_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new powerOff_argsTupleSchemeFactory());
    }

    public String domainName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DOMAIN_NAME((short)1, "domainName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOMAIN_NAME
            return DOMAIN_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOMAIN_NAME, new org.apache.thrift.meta_data.FieldMetaData("domainName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(powerOff_args.class, metaDataMap);
    }

    public powerOff_args() {
    }

    public powerOff_args(
      String domainName)
    {
      this();
      this.domainName = domainName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public powerOff_args(powerOff_args other) {
      if (other.isSetDomainName()) {
        this.domainName = other.domainName;
      }
    }

    public powerOff_args deepCopy() {
      return new powerOff_args(this);
    }

    @Override
    public void clear() {
      this.domainName = null;
    }

    public String getDomainName() {
      return this.domainName;
    }

    public powerOff_args setDomainName(String domainName) {
      this.domainName = domainName;
      return this;
    }

    public void unsetDomainName() {
      this.domainName = null;
    }

    /** Returns true if field domainName is set (has been assigned a value) and false otherwise */
    public boolean isSetDomainName() {
      return this.domainName != null;
    }

    public void setDomainNameIsSet(boolean value) {
      if (!value) {
        this.domainName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOMAIN_NAME:
        if (value == null) {
          unsetDomainName();
        } else {
          setDomainName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOMAIN_NAME:
        return getDomainName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DOMAIN_NAME:
        return isSetDomainName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof powerOff_args)
        return this.equals((powerOff_args)that);
      return false;
    }

    public boolean equals(powerOff_args that) {
      if (that == null)
        return false;

      boolean this_present_domainName = true && this.isSetDomainName();
      boolean that_present_domainName = true && that.isSetDomainName();
      if (this_present_domainName || that_present_domainName) {
        if (!(this_present_domainName && that_present_domainName))
          return false;
        if (!this.domainName.equals(that.domainName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(powerOff_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      powerOff_args typedOther = (powerOff_args)other;

      lastComparison = Boolean.valueOf(isSetDomainName()).compareTo(typedOther.isSetDomainName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDomainName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domainName, typedOther.domainName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("powerOff_args(");
      boolean first = true;

      sb.append("domainName:");
      if (this.domainName == null) {
        sb.append("null");
      } else {
        sb.append(this.domainName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class powerOff_argsStandardSchemeFactory implements SchemeFactory {
      public powerOff_argsStandardScheme getScheme() {
        return new powerOff_argsStandardScheme();
      }
    }

    private static class powerOff_argsStandardScheme extends StandardScheme<powerOff_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, powerOff_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DOMAIN_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.domainName = iprot.readString();
                struct.setDomainNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, powerOff_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.domainName != null) {
          oprot.writeFieldBegin(DOMAIN_NAME_FIELD_DESC);
          oprot.writeString(struct.domainName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class powerOff_argsTupleSchemeFactory implements SchemeFactory {
      public powerOff_argsTupleScheme getScheme() {
        return new powerOff_argsTupleScheme();
      }
    }

    private static class powerOff_argsTupleScheme extends TupleScheme<powerOff_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, powerOff_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDomainName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDomainName()) {
          oprot.writeString(struct.domainName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, powerOff_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.domainName = iprot.readString();
          struct.setDomainNameIsSet(true);
        }
      }
    }

  }

  public static class powerOff_result implements org.apache.thrift.TBase<powerOff_result, powerOff_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("powerOff_result");

    private static final org.apache.thrift.protocol.TField LIBVIRT_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("libvirtException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new powerOff_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new powerOff_resultTupleSchemeFactory());
    }

    public LibvirtException libvirtException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LIBVIRT_EXCEPTION((short)1, "libvirtException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LIBVIRT_EXCEPTION
            return LIBVIRT_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LIBVIRT_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("libvirtException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(powerOff_result.class, metaDataMap);
    }

    public powerOff_result() {
    }

    public powerOff_result(
      LibvirtException libvirtException)
    {
      this();
      this.libvirtException = libvirtException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public powerOff_result(powerOff_result other) {
      if (other.isSetLibvirtException()) {
        this.libvirtException = new LibvirtException(other.libvirtException);
      }
    }

    public powerOff_result deepCopy() {
      return new powerOff_result(this);
    }

    @Override
    public void clear() {
      this.libvirtException = null;
    }

    public LibvirtException getLibvirtException() {
      return this.libvirtException;
    }

    public powerOff_result setLibvirtException(LibvirtException libvirtException) {
      this.libvirtException = libvirtException;
      return this;
    }

    public void unsetLibvirtException() {
      this.libvirtException = null;
    }

    /** Returns true if field libvirtException is set (has been assigned a value) and false otherwise */
    public boolean isSetLibvirtException() {
      return this.libvirtException != null;
    }

    public void setLibvirtExceptionIsSet(boolean value) {
      if (!value) {
        this.libvirtException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LIBVIRT_EXCEPTION:
        if (value == null) {
          unsetLibvirtException();
        } else {
          setLibvirtException((LibvirtException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LIBVIRT_EXCEPTION:
        return getLibvirtException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LIBVIRT_EXCEPTION:
        return isSetLibvirtException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof powerOff_result)
        return this.equals((powerOff_result)that);
      return false;
    }

    public boolean equals(powerOff_result that) {
      if (that == null)
        return false;

      boolean this_present_libvirtException = true && this.isSetLibvirtException();
      boolean that_present_libvirtException = true && that.isSetLibvirtException();
      if (this_present_libvirtException || that_present_libvirtException) {
        if (!(this_present_libvirtException && that_present_libvirtException))
          return false;
        if (!this.libvirtException.equals(that.libvirtException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(powerOff_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      powerOff_result typedOther = (powerOff_result)other;

      lastComparison = Boolean.valueOf(isSetLibvirtException()).compareTo(typedOther.isSetLibvirtException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLibvirtException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.libvirtException, typedOther.libvirtException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("powerOff_result(");
      boolean first = true;

      sb.append("libvirtException:");
      if (this.libvirtException == null) {
        sb.append("null");
      } else {
        sb.append(this.libvirtException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class powerOff_resultStandardSchemeFactory implements SchemeFactory {
      public powerOff_resultStandardScheme getScheme() {
        return new powerOff_resultStandardScheme();
      }
    }

    private static class powerOff_resultStandardScheme extends StandardScheme<powerOff_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, powerOff_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LIBVIRT_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.libvirtException = new LibvirtException();
                struct.libvirtException.read(iprot);
                struct.setLibvirtExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, powerOff_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.libvirtException != null) {
          oprot.writeFieldBegin(LIBVIRT_EXCEPTION_FIELD_DESC);
          struct.libvirtException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class powerOff_resultTupleSchemeFactory implements SchemeFactory {
      public powerOff_resultTupleScheme getScheme() {
        return new powerOff_resultTupleScheme();
      }
    }

    private static class powerOff_resultTupleScheme extends TupleScheme<powerOff_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, powerOff_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLibvirtException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLibvirtException()) {
          struct.libvirtException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, powerOff_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.libvirtException = new LibvirtException();
          struct.libvirtException.read(iprot);
          struct.setLibvirtExceptionIsSet(true);
        }
      }
    }

  }

  public static class reset_args implements org.apache.thrift.TBase<reset_args, reset_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reset_args");

    private static final org.apache.thrift.protocol.TField DOMAIN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("domainName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reset_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reset_argsTupleSchemeFactory());
    }

    public String domainName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DOMAIN_NAME((short)1, "domainName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOMAIN_NAME
            return DOMAIN_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOMAIN_NAME, new org.apache.thrift.meta_data.FieldMetaData("domainName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reset_args.class, metaDataMap);
    }

    public reset_args() {
    }

    public reset_args(
      String domainName)
    {
      this();
      this.domainName = domainName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reset_args(reset_args other) {
      if (other.isSetDomainName()) {
        this.domainName = other.domainName;
      }
    }

    public reset_args deepCopy() {
      return new reset_args(this);
    }

    @Override
    public void clear() {
      this.domainName = null;
    }

    public String getDomainName() {
      return this.domainName;
    }

    public reset_args setDomainName(String domainName) {
      this.domainName = domainName;
      return this;
    }

    public void unsetDomainName() {
      this.domainName = null;
    }

    /** Returns true if field domainName is set (has been assigned a value) and false otherwise */
    public boolean isSetDomainName() {
      return this.domainName != null;
    }

    public void setDomainNameIsSet(boolean value) {
      if (!value) {
        this.domainName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOMAIN_NAME:
        if (value == null) {
          unsetDomainName();
        } else {
          setDomainName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOMAIN_NAME:
        return getDomainName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DOMAIN_NAME:
        return isSetDomainName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reset_args)
        return this.equals((reset_args)that);
      return false;
    }

    public boolean equals(reset_args that) {
      if (that == null)
        return false;

      boolean this_present_domainName = true && this.isSetDomainName();
      boolean that_present_domainName = true && that.isSetDomainName();
      if (this_present_domainName || that_present_domainName) {
        if (!(this_present_domainName && that_present_domainName))
          return false;
        if (!this.domainName.equals(that.domainName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(reset_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      reset_args typedOther = (reset_args)other;

      lastComparison = Boolean.valueOf(isSetDomainName()).compareTo(typedOther.isSetDomainName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDomainName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domainName, typedOther.domainName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reset_args(");
      boolean first = true;

      sb.append("domainName:");
      if (this.domainName == null) {
        sb.append("null");
      } else {
        sb.append(this.domainName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reset_argsStandardSchemeFactory implements SchemeFactory {
      public reset_argsStandardScheme getScheme() {
        return new reset_argsStandardScheme();
      }
    }

    private static class reset_argsStandardScheme extends StandardScheme<reset_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reset_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DOMAIN_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.domainName = iprot.readString();
                struct.setDomainNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reset_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.domainName != null) {
          oprot.writeFieldBegin(DOMAIN_NAME_FIELD_DESC);
          oprot.writeString(struct.domainName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reset_argsTupleSchemeFactory implements SchemeFactory {
      public reset_argsTupleScheme getScheme() {
        return new reset_argsTupleScheme();
      }
    }

    private static class reset_argsTupleScheme extends TupleScheme<reset_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reset_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDomainName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDomainName()) {
          oprot.writeString(struct.domainName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reset_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.domainName = iprot.readString();
          struct.setDomainNameIsSet(true);
        }
      }
    }

  }

  public static class reset_result implements org.apache.thrift.TBase<reset_result, reset_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reset_result");

    private static final org.apache.thrift.protocol.TField LIBVIRT_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("libvirtException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reset_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reset_resultTupleSchemeFactory());
    }

    public LibvirtException libvirtException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LIBVIRT_EXCEPTION((short)1, "libvirtException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LIBVIRT_EXCEPTION
            return LIBVIRT_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LIBVIRT_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("libvirtException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reset_result.class, metaDataMap);
    }

    public reset_result() {
    }

    public reset_result(
      LibvirtException libvirtException)
    {
      this();
      this.libvirtException = libvirtException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reset_result(reset_result other) {
      if (other.isSetLibvirtException()) {
        this.libvirtException = new LibvirtException(other.libvirtException);
      }
    }

    public reset_result deepCopy() {
      return new reset_result(this);
    }

    @Override
    public void clear() {
      this.libvirtException = null;
    }

    public LibvirtException getLibvirtException() {
      return this.libvirtException;
    }

    public reset_result setLibvirtException(LibvirtException libvirtException) {
      this.libvirtException = libvirtException;
      return this;
    }

    public void unsetLibvirtException() {
      this.libvirtException = null;
    }

    /** Returns true if field libvirtException is set (has been assigned a value) and false otherwise */
    public boolean isSetLibvirtException() {
      return this.libvirtException != null;
    }

    public void setLibvirtExceptionIsSet(boolean value) {
      if (!value) {
        this.libvirtException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LIBVIRT_EXCEPTION:
        if (value == null) {
          unsetLibvirtException();
        } else {
          setLibvirtException((LibvirtException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LIBVIRT_EXCEPTION:
        return getLibvirtException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LIBVIRT_EXCEPTION:
        return isSetLibvirtException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reset_result)
        return this.equals((reset_result)that);
      return false;
    }

    public boolean equals(reset_result that) {
      if (that == null)
        return false;

      boolean this_present_libvirtException = true && this.isSetLibvirtException();
      boolean that_present_libvirtException = true && that.isSetLibvirtException();
      if (this_present_libvirtException || that_present_libvirtException) {
        if (!(this_present_libvirtException && that_present_libvirtException))
          return false;
        if (!this.libvirtException.equals(that.libvirtException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(reset_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      reset_result typedOther = (reset_result)other;

      lastComparison = Boolean.valueOf(isSetLibvirtException()).compareTo(typedOther.isSetLibvirtException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLibvirtException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.libvirtException, typedOther.libvirtException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reset_result(");
      boolean first = true;

      sb.append("libvirtException:");
      if (this.libvirtException == null) {
        sb.append("null");
      } else {
        sb.append(this.libvirtException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reset_resultStandardSchemeFactory implements SchemeFactory {
      public reset_resultStandardScheme getScheme() {
        return new reset_resultStandardScheme();
      }
    }

    private static class reset_resultStandardScheme extends StandardScheme<reset_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reset_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LIBVIRT_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.libvirtException = new LibvirtException();
                struct.libvirtException.read(iprot);
                struct.setLibvirtExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reset_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.libvirtException != null) {
          oprot.writeFieldBegin(LIBVIRT_EXCEPTION_FIELD_DESC);
          struct.libvirtException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reset_resultTupleSchemeFactory implements SchemeFactory {
      public reset_resultTupleScheme getScheme() {
        return new reset_resultTupleScheme();
      }
    }

    private static class reset_resultTupleScheme extends TupleScheme<reset_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reset_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLibvirtException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLibvirtException()) {
          struct.libvirtException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reset_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.libvirtException = new LibvirtException();
          struct.libvirtException.read(iprot);
          struct.setLibvirtExceptionIsSet(true);
        }
      }
    }

  }

  public static class pause_args implements org.apache.thrift.TBase<pause_args, pause_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pause_args");

    private static final org.apache.thrift.protocol.TField DOMAIN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("domainName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pause_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pause_argsTupleSchemeFactory());
    }

    public String domainName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DOMAIN_NAME((short)1, "domainName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOMAIN_NAME
            return DOMAIN_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOMAIN_NAME, new org.apache.thrift.meta_data.FieldMetaData("domainName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pause_args.class, metaDataMap);
    }

    public pause_args() {
    }

    public pause_args(
      String domainName)
    {
      this();
      this.domainName = domainName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pause_args(pause_args other) {
      if (other.isSetDomainName()) {
        this.domainName = other.domainName;
      }
    }

    public pause_args deepCopy() {
      return new pause_args(this);
    }

    @Override
    public void clear() {
      this.domainName = null;
    }

    public String getDomainName() {
      return this.domainName;
    }

    public pause_args setDomainName(String domainName) {
      this.domainName = domainName;
      return this;
    }

    public void unsetDomainName() {
      this.domainName = null;
    }

    /** Returns true if field domainName is set (has been assigned a value) and false otherwise */
    public boolean isSetDomainName() {
      return this.domainName != null;
    }

    public void setDomainNameIsSet(boolean value) {
      if (!value) {
        this.domainName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOMAIN_NAME:
        if (value == null) {
          unsetDomainName();
        } else {
          setDomainName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOMAIN_NAME:
        return getDomainName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DOMAIN_NAME:
        return isSetDomainName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pause_args)
        return this.equals((pause_args)that);
      return false;
    }

    public boolean equals(pause_args that) {
      if (that == null)
        return false;

      boolean this_present_domainName = true && this.isSetDomainName();
      boolean that_present_domainName = true && that.isSetDomainName();
      if (this_present_domainName || that_present_domainName) {
        if (!(this_present_domainName && that_present_domainName))
          return false;
        if (!this.domainName.equals(that.domainName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(pause_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      pause_args typedOther = (pause_args)other;

      lastComparison = Boolean.valueOf(isSetDomainName()).compareTo(typedOther.isSetDomainName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDomainName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domainName, typedOther.domainName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pause_args(");
      boolean first = true;

      sb.append("domainName:");
      if (this.domainName == null) {
        sb.append("null");
      } else {
        sb.append(this.domainName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pause_argsStandardSchemeFactory implements SchemeFactory {
      public pause_argsStandardScheme getScheme() {
        return new pause_argsStandardScheme();
      }
    }

    private static class pause_argsStandardScheme extends StandardScheme<pause_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pause_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DOMAIN_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.domainName = iprot.readString();
                struct.setDomainNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pause_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.domainName != null) {
          oprot.writeFieldBegin(DOMAIN_NAME_FIELD_DESC);
          oprot.writeString(struct.domainName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pause_argsTupleSchemeFactory implements SchemeFactory {
      public pause_argsTupleScheme getScheme() {
        return new pause_argsTupleScheme();
      }
    }

    private static class pause_argsTupleScheme extends TupleScheme<pause_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pause_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDomainName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDomainName()) {
          oprot.writeString(struct.domainName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pause_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.domainName = iprot.readString();
          struct.setDomainNameIsSet(true);
        }
      }
    }

  }

  public static class pause_result implements org.apache.thrift.TBase<pause_result, pause_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pause_result");

    private static final org.apache.thrift.protocol.TField LIBVIRT_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("libvirtException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pause_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pause_resultTupleSchemeFactory());
    }

    public LibvirtException libvirtException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LIBVIRT_EXCEPTION((short)1, "libvirtException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LIBVIRT_EXCEPTION
            return LIBVIRT_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LIBVIRT_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("libvirtException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pause_result.class, metaDataMap);
    }

    public pause_result() {
    }

    public pause_result(
      LibvirtException libvirtException)
    {
      this();
      this.libvirtException = libvirtException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pause_result(pause_result other) {
      if (other.isSetLibvirtException()) {
        this.libvirtException = new LibvirtException(other.libvirtException);
      }
    }

    public pause_result deepCopy() {
      return new pause_result(this);
    }

    @Override
    public void clear() {
      this.libvirtException = null;
    }

    public LibvirtException getLibvirtException() {
      return this.libvirtException;
    }

    public pause_result setLibvirtException(LibvirtException libvirtException) {
      this.libvirtException = libvirtException;
      return this;
    }

    public void unsetLibvirtException() {
      this.libvirtException = null;
    }

    /** Returns true if field libvirtException is set (has been assigned a value) and false otherwise */
    public boolean isSetLibvirtException() {
      return this.libvirtException != null;
    }

    public void setLibvirtExceptionIsSet(boolean value) {
      if (!value) {
        this.libvirtException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LIBVIRT_EXCEPTION:
        if (value == null) {
          unsetLibvirtException();
        } else {
          setLibvirtException((LibvirtException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LIBVIRT_EXCEPTION:
        return getLibvirtException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LIBVIRT_EXCEPTION:
        return isSetLibvirtException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pause_result)
        return this.equals((pause_result)that);
      return false;
    }

    public boolean equals(pause_result that) {
      if (that == null)
        return false;

      boolean this_present_libvirtException = true && this.isSetLibvirtException();
      boolean that_present_libvirtException = true && that.isSetLibvirtException();
      if (this_present_libvirtException || that_present_libvirtException) {
        if (!(this_present_libvirtException && that_present_libvirtException))
          return false;
        if (!this.libvirtException.equals(that.libvirtException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(pause_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      pause_result typedOther = (pause_result)other;

      lastComparison = Boolean.valueOf(isSetLibvirtException()).compareTo(typedOther.isSetLibvirtException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLibvirtException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.libvirtException, typedOther.libvirtException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pause_result(");
      boolean first = true;

      sb.append("libvirtException:");
      if (this.libvirtException == null) {
        sb.append("null");
      } else {
        sb.append(this.libvirtException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pause_resultStandardSchemeFactory implements SchemeFactory {
      public pause_resultStandardScheme getScheme() {
        return new pause_resultStandardScheme();
      }
    }

    private static class pause_resultStandardScheme extends StandardScheme<pause_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pause_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LIBVIRT_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.libvirtException = new LibvirtException();
                struct.libvirtException.read(iprot);
                struct.setLibvirtExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pause_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.libvirtException != null) {
          oprot.writeFieldBegin(LIBVIRT_EXCEPTION_FIELD_DESC);
          struct.libvirtException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pause_resultTupleSchemeFactory implements SchemeFactory {
      public pause_resultTupleScheme getScheme() {
        return new pause_resultTupleScheme();
      }
    }

    private static class pause_resultTupleScheme extends TupleScheme<pause_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pause_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLibvirtException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLibvirtException()) {
          struct.libvirtException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pause_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.libvirtException = new LibvirtException();
          struct.libvirtException.read(iprot);
          struct.setLibvirtExceptionIsSet(true);
        }
      }
    }

  }

  public static class resume_args implements org.apache.thrift.TBase<resume_args, resume_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resume_args");

    private static final org.apache.thrift.protocol.TField DOMAIN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("domainName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resume_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resume_argsTupleSchemeFactory());
    }

    public String domainName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DOMAIN_NAME((short)1, "domainName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOMAIN_NAME
            return DOMAIN_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOMAIN_NAME, new org.apache.thrift.meta_data.FieldMetaData("domainName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resume_args.class, metaDataMap);
    }

    public resume_args() {
    }

    public resume_args(
      String domainName)
    {
      this();
      this.domainName = domainName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resume_args(resume_args other) {
      if (other.isSetDomainName()) {
        this.domainName = other.domainName;
      }
    }

    public resume_args deepCopy() {
      return new resume_args(this);
    }

    @Override
    public void clear() {
      this.domainName = null;
    }

    public String getDomainName() {
      return this.domainName;
    }

    public resume_args setDomainName(String domainName) {
      this.domainName = domainName;
      return this;
    }

    public void unsetDomainName() {
      this.domainName = null;
    }

    /** Returns true if field domainName is set (has been assigned a value) and false otherwise */
    public boolean isSetDomainName() {
      return this.domainName != null;
    }

    public void setDomainNameIsSet(boolean value) {
      if (!value) {
        this.domainName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOMAIN_NAME:
        if (value == null) {
          unsetDomainName();
        } else {
          setDomainName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOMAIN_NAME:
        return getDomainName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DOMAIN_NAME:
        return isSetDomainName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resume_args)
        return this.equals((resume_args)that);
      return false;
    }

    public boolean equals(resume_args that) {
      if (that == null)
        return false;

      boolean this_present_domainName = true && this.isSetDomainName();
      boolean that_present_domainName = true && that.isSetDomainName();
      if (this_present_domainName || that_present_domainName) {
        if (!(this_present_domainName && that_present_domainName))
          return false;
        if (!this.domainName.equals(that.domainName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(resume_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      resume_args typedOther = (resume_args)other;

      lastComparison = Boolean.valueOf(isSetDomainName()).compareTo(typedOther.isSetDomainName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDomainName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domainName, typedOther.domainName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resume_args(");
      boolean first = true;

      sb.append("domainName:");
      if (this.domainName == null) {
        sb.append("null");
      } else {
        sb.append(this.domainName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resume_argsStandardSchemeFactory implements SchemeFactory {
      public resume_argsStandardScheme getScheme() {
        return new resume_argsStandardScheme();
      }
    }

    private static class resume_argsStandardScheme extends StandardScheme<resume_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resume_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DOMAIN_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.domainName = iprot.readString();
                struct.setDomainNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resume_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.domainName != null) {
          oprot.writeFieldBegin(DOMAIN_NAME_FIELD_DESC);
          oprot.writeString(struct.domainName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resume_argsTupleSchemeFactory implements SchemeFactory {
      public resume_argsTupleScheme getScheme() {
        return new resume_argsTupleScheme();
      }
    }

    private static class resume_argsTupleScheme extends TupleScheme<resume_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resume_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDomainName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDomainName()) {
          oprot.writeString(struct.domainName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resume_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.domainName = iprot.readString();
          struct.setDomainNameIsSet(true);
        }
      }
    }

  }

  public static class resume_result implements org.apache.thrift.TBase<resume_result, resume_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resume_result");

    private static final org.apache.thrift.protocol.TField LIBVIRT_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("libvirtException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resume_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resume_resultTupleSchemeFactory());
    }

    public LibvirtException libvirtException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LIBVIRT_EXCEPTION((short)1, "libvirtException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LIBVIRT_EXCEPTION
            return LIBVIRT_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LIBVIRT_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("libvirtException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resume_result.class, metaDataMap);
    }

    public resume_result() {
    }

    public resume_result(
      LibvirtException libvirtException)
    {
      this();
      this.libvirtException = libvirtException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resume_result(resume_result other) {
      if (other.isSetLibvirtException()) {
        this.libvirtException = new LibvirtException(other.libvirtException);
      }
    }

    public resume_result deepCopy() {
      return new resume_result(this);
    }

    @Override
    public void clear() {
      this.libvirtException = null;
    }

    public LibvirtException getLibvirtException() {
      return this.libvirtException;
    }

    public resume_result setLibvirtException(LibvirtException libvirtException) {
      this.libvirtException = libvirtException;
      return this;
    }

    public void unsetLibvirtException() {
      this.libvirtException = null;
    }

    /** Returns true if field libvirtException is set (has been assigned a value) and false otherwise */
    public boolean isSetLibvirtException() {
      return this.libvirtException != null;
    }

    public void setLibvirtExceptionIsSet(boolean value) {
      if (!value) {
        this.libvirtException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LIBVIRT_EXCEPTION:
        if (value == null) {
          unsetLibvirtException();
        } else {
          setLibvirtException((LibvirtException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LIBVIRT_EXCEPTION:
        return getLibvirtException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LIBVIRT_EXCEPTION:
        return isSetLibvirtException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resume_result)
        return this.equals((resume_result)that);
      return false;
    }

    public boolean equals(resume_result that) {
      if (that == null)
        return false;

      boolean this_present_libvirtException = true && this.isSetLibvirtException();
      boolean that_present_libvirtException = true && that.isSetLibvirtException();
      if (this_present_libvirtException || that_present_libvirtException) {
        if (!(this_present_libvirtException && that_present_libvirtException))
          return false;
        if (!this.libvirtException.equals(that.libvirtException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(resume_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      resume_result typedOther = (resume_result)other;

      lastComparison = Boolean.valueOf(isSetLibvirtException()).compareTo(typedOther.isSetLibvirtException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLibvirtException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.libvirtException, typedOther.libvirtException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resume_result(");
      boolean first = true;

      sb.append("libvirtException:");
      if (this.libvirtException == null) {
        sb.append("null");
      } else {
        sb.append(this.libvirtException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resume_resultStandardSchemeFactory implements SchemeFactory {
      public resume_resultStandardScheme getScheme() {
        return new resume_resultStandardScheme();
      }
    }

    private static class resume_resultStandardScheme extends StandardScheme<resume_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resume_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LIBVIRT_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.libvirtException = new LibvirtException();
                struct.libvirtException.read(iprot);
                struct.setLibvirtExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resume_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.libvirtException != null) {
          oprot.writeFieldBegin(LIBVIRT_EXCEPTION_FIELD_DESC);
          struct.libvirtException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resume_resultTupleSchemeFactory implements SchemeFactory {
      public resume_resultTupleScheme getScheme() {
        return new resume_resultTupleScheme();
      }
    }

    private static class resume_resultTupleScheme extends TupleScheme<resume_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resume_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLibvirtException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLibvirtException()) {
          struct.libvirtException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resume_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.libvirtException = new LibvirtException();
          struct.libvirtException.read(iprot);
          struct.setLibvirtExceptionIsSet(true);
        }
      }
    }

  }

  public static class createStoragePool_args implements org.apache.thrift.TBase<createStoragePool_args, createStoragePool_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createStoragePool_args");

    private static final org.apache.thrift.protocol.TField XML_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("xmlDesc", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createStoragePool_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createStoragePool_argsTupleSchemeFactory());
    }

    public String xmlDesc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      XML_DESC((short)1, "xmlDesc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // XML_DESC
            return XML_DESC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.XML_DESC, new org.apache.thrift.meta_data.FieldMetaData("xmlDesc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createStoragePool_args.class, metaDataMap);
    }

    public createStoragePool_args() {
    }

    public createStoragePool_args(
      String xmlDesc)
    {
      this();
      this.xmlDesc = xmlDesc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createStoragePool_args(createStoragePool_args other) {
      if (other.isSetXmlDesc()) {
        this.xmlDesc = other.xmlDesc;
      }
    }

    public createStoragePool_args deepCopy() {
      return new createStoragePool_args(this);
    }

    @Override
    public void clear() {
      this.xmlDesc = null;
    }

    public String getXmlDesc() {
      return this.xmlDesc;
    }

    public createStoragePool_args setXmlDesc(String xmlDesc) {
      this.xmlDesc = xmlDesc;
      return this;
    }

    public void unsetXmlDesc() {
      this.xmlDesc = null;
    }

    /** Returns true if field xmlDesc is set (has been assigned a value) and false otherwise */
    public boolean isSetXmlDesc() {
      return this.xmlDesc != null;
    }

    public void setXmlDescIsSet(boolean value) {
      if (!value) {
        this.xmlDesc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case XML_DESC:
        if (value == null) {
          unsetXmlDesc();
        } else {
          setXmlDesc((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case XML_DESC:
        return getXmlDesc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case XML_DESC:
        return isSetXmlDesc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createStoragePool_args)
        return this.equals((createStoragePool_args)that);
      return false;
    }

    public boolean equals(createStoragePool_args that) {
      if (that == null)
        return false;

      boolean this_present_xmlDesc = true && this.isSetXmlDesc();
      boolean that_present_xmlDesc = true && that.isSetXmlDesc();
      if (this_present_xmlDesc || that_present_xmlDesc) {
        if (!(this_present_xmlDesc && that_present_xmlDesc))
          return false;
        if (!this.xmlDesc.equals(that.xmlDesc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createStoragePool_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createStoragePool_args typedOther = (createStoragePool_args)other;

      lastComparison = Boolean.valueOf(isSetXmlDesc()).compareTo(typedOther.isSetXmlDesc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetXmlDesc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xmlDesc, typedOther.xmlDesc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createStoragePool_args(");
      boolean first = true;

      sb.append("xmlDesc:");
      if (this.xmlDesc == null) {
        sb.append("null");
      } else {
        sb.append(this.xmlDesc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createStoragePool_argsStandardSchemeFactory implements SchemeFactory {
      public createStoragePool_argsStandardScheme getScheme() {
        return new createStoragePool_argsStandardScheme();
      }
    }

    private static class createStoragePool_argsStandardScheme extends StandardScheme<createStoragePool_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createStoragePool_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // XML_DESC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.xmlDesc = iprot.readString();
                struct.setXmlDescIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createStoragePool_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.xmlDesc != null) {
          oprot.writeFieldBegin(XML_DESC_FIELD_DESC);
          oprot.writeString(struct.xmlDesc);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createStoragePool_argsTupleSchemeFactory implements SchemeFactory {
      public createStoragePool_argsTupleScheme getScheme() {
        return new createStoragePool_argsTupleScheme();
      }
    }

    private static class createStoragePool_argsTupleScheme extends TupleScheme<createStoragePool_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createStoragePool_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetXmlDesc()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetXmlDesc()) {
          oprot.writeString(struct.xmlDesc);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createStoragePool_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.xmlDesc = iprot.readString();
          struct.setXmlDescIsSet(true);
        }
      }
    }

  }

  public static class createStoragePool_result implements org.apache.thrift.TBase<createStoragePool_result, createStoragePool_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createStoragePool_result");

    private static final org.apache.thrift.protocol.TField LIBVIRT_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("libvirtException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new createStoragePool_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new createStoragePool_resultTupleSchemeFactory());
    }

    public LibvirtException libvirtException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LIBVIRT_EXCEPTION((short)1, "libvirtException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LIBVIRT_EXCEPTION
            return LIBVIRT_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LIBVIRT_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("libvirtException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createStoragePool_result.class, metaDataMap);
    }

    public createStoragePool_result() {
    }

    public createStoragePool_result(
      LibvirtException libvirtException)
    {
      this();
      this.libvirtException = libvirtException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createStoragePool_result(createStoragePool_result other) {
      if (other.isSetLibvirtException()) {
        this.libvirtException = new LibvirtException(other.libvirtException);
      }
    }

    public createStoragePool_result deepCopy() {
      return new createStoragePool_result(this);
    }

    @Override
    public void clear() {
      this.libvirtException = null;
    }

    public LibvirtException getLibvirtException() {
      return this.libvirtException;
    }

    public createStoragePool_result setLibvirtException(LibvirtException libvirtException) {
      this.libvirtException = libvirtException;
      return this;
    }

    public void unsetLibvirtException() {
      this.libvirtException = null;
    }

    /** Returns true if field libvirtException is set (has been assigned a value) and false otherwise */
    public boolean isSetLibvirtException() {
      return this.libvirtException != null;
    }

    public void setLibvirtExceptionIsSet(boolean value) {
      if (!value) {
        this.libvirtException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LIBVIRT_EXCEPTION:
        if (value == null) {
          unsetLibvirtException();
        } else {
          setLibvirtException((LibvirtException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LIBVIRT_EXCEPTION:
        return getLibvirtException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LIBVIRT_EXCEPTION:
        return isSetLibvirtException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createStoragePool_result)
        return this.equals((createStoragePool_result)that);
      return false;
    }

    public boolean equals(createStoragePool_result that) {
      if (that == null)
        return false;

      boolean this_present_libvirtException = true && this.isSetLibvirtException();
      boolean that_present_libvirtException = true && that.isSetLibvirtException();
      if (this_present_libvirtException || that_present_libvirtException) {
        if (!(this_present_libvirtException && that_present_libvirtException))
          return false;
        if (!this.libvirtException.equals(that.libvirtException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(createStoragePool_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      createStoragePool_result typedOther = (createStoragePool_result)other;

      lastComparison = Boolean.valueOf(isSetLibvirtException()).compareTo(typedOther.isSetLibvirtException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLibvirtException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.libvirtException, typedOther.libvirtException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("createStoragePool_result(");
      boolean first = true;

      sb.append("libvirtException:");
      if (this.libvirtException == null) {
        sb.append("null");
      } else {
        sb.append(this.libvirtException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createStoragePool_resultStandardSchemeFactory implements SchemeFactory {
      public createStoragePool_resultStandardScheme getScheme() {
        return new createStoragePool_resultStandardScheme();
      }
    }

    private static class createStoragePool_resultStandardScheme extends StandardScheme<createStoragePool_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createStoragePool_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LIBVIRT_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.libvirtException = new LibvirtException();
                struct.libvirtException.read(iprot);
                struct.setLibvirtExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createStoragePool_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.libvirtException != null) {
          oprot.writeFieldBegin(LIBVIRT_EXCEPTION_FIELD_DESC);
          struct.libvirtException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createStoragePool_resultTupleSchemeFactory implements SchemeFactory {
      public createStoragePool_resultTupleScheme getScheme() {
        return new createStoragePool_resultTupleScheme();
      }
    }

    private static class createStoragePool_resultTupleScheme extends TupleScheme<createStoragePool_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createStoragePool_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLibvirtException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLibvirtException()) {
          struct.libvirtException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createStoragePool_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.libvirtException = new LibvirtException();
          struct.libvirtException.read(iprot);
          struct.setLibvirtExceptionIsSet(true);
        }
      }
    }

  }

  public static class resizeDisk_args implements org.apache.thrift.TBase<resizeDisk_args, resizeDisk_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resizeDisk_args");

    private static final org.apache.thrift.protocol.TField DOMAIN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("domainName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DISK_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("diskPath", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DISK_SIZE_IN_KB_FIELD_DESC = new org.apache.thrift.protocol.TField("diskSizeInKb", org.apache.thrift.protocol.TType.DOUBLE, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resizeDisk_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resizeDisk_argsTupleSchemeFactory());
    }

    public String domainName; // required
    public String diskPath; // required
    public double diskSizeInKb; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DOMAIN_NAME((short)1, "domainName"),
      DISK_PATH((short)2, "diskPath"),
      DISK_SIZE_IN_KB((short)3, "diskSizeInKb");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOMAIN_NAME
            return DOMAIN_NAME;
          case 2: // DISK_PATH
            return DISK_PATH;
          case 3: // DISK_SIZE_IN_KB
            return DISK_SIZE_IN_KB;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DISKSIZEINKB_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOMAIN_NAME, new org.apache.thrift.meta_data.FieldMetaData("domainName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DISK_PATH, new org.apache.thrift.meta_data.FieldMetaData("diskPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DISK_SIZE_IN_KB, new org.apache.thrift.meta_data.FieldMetaData("diskSizeInKb", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resizeDisk_args.class, metaDataMap);
    }

    public resizeDisk_args() {
    }

    public resizeDisk_args(
      String domainName,
      String diskPath,
      double diskSizeInKb)
    {
      this();
      this.domainName = domainName;
      this.diskPath = diskPath;
      this.diskSizeInKb = diskSizeInKb;
      setDiskSizeInKbIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resizeDisk_args(resizeDisk_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetDomainName()) {
        this.domainName = other.domainName;
      }
      if (other.isSetDiskPath()) {
        this.diskPath = other.diskPath;
      }
      this.diskSizeInKb = other.diskSizeInKb;
    }

    public resizeDisk_args deepCopy() {
      return new resizeDisk_args(this);
    }

    @Override
    public void clear() {
      this.domainName = null;
      this.diskPath = null;
      setDiskSizeInKbIsSet(false);
      this.diskSizeInKb = 0.0;
    }

    public String getDomainName() {
      return this.domainName;
    }

    public resizeDisk_args setDomainName(String domainName) {
      this.domainName = domainName;
      return this;
    }

    public void unsetDomainName() {
      this.domainName = null;
    }

    /** Returns true if field domainName is set (has been assigned a value) and false otherwise */
    public boolean isSetDomainName() {
      return this.domainName != null;
    }

    public void setDomainNameIsSet(boolean value) {
      if (!value) {
        this.domainName = null;
      }
    }

    public String getDiskPath() {
      return this.diskPath;
    }

    public resizeDisk_args setDiskPath(String diskPath) {
      this.diskPath = diskPath;
      return this;
    }

    public void unsetDiskPath() {
      this.diskPath = null;
    }

    /** Returns true if field diskPath is set (has been assigned a value) and false otherwise */
    public boolean isSetDiskPath() {
      return this.diskPath != null;
    }

    public void setDiskPathIsSet(boolean value) {
      if (!value) {
        this.diskPath = null;
      }
    }

    public double getDiskSizeInKb() {
      return this.diskSizeInKb;
    }

    public resizeDisk_args setDiskSizeInKb(double diskSizeInKb) {
      this.diskSizeInKb = diskSizeInKb;
      setDiskSizeInKbIsSet(true);
      return this;
    }

    public void unsetDiskSizeInKb() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DISKSIZEINKB_ISSET_ID);
    }

    /** Returns true if field diskSizeInKb is set (has been assigned a value) and false otherwise */
    public boolean isSetDiskSizeInKb() {
      return EncodingUtils.testBit(__isset_bitfield, __DISKSIZEINKB_ISSET_ID);
    }

    public void setDiskSizeInKbIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DISKSIZEINKB_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DOMAIN_NAME:
        if (value == null) {
          unsetDomainName();
        } else {
          setDomainName((String)value);
        }
        break;

      case DISK_PATH:
        if (value == null) {
          unsetDiskPath();
        } else {
          setDiskPath((String)value);
        }
        break;

      case DISK_SIZE_IN_KB:
        if (value == null) {
          unsetDiskSizeInKb();
        } else {
          setDiskSizeInKb((Double)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DOMAIN_NAME:
        return getDomainName();

      case DISK_PATH:
        return getDiskPath();

      case DISK_SIZE_IN_KB:
        return Double.valueOf(getDiskSizeInKb());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DOMAIN_NAME:
        return isSetDomainName();
      case DISK_PATH:
        return isSetDiskPath();
      case DISK_SIZE_IN_KB:
        return isSetDiskSizeInKb();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resizeDisk_args)
        return this.equals((resizeDisk_args)that);
      return false;
    }

    public boolean equals(resizeDisk_args that) {
      if (that == null)
        return false;

      boolean this_present_domainName = true && this.isSetDomainName();
      boolean that_present_domainName = true && that.isSetDomainName();
      if (this_present_domainName || that_present_domainName) {
        if (!(this_present_domainName && that_present_domainName))
          return false;
        if (!this.domainName.equals(that.domainName))
          return false;
      }

      boolean this_present_diskPath = true && this.isSetDiskPath();
      boolean that_present_diskPath = true && that.isSetDiskPath();
      if (this_present_diskPath || that_present_diskPath) {
        if (!(this_present_diskPath && that_present_diskPath))
          return false;
        if (!this.diskPath.equals(that.diskPath))
          return false;
      }

      boolean this_present_diskSizeInKb = true;
      boolean that_present_diskSizeInKb = true;
      if (this_present_diskSizeInKb || that_present_diskSizeInKb) {
        if (!(this_present_diskSizeInKb && that_present_diskSizeInKb))
          return false;
        if (this.diskSizeInKb != that.diskSizeInKb)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(resizeDisk_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      resizeDisk_args typedOther = (resizeDisk_args)other;

      lastComparison = Boolean.valueOf(isSetDomainName()).compareTo(typedOther.isSetDomainName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDomainName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domainName, typedOther.domainName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDiskPath()).compareTo(typedOther.isSetDiskPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDiskPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.diskPath, typedOther.diskPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDiskSizeInKb()).compareTo(typedOther.isSetDiskSizeInKb());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDiskSizeInKb()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.diskSizeInKb, typedOther.diskSizeInKb);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resizeDisk_args(");
      boolean first = true;

      sb.append("domainName:");
      if (this.domainName == null) {
        sb.append("null");
      } else {
        sb.append(this.domainName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("diskPath:");
      if (this.diskPath == null) {
        sb.append("null");
      } else {
        sb.append(this.diskPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("diskSizeInKb:");
      sb.append(this.diskSizeInKb);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resizeDisk_argsStandardSchemeFactory implements SchemeFactory {
      public resizeDisk_argsStandardScheme getScheme() {
        return new resizeDisk_argsStandardScheme();
      }
    }

    private static class resizeDisk_argsStandardScheme extends StandardScheme<resizeDisk_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resizeDisk_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DOMAIN_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.domainName = iprot.readString();
                struct.setDomainNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DISK_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.diskPath = iprot.readString();
                struct.setDiskPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DISK_SIZE_IN_KB
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.diskSizeInKb = iprot.readDouble();
                struct.setDiskSizeInKbIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resizeDisk_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.domainName != null) {
          oprot.writeFieldBegin(DOMAIN_NAME_FIELD_DESC);
          oprot.writeString(struct.domainName);
          oprot.writeFieldEnd();
        }
        if (struct.diskPath != null) {
          oprot.writeFieldBegin(DISK_PATH_FIELD_DESC);
          oprot.writeString(struct.diskPath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(DISK_SIZE_IN_KB_FIELD_DESC);
        oprot.writeDouble(struct.diskSizeInKb);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resizeDisk_argsTupleSchemeFactory implements SchemeFactory {
      public resizeDisk_argsTupleScheme getScheme() {
        return new resizeDisk_argsTupleScheme();
      }
    }

    private static class resizeDisk_argsTupleScheme extends TupleScheme<resizeDisk_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resizeDisk_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDomainName()) {
          optionals.set(0);
        }
        if (struct.isSetDiskPath()) {
          optionals.set(1);
        }
        if (struct.isSetDiskSizeInKb()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDomainName()) {
          oprot.writeString(struct.domainName);
        }
        if (struct.isSetDiskPath()) {
          oprot.writeString(struct.diskPath);
        }
        if (struct.isSetDiskSizeInKb()) {
          oprot.writeDouble(struct.diskSizeInKb);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resizeDisk_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.domainName = iprot.readString();
          struct.setDomainNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.diskPath = iprot.readString();
          struct.setDiskPathIsSet(true);
        }
        if (incoming.get(2)) {
          struct.diskSizeInKb = iprot.readDouble();
          struct.setDiskSizeInKbIsSet(true);
        }
      }
    }

  }

  public static class resizeDisk_result implements org.apache.thrift.TBase<resizeDisk_result, resizeDisk_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resizeDisk_result");

    private static final org.apache.thrift.protocol.TField LIBVIRT_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("libvirtException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resizeDisk_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resizeDisk_resultTupleSchemeFactory());
    }

    public LibvirtException libvirtException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LIBVIRT_EXCEPTION((short)1, "libvirtException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LIBVIRT_EXCEPTION
            return LIBVIRT_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LIBVIRT_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("libvirtException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resizeDisk_result.class, metaDataMap);
    }

    public resizeDisk_result() {
    }

    public resizeDisk_result(
      LibvirtException libvirtException)
    {
      this();
      this.libvirtException = libvirtException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resizeDisk_result(resizeDisk_result other) {
      if (other.isSetLibvirtException()) {
        this.libvirtException = new LibvirtException(other.libvirtException);
      }
    }

    public resizeDisk_result deepCopy() {
      return new resizeDisk_result(this);
    }

    @Override
    public void clear() {
      this.libvirtException = null;
    }

    public LibvirtException getLibvirtException() {
      return this.libvirtException;
    }

    public resizeDisk_result setLibvirtException(LibvirtException libvirtException) {
      this.libvirtException = libvirtException;
      return this;
    }

    public void unsetLibvirtException() {
      this.libvirtException = null;
    }

    /** Returns true if field libvirtException is set (has been assigned a value) and false otherwise */
    public boolean isSetLibvirtException() {
      return this.libvirtException != null;
    }

    public void setLibvirtExceptionIsSet(boolean value) {
      if (!value) {
        this.libvirtException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LIBVIRT_EXCEPTION:
        if (value == null) {
          unsetLibvirtException();
        } else {
          setLibvirtException((LibvirtException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LIBVIRT_EXCEPTION:
        return getLibvirtException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LIBVIRT_EXCEPTION:
        return isSetLibvirtException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resizeDisk_result)
        return this.equals((resizeDisk_result)that);
      return false;
    }

    public boolean equals(resizeDisk_result that) {
      if (that == null)
        return false;

      boolean this_present_libvirtException = true && this.isSetLibvirtException();
      boolean that_present_libvirtException = true && that.isSetLibvirtException();
      if (this_present_libvirtException || that_present_libvirtException) {
        if (!(this_present_libvirtException && that_present_libvirtException))
          return false;
        if (!this.libvirtException.equals(that.libvirtException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(resizeDisk_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      resizeDisk_result typedOther = (resizeDisk_result)other;

      lastComparison = Boolean.valueOf(isSetLibvirtException()).compareTo(typedOther.isSetLibvirtException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLibvirtException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.libvirtException, typedOther.libvirtException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resizeDisk_result(");
      boolean first = true;

      sb.append("libvirtException:");
      if (this.libvirtException == null) {
        sb.append("null");
      } else {
        sb.append(this.libvirtException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resizeDisk_resultStandardSchemeFactory implements SchemeFactory {
      public resizeDisk_resultStandardScheme getScheme() {
        return new resizeDisk_resultStandardScheme();
      }
    }

    private static class resizeDisk_resultStandardScheme extends StandardScheme<resizeDisk_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resizeDisk_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LIBVIRT_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.libvirtException = new LibvirtException();
                struct.libvirtException.read(iprot);
                struct.setLibvirtExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resizeDisk_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.libvirtException != null) {
          oprot.writeFieldBegin(LIBVIRT_EXCEPTION_FIELD_DESC);
          struct.libvirtException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resizeDisk_resultTupleSchemeFactory implements SchemeFactory {
      public resizeDisk_resultTupleScheme getScheme() {
        return new resizeDisk_resultTupleScheme();
      }
    }

    private static class resizeDisk_resultTupleScheme extends TupleScheme<resizeDisk_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resizeDisk_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLibvirtException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLibvirtException()) {
          struct.libvirtException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resizeDisk_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.libvirtException = new LibvirtException();
          struct.libvirtException.read(iprot);
          struct.setLibvirtExceptionIsSet(true);
        }
      }
    }

  }

}
