/**
 * Copyright (C) 2008 - Abiquo Holdings S.L. All rights reserved.
 *
 * Please see /opt/abiquo/tomcat/webapps/legal/ on Abiquo server
 * or contact contact@abiquo.com for licensing information.
 */
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.abiquo.aimstub;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-1-12")
public class Measure implements org.apache.thrift.TBase<Measure, Measure._Fields>, java.io.Serializable, Cloneable, Comparable<Measure> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Measure");

  private static final org.apache.thrift.protocol.TField METRIC_FIELD_DESC = new org.apache.thrift.protocol.TField("metric", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DATAPOINTS_FIELD_DESC = new org.apache.thrift.protocol.TField("datapoints", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField DIMENSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("dimensions", org.apache.thrift.protocol.TType.MAP, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MeasureStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MeasureTupleSchemeFactory());
  }

  public String metric; // required
  public List<Datapoint> datapoints; // required
  public Map<String,String> dimensions; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    METRIC((short)1, "metric"),
    DATAPOINTS((short)2, "datapoints"),
    DIMENSIONS((short)3, "dimensions");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // METRIC
          return METRIC;
        case 2: // DATAPOINTS
          return DATAPOINTS;
        case 3: // DIMENSIONS
          return DIMENSIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.METRIC, new org.apache.thrift.meta_data.FieldMetaData("metric", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATAPOINTS, new org.apache.thrift.meta_data.FieldMetaData("datapoints", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Datapoint.class))));
    tmpMap.put(_Fields.DIMENSIONS, new org.apache.thrift.meta_data.FieldMetaData("dimensions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Measure.class, metaDataMap);
  }

  public Measure() {
  }

  public Measure(
    String metric,
    List<Datapoint> datapoints,
    Map<String,String> dimensions)
  {
    this();
    this.metric = metric;
    this.datapoints = datapoints;
    this.dimensions = dimensions;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Measure(Measure other) {
    if (other.isSetMetric()) {
      this.metric = other.metric;
    }
    if (other.isSetDatapoints()) {
      List<Datapoint> __this__datapoints = new ArrayList<Datapoint>(other.datapoints.size());
      for (Datapoint other_element : other.datapoints) {
        __this__datapoints.add(new Datapoint(other_element));
      }
      this.datapoints = __this__datapoints;
    }
    if (other.isSetDimensions()) {
      Map<String,String> __this__dimensions = new HashMap<String,String>(other.dimensions);
      this.dimensions = __this__dimensions;
    }
  }

  public Measure deepCopy() {
    return new Measure(this);
  }

  @Override
  public void clear() {
    this.metric = null;
    this.datapoints = null;
    this.dimensions = null;
  }

  public String getMetric() {
    return this.metric;
  }

  public Measure setMetric(String metric) {
    this.metric = metric;
    return this;
  }

  public void unsetMetric() {
    this.metric = null;
  }

  /** Returns true if field metric is set (has been assigned a value) and false otherwise */
  public boolean isSetMetric() {
    return this.metric != null;
  }

  public void setMetricIsSet(boolean value) {
    if (!value) {
      this.metric = null;
    }
  }

  public int getDatapointsSize() {
    return (this.datapoints == null) ? 0 : this.datapoints.size();
  }

  public java.util.Iterator<Datapoint> getDatapointsIterator() {
    return (this.datapoints == null) ? null : this.datapoints.iterator();
  }

  public void addToDatapoints(Datapoint elem) {
    if (this.datapoints == null) {
      this.datapoints = new ArrayList<Datapoint>();
    }
    this.datapoints.add(elem);
  }

  public List<Datapoint> getDatapoints() {
    return this.datapoints;
  }

  public Measure setDatapoints(List<Datapoint> datapoints) {
    this.datapoints = datapoints;
    return this;
  }

  public void unsetDatapoints() {
    this.datapoints = null;
  }

  /** Returns true if field datapoints is set (has been assigned a value) and false otherwise */
  public boolean isSetDatapoints() {
    return this.datapoints != null;
  }

  public void setDatapointsIsSet(boolean value) {
    if (!value) {
      this.datapoints = null;
    }
  }

  public int getDimensionsSize() {
    return (this.dimensions == null) ? 0 : this.dimensions.size();
  }

  public void putToDimensions(String key, String val) {
    if (this.dimensions == null) {
      this.dimensions = new HashMap<String,String>();
    }
    this.dimensions.put(key, val);
  }

  public Map<String,String> getDimensions() {
    return this.dimensions;
  }

  public Measure setDimensions(Map<String,String> dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  public void unsetDimensions() {
    this.dimensions = null;
  }

  /** Returns true if field dimensions is set (has been assigned a value) and false otherwise */
  public boolean isSetDimensions() {
    return this.dimensions != null;
  }

  public void setDimensionsIsSet(boolean value) {
    if (!value) {
      this.dimensions = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case METRIC:
      if (value == null) {
        unsetMetric();
      } else {
        setMetric((String)value);
      }
      break;

    case DATAPOINTS:
      if (value == null) {
        unsetDatapoints();
      } else {
        setDatapoints((List<Datapoint>)value);
      }
      break;

    case DIMENSIONS:
      if (value == null) {
        unsetDimensions();
      } else {
        setDimensions((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case METRIC:
      return getMetric();

    case DATAPOINTS:
      return getDatapoints();

    case DIMENSIONS:
      return getDimensions();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case METRIC:
      return isSetMetric();
    case DATAPOINTS:
      return isSetDatapoints();
    case DIMENSIONS:
      return isSetDimensions();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Measure)
      return this.equals((Measure)that);
    return false;
  }

  public boolean equals(Measure that) {
    if (that == null)
      return false;

    boolean this_present_metric = true && this.isSetMetric();
    boolean that_present_metric = true && that.isSetMetric();
    if (this_present_metric || that_present_metric) {
      if (!(this_present_metric && that_present_metric))
        return false;
      if (!this.metric.equals(that.metric))
        return false;
    }

    boolean this_present_datapoints = true && this.isSetDatapoints();
    boolean that_present_datapoints = true && that.isSetDatapoints();
    if (this_present_datapoints || that_present_datapoints) {
      if (!(this_present_datapoints && that_present_datapoints))
        return false;
      if (!this.datapoints.equals(that.datapoints))
        return false;
    }

    boolean this_present_dimensions = true && this.isSetDimensions();
    boolean that_present_dimensions = true && that.isSetDimensions();
    if (this_present_dimensions || that_present_dimensions) {
      if (!(this_present_dimensions && that_present_dimensions))
        return false;
      if (!this.dimensions.equals(that.dimensions))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_metric = true && (isSetMetric());
    list.add(present_metric);
    if (present_metric)
      list.add(metric);

    boolean present_datapoints = true && (isSetDatapoints());
    list.add(present_datapoints);
    if (present_datapoints)
      list.add(datapoints);

    boolean present_dimensions = true && (isSetDimensions());
    list.add(present_dimensions);
    if (present_dimensions)
      list.add(dimensions);

    return list.hashCode();
  }

  @Override
  public int compareTo(Measure other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMetric()).compareTo(other.isSetMetric());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMetric()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.metric, other.metric);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDatapoints()).compareTo(other.isSetDatapoints());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDatapoints()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.datapoints, other.datapoints);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDimensions()).compareTo(other.isSetDimensions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDimensions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dimensions, other.dimensions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Measure(");
    boolean first = true;

    sb.append("metric:");
    if (this.metric == null) {
      sb.append("null");
    } else {
      sb.append(this.metric);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("datapoints:");
    if (this.datapoints == null) {
      sb.append("null");
    } else {
      sb.append(this.datapoints);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dimensions:");
    if (this.dimensions == null) {
      sb.append("null");
    } else {
      sb.append(this.dimensions);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MeasureStandardSchemeFactory implements SchemeFactory {
    public MeasureStandardScheme getScheme() {
      return new MeasureStandardScheme();
    }
  }

  private static class MeasureStandardScheme extends StandardScheme<Measure> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Measure struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // METRIC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.metric = iprot.readString();
              struct.setMetricIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DATAPOINTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.datapoints = new ArrayList<Datapoint>(_list0.size);
                Datapoint _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new Datapoint();
                  _elem1.read(iprot);
                  struct.datapoints.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setDatapointsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DIMENSIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map3 = iprot.readMapBegin();
                struct.dimensions = new HashMap<String,String>(2*_map3.size);
                String _key4;
                String _val5;
                for (int _i6 = 0; _i6 < _map3.size; ++_i6)
                {
                  _key4 = iprot.readString();
                  _val5 = iprot.readString();
                  struct.dimensions.put(_key4, _val5);
                }
                iprot.readMapEnd();
              }
              struct.setDimensionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Measure struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.metric != null) {
        oprot.writeFieldBegin(METRIC_FIELD_DESC);
        oprot.writeString(struct.metric);
        oprot.writeFieldEnd();
      }
      if (struct.datapoints != null) {
        oprot.writeFieldBegin(DATAPOINTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.datapoints.size()));
          for (Datapoint _iter7 : struct.datapoints)
          {
            _iter7.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.dimensions != null) {
        oprot.writeFieldBegin(DIMENSIONS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.dimensions.size()));
          for (Map.Entry<String, String> _iter8 : struct.dimensions.entrySet())
          {
            oprot.writeString(_iter8.getKey());
            oprot.writeString(_iter8.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MeasureTupleSchemeFactory implements SchemeFactory {
    public MeasureTupleScheme getScheme() {
      return new MeasureTupleScheme();
    }
  }

  private static class MeasureTupleScheme extends TupleScheme<Measure> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Measure struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMetric()) {
        optionals.set(0);
      }
      if (struct.isSetDatapoints()) {
        optionals.set(1);
      }
      if (struct.isSetDimensions()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetMetric()) {
        oprot.writeString(struct.metric);
      }
      if (struct.isSetDatapoints()) {
        {
          oprot.writeI32(struct.datapoints.size());
          for (Datapoint _iter9 : struct.datapoints)
          {
            _iter9.write(oprot);
          }
        }
      }
      if (struct.isSetDimensions()) {
        {
          oprot.writeI32(struct.dimensions.size());
          for (Map.Entry<String, String> _iter10 : struct.dimensions.entrySet())
          {
            oprot.writeString(_iter10.getKey());
            oprot.writeString(_iter10.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Measure struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.metric = iprot.readString();
        struct.setMetricIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list11 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.datapoints = new ArrayList<Datapoint>(_list11.size);
          Datapoint _elem12;
          for (int _i13 = 0; _i13 < _list11.size; ++_i13)
          {
            _elem12 = new Datapoint();
            _elem12.read(iprot);
            struct.datapoints.add(_elem12);
          }
        }
        struct.setDatapointsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map14 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.dimensions = new HashMap<String,String>(2*_map14.size);
          String _key15;
          String _val16;
          for (int _i17 = 0; _i17 < _map14.size; ++_i17)
          {
            _key15 = iprot.readString();
            _val16 = iprot.readString();
            struct.dimensions.put(_key15, _val16);
          }
        }
        struct.setDimensionsIsSet(true);
      }
    }
  }

}

